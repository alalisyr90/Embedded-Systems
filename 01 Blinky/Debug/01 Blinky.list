
01 Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e70c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800e8dc  0800e8dc  0001e8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e918  0800e918  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e920  0800e920  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e920  0800e920  0001e920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800e928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  0800e938  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800e9d8  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d20  20000150  0800ea78  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008e70  0800ea78  00028e70  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   000386a3  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000075a3  00000000  00000000  00058866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002fb8  00000000  00000000  0005fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002504  00000000  00000000  00062dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00033341  00000000  00000000  000652cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b536  00000000  00000000  0009860d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00127eae  00000000  00000000  000d3b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000cc38  00000000  00000000  001fb9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  0020862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e8c4 	.word	0x0800e8c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	0800e8c4 	.word	0x0800e8c4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fb4a 	bl	8002bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f83d 	bl	80005b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800053e:	f000 f8ad 	bl	800069c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f001 f82d 	bl	80015a0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000546:	f000 f8db 	bl	8000700 <MX_ADC3_Init>
  MX_CRC_Init();
 800054a:	f000 f92b 	bl	80007a4 <MX_CRC_Init>
  MX_DCMI_Init();
 800054e:	f000 f94b 	bl	80007e8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000552:	f000 f97d 	bl	8000850 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000556:	f000 f9ad 	bl	80008b4 <MX_ETH_Init>
  MX_FMC_Init();
 800055a:	f000 ffd1 	bl	8001500 <MX_FMC_Init>
  MX_I2C1_Init();
 800055e:	f000 f9f7 	bl	8000950 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000562:	f000 fa35 	bl	80009d0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000566:	f000 fa73 	bl	8000a50 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800056a:	f000 faf3 	bl	8000b54 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800056e:	f000 fb1d 	bl	8000bac <MX_RTC_Init>
  MX_SAI2_Init();
 8000572:	f000 fbbf 	bl	8000cf4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000576:	f000 fc65 	bl	8000e44 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800057a:	f000 fc85 	bl	8000e88 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800057e:	f000 fcb3 	bl	8000ee8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000582:	f000 fd5d 	bl	8001040 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000586:	f000 fdd1 	bl	800112c <MX_TIM3_Init>
  MX_TIM5_Init();
 800058a:	f000 fe47 	bl	800121c <MX_TIM5_Init>
  MX_TIM8_Init();
 800058e:	f000 febd 	bl	800130c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000592:	f000 ff0f 	bl	80013b4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000596:	f000 ff53 	bl	8001440 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800059a:	f000 ff81 	bl	80014a0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800059e:	f00b ff23 	bl	800c3e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  while(1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80005a2:	2102      	movs	r1, #2
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <main+0x84>)
 80005a6:	f003 ffc6 	bl	8004536 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ae:	f002 fb3b 	bl	8002c28 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80005b2:	e7f6      	b.n	80005a2 <main+0x72>
 80005b4:	40022000 	.word	0x40022000

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e f942 	bl	800e850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f005 feb2 	bl	8006344 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xdc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a26      	ldr	r2, [pc, #152]	; (8000698 <SystemClock_Config+0xe0>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <SystemClock_Config+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000610:	2309      	movs	r3, #9
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000628:	2319      	movs	r3, #25
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800062c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000636:	2309      	movs	r3, #9
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ffa2 	bl	8006588 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f001 f98d 	bl	8001968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800064e:	f005 fe89 	bl	8006364 <HAL_PWREx_EnableOverDrive>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000658:	f001 f986 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2106      	movs	r1, #6
 800067a:	4618      	mov	r0, r3
 800067c:	f006 fa28 	bl	8006ad0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000686:	f001 f96f 	bl	8001968 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a2      	sub	sp, #136	; 0x88
 80006a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2284      	movs	r2, #132	; 0x84
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00e f8d1 	bl	800e850 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <PeriphCommonClock_Config+0x60>)
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80006b8:	2305      	movs	r3, #5
 80006ba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006c0:	2303      	movs	r3, #3
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80006d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fc0c 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006ee:	f001 f93b 	bl	8001968 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3788      	adds	r7, #136	; 0x88
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	00b00008 	.word	0x00b00008

08000700 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC3_Init+0x98>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_ADC3_Init+0x9c>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC3_Init+0x98>)
 800071a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC3_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC3_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC3_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_ADC3_Init+0x98>)
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC3_Init+0xa0>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC3_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ADC3_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC3_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC3_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_ADC3_Init+0x98>)
 8000762:	f002 fa85 	bl	8002c70 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800076c:	f001 f8fc 	bl	8001968 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000770:	2304      	movs	r3, #4
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000774:	2301      	movs	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC3_Init+0x98>)
 8000782:	f002 fab9 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800078c:	f001 f8ec 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001a4 	.word	0x200001a4
 800079c:	40012200 	.word	0x40012200
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <MX_CRC_Init+0x40>)
 80007ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007ce:	f002 fdc5 	bl	800335c <HAL_CRC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d8:	f001 f8c6 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001ec 	.word	0x200001ec
 80007e4:	40023000 	.word	0x40023000

080007e8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_DCMI_Init+0x60>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_DCMI_Init+0x64>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_DCMI_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_DCMI_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_DCMI_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_DCMI_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DCMI_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_DCMI_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DCMI_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_DCMI_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DCMI_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_DCMI_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_DCMI_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_DCMI_Init+0x60>)
 8000836:	f002 fe7b 	bl	8003530 <HAL_DCMI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000840:	f001 f892 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000210 	.word	0x20000210
 800084c:	50050000 	.word	0x50050000

08000850 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <MX_DMA2D_Init+0x60>)
 8000858:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_DMA2D_Init+0x5c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_DMA2D_Init+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_DMA2D_Init+0x5c>)
 800087a:	2200      	movs	r2, #0
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000880:	2200      	movs	r2, #0
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000886:	f002 ff67 	bl	8003758 <HAL_DMA2D_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000890:	f001 f86a 	bl	8001968 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000894:	2101      	movs	r1, #1
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_DMA2D_Init+0x5c>)
 8000898:	f003 f8b8 	bl	8003a0c <HAL_DMA2D_ConfigLayer>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008a2:	f001 f861 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000260 	.word	0x20000260
 80008b0:	4002b000 	.word	0x4002b000

080008b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ETH_Init+0x84>)
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <MX_ETH_Init+0x88>)
 80008bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_ETH_Init+0x8c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ETH_Init+0x8c>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ETH_Init+0x8c>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_ETH_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ETH_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_ETH_Init+0x8c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ETH_Init+0x84>)
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_ETH_Init+0x8c>)
 80008e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ETH_Init+0x84>)
 80008ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x84>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_ETH_Init+0x90>)
 80008f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_ETH_Init+0x84>)
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x94>)
 80008fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x84>)
 80008fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000902:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x84>)
 8000906:	f003 f913 	bl	8003b30 <HAL_ETH_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000910:	f001 f82a 	bl	8001968 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000914:	2238      	movs	r2, #56	; 0x38
 8000916:	2100      	movs	r1, #0
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_ETH_Init+0x98>)
 800091a:	f00d ff99 	bl	800e850 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_ETH_Init+0x98>)
 8000920:	2221      	movs	r2, #33	; 0x21
 8000922:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_ETH_Init+0x98>)
 8000926:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800092a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_ETH_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200002a0 	.word	0x200002a0
 800093c:	40028000 	.word	0x40028000
 8000940:	200009f0 	.word	0x200009f0
 8000944:	200000b0 	.word	0x200000b0
 8000948:	20000010 	.word	0x20000010
 800094c:	2000016c 	.word	0x2000016c

08000950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C1_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C1_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C1_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C1_Init+0x74>)
 800098c:	f005 f848 	bl	8005a20 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 ffe7 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C1_Init+0x74>)
 800099e:	f005 f8cf 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 ffde 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C1_Init+0x74>)
 80009b0:	f005 f911 	bl	8005bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 ffd5 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000350 	.word	0x20000350
 80009c8:	40005400 	.word	0x40005400
 80009cc:	00c0eaff 	.word	0x00c0eaff

080009d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C3_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C3_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C3_Init+0x74>)
 8000a0c:	f005 f808 	bl	8005a20 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 ffa7 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C3_Init+0x74>)
 8000a1e:	f005 f88f 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 ff9e 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C3_Init+0x74>)
 8000a30:	f005 f8d1 	bl	8005bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 ff95 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200003a4 	.word	0x200003a4
 8000a48:	40005c00 	.word	0x40005c00
 8000a4c:	00c0eaff 	.word	0x00c0eaff

08000a50 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2234      	movs	r2, #52	; 0x34
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00d fef7 	bl	800e850 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a64:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <MX_LTDC_Init+0x100>)
 8000a66:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a82:	2228      	movs	r2, #40	; 0x28
 8000a84:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a88:	2209      	movs	r2, #9
 8000a8a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a8e:	2235      	movs	r2, #53	; 0x35
 8000a90:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a94:	220b      	movs	r2, #11
 8000a96:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000a9a:	f240 2215 	movw	r2, #533	; 0x215
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000aa2:	f240 121b 	movw	r2, #283	; 0x11b
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000aaa:	f240 2235 	movw	r2, #565	; 0x235
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000ab2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ad0:	481e      	ldr	r0, [pc, #120]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000ad2:	f005 f8cd 	bl	8005c70 <HAL_LTDC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000adc:	f000 ff44 	bl	8001968 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ae4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ae8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000aee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000af2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000af8:	23ff      	movs	r3, #255	; 0xff
 8000afa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b04:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b0a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b10:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b16:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_LTDC_Init+0xfc>)
 8000b36:	f005 fa2d 	bl	8005f94 <HAL_LTDC_ConfigLayer>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b40:	f000 ff12 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	; 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200003f8 	.word	0x200003f8
 8000b50:	40016800 	.word	0x40016800

08000b54 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_QUADSPI_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b72:	2218      	movs	r2, #24
 8000b74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b78:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000b7c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b92:	f005 fc37 	bl	8006404 <HAL_QSPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 fee4 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200004a0 	.word	0x200004a0
 8000ba8:	a0001000 	.word	0xa0001000

08000bac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2228      	movs	r2, #40	; 0x28
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d fe3f 	bl	800e850 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bd2:	4b46      	ldr	r3, [pc, #280]	; (8000cec <MX_RTC_Init+0x140>)
 8000bd4:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <MX_RTC_Init+0x144>)
 8000bd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <MX_RTC_Init+0x140>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bde:	4b43      	ldr	r3, [pc, #268]	; (8000cec <MX_RTC_Init+0x140>)
 8000be0:	227f      	movs	r2, #127	; 0x7f
 8000be2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <MX_RTC_Init+0x140>)
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bea:	4b40      	ldr	r3, [pc, #256]	; (8000cec <MX_RTC_Init+0x140>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <MX_RTC_Init+0x140>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <MX_RTC_Init+0x140>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bfc:	483b      	ldr	r0, [pc, #236]	; (8000cec <MX_RTC_Init+0x140>)
 8000bfe:	f006 feaf 	bl	8007960 <HAL_RTC_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c08:	f000 feae 	bl	8001968 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_RTC_Init+0x140>)
 8000c30:	f006 ff1a 	bl	8007a68 <HAL_RTC_SetTime>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c3a:	f000 fe95 	bl	8001968 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000c44:	2301      	movs	r3, #1
 8000c46:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <MX_RTC_Init+0x140>)
 8000c60:	f006 ff9c 	bl	8007b9c <HAL_RTC_SetDate>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000c6a:	f000 fe7d 	bl	8001968 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <MX_RTC_Init+0x140>)
 8000ca6:	f006 fffd 	bl	8007ca4 <HAL_RTC_SetAlarm>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000cb0:	f000 fe5a 	bl	8001968 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <MX_RTC_Init+0x140>)
 8000cc2:	f006 ffef 	bl	8007ca4 <HAL_RTC_SetAlarm>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000ccc:	f000 fe4c 	bl	8001968 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_RTC_Init+0x140>)
 8000cd6:	f007 f9b1 	bl	800803c <HAL_RTCEx_SetTimeStamp>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000ce0:	f000 fe42 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3740      	adds	r7, #64	; 0x40
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200004ec 	.word	0x200004ec
 8000cf0:	40002800 	.word	0x40002800

08000cf4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000cfa:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <MX_SAI2_Init+0x140>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d04:	4b4a      	ldr	r3, [pc, #296]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d0c:	2240      	movs	r2, #64	; 0x40
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d34:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d36:	4a40      	ldr	r2, [pc, #256]	; (8000e38 <MX_SAI2_Init+0x144>)
 8000d38:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d54:	2208      	movs	r2, #8
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d88:	4829      	ldr	r0, [pc, #164]	; (8000e30 <MX_SAI2_Init+0x13c>)
 8000d8a:	f007 f9bf 	bl	800810c <HAL_SAI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d94:	f000 fde8 	bl	8001968 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000d9a:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <MX_SAI2_Init+0x14c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_SAI2_Init+0x148>)
 8000e1e:	f007 f975 	bl	800810c <HAL_SAI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e28:	f000 fd9e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000050c 	.word	0x2000050c
 8000e34:	40015c04 	.word	0x40015c04
 8000e38:	0002ee00 	.word	0x0002ee00
 8000e3c:	20000590 	.word	0x20000590
 8000e40:	40015c24 	.word	0x40015c24

08000e44 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <MX_SDMMC1_SD_Init+0x40>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e66:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <MX_SDMMC1_SD_Init+0x3c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000614 	.word	0x20000614
 8000e84:	40012c00 	.word	0x40012c00

08000e88 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000e8e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e92:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPDIFRX_Init+0x5c>)
 8000ed2:	f008 fba7 	bl	8009624 <HAL_SPDIFRX_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 fd44 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000698 	.word	0x20000698

08000ee8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09a      	sub	sp, #104	; 0x68
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	222c      	movs	r2, #44	; 0x2c
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00d fc94 	bl	800e850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f2a:	4a44      	ldr	r2, [pc, #272]	; (800103c <MX_TIM1_Init+0x154>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b40      	ldr	r3, [pc, #256]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f48:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f54:	4838      	ldr	r0, [pc, #224]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f56:	f008 fbc1 	bl	80096dc <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f60:	f000 fd02 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4831      	ldr	r0, [pc, #196]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f72:	f008 ff0d 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f7c:	f000 fcf4 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f80:	482d      	ldr	r0, [pc, #180]	; (8001038 <MX_TIM1_Init+0x150>)
 8000f82:	f008 fc7b 	bl	800987c <HAL_TIM_PWM_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f8c:	f000 fcec 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4825      	ldr	r0, [pc, #148]	; (8001038 <MX_TIM1_Init+0x150>)
 8000fa4:	f009 fb7e 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fae:	f000 fcdb 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	2360      	movs	r3, #96	; 0x60
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_TIM1_Init+0x150>)
 8000fd8:	f008 fdc6 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fe2:	f000 fcc1 	bl	8001968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_TIM1_Init+0x150>)
 800101c:	f009 fbd0 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001026:	f000 fc9f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_TIM1_Init+0x150>)
 800102c:	f001 fa42 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3768      	adds	r7, #104	; 0x68
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200006e4 	.word	0x200006e4
 800103c:	40010000 	.word	0x40010000

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001074:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001078:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM2_Init+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109a:	4823      	ldr	r0, [pc, #140]	; (8001128 <MX_TIM2_Init+0xe8>)
 800109c:	f008 fb1e 	bl	80096dc <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 fc5f 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481c      	ldr	r0, [pc, #112]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010b8:	f008 fe6a 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010c2:	f000 fc51 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010c8:	f008 fbd8 	bl	800987c <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010d2:	f000 fc49 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010e6:	f009 fadd 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010f0:	f000 fc3a 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM2_Init+0xe8>)
 800110c:	f008 fd2c 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001116:	f000 fc27 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM2_Init+0xe8>)
 800111c:	f001 f9ca 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001120:	bf00      	nop
 8001122:	3738      	adds	r7, #56	; 0x38
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000730 	.word	0x20000730

0800112c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <MX_TIM3_Init+0xec>)
 8001162:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM3_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_TIM3_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001186:	f008 faa9 	bl	80096dc <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001190:	f000 fbea 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	4619      	mov	r1, r3
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011a2:	f008 fdf5 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011ac:	f000 fbdc 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011b2:	f008 fb63 	bl	800987c <HAL_TIM_PWM_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011bc:	f000 fbd4 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011d0:	f009 fa68 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011da:	f000 fbc5 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011de:	2360      	movs	r3, #96	; 0x60
 80011e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011f6:	f008 fcb7 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001200:	f000 fbb2 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001206:	f001 f955 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3738      	adds	r7, #56	; 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000077c 	.word	0x2000077c
 8001218:	40000400 	.word	0x40000400

0800121c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001250:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <MX_TIM5_Init+0xec>)
 8001252:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_TIM5_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001266:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_TIM5_Init+0xe8>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001274:	4823      	ldr	r0, [pc, #140]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001276:	f008 fa31 	bl	80096dc <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001280:	f000 fb72 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	4619      	mov	r1, r3
 8001290:	481c      	ldr	r0, [pc, #112]	; (8001304 <MX_TIM5_Init+0xe8>)
 8001292:	f008 fd7d 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800129c:	f000 fb64 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012a0:	4818      	ldr	r0, [pc, #96]	; (8001304 <MX_TIM5_Init+0xe8>)
 80012a2:	f008 faeb 	bl	800987c <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012ac:	f000 fb5c 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_TIM5_Init+0xe8>)
 80012c0:	f009 f9f0 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012ca:	f000 fb4d 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	220c      	movs	r2, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM5_Init+0xe8>)
 80012e6:	f008 fc3f 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012f0:	f000 fb3a 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM5_Init+0xe8>)
 80012f6:	f001 f8dd 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200007c8 	.word	0x200007c8
 8001308:	40000c00 	.word	0x40000c00

0800130c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_TIM8_Init+0xa0>)
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <MX_TIM8_Init+0xa4>)
 800132e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_TIM8_Init+0xa0>)
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_TIM8_Init+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001358:	f008 f9c0 	bl	80096dc <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001362:	f000 fb01 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001374:	f008 fd0c 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800137e:	f000 faf3 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM8_Init+0xa0>)
 8001394:	f009 f986 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800139e:	f000 fae3 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000814 	.word	0x20000814
 80013b0:	40010400 	.word	0x40010400

080013b4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_TIM12_Init+0x84>)
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <MX_TIM12_Init+0x88>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM12_Init+0x84>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_TIM12_Init+0x84>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_TIM12_Init+0x84>)
 80013e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_TIM12_Init+0x84>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_TIM12_Init+0x84>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_TIM12_Init+0x84>)
 80013f4:	f008 fa42 	bl	800987c <HAL_TIM_PWM_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80013fe:	f000 fab3 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM12_Init+0x84>)
 800141a:	f008 fba5 	bl	8009b68 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001424:	f000 faa0 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM12_Init+0x84>)
 800142a:	f001 f843 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000860 	.word	0x20000860
 800143c:	40001800 	.word	0x40001800

08001440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_USART1_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001484:	f009 fa38 	bl	800a8f8 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 fa6b 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200008ac 	.word	0x200008ac
 800149c:	40011000 	.word	0x40011000

080014a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <MX_USART6_UART_Init+0x5c>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART6_UART_Init+0x58>)
 80014e4:	f009 fa08 	bl	800a8f8 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80014ee:	f000 fa3b 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000934 	.word	0x20000934
 80014fc:	40011400 	.word	0x40011400

08001500 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_FMC_Init+0x98>)
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <MX_FMC_Init+0x9c>)
 800151c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_FMC_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_FMC_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_FMC_Init+0x98>)
 800152c:	2204      	movs	r2, #4
 800152e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_FMC_Init+0x98>)
 8001532:	2210      	movs	r2, #16
 8001534:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_FMC_Init+0x98>)
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_FMC_Init+0x98>)
 800153e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001542:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_FMC_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_FMC_Init+0x98>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_FMC_Init+0x98>)
 8001554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_FMC_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001564:	2307      	movs	r3, #7
 8001566:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001568:	2304      	movs	r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800156c:	2307      	movs	r3, #7
 800156e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001570:	2303      	movs	r3, #3
 8001572:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_FMC_Init+0x98>)
 8001582:	f008 f81a 	bl	80095ba <HAL_SDRAM_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800158c:	f000 f9ec 	bl	8001968 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200009bc 	.word	0x200009bc
 800159c:	a0000140 	.word	0xa0000140

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	4bb0      	ldr	r3, [pc, #704]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4aaf      	ldr	r2, [pc, #700]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4bad      	ldr	r3, [pc, #692]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	4baa      	ldr	r3, [pc, #680]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4aa9      	ldr	r2, [pc, #676]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4ba7      	ldr	r3, [pc, #668]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4ba4      	ldr	r3, [pc, #656]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4aa3      	ldr	r2, [pc, #652]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4ba1      	ldr	r3, [pc, #644]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b9e      	ldr	r3, [pc, #632]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a9d      	ldr	r2, [pc, #628]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b9b      	ldr	r3, [pc, #620]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b98      	ldr	r3, [pc, #608]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a97      	ldr	r2, [pc, #604]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b95      	ldr	r3, [pc, #596]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b92      	ldr	r3, [pc, #584]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a91      	ldr	r2, [pc, #580]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a8b      	ldr	r2, [pc, #556]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800164c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800165e:	4b86      	ldr	r3, [pc, #536]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a85      	ldr	r2, [pc, #532]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800167c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <MX_GPIO_Init+0x2d8>)
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <MX_GPIO_Init+0x2d8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a73      	ldr	r2, [pc, #460]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b71      	ldr	r3, [pc, #452]	; (8001878 <MX_GPIO_Init+0x2d8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2120      	movs	r1, #32
 80016c2:	486e      	ldr	r0, [pc, #440]	; (800187c <MX_GPIO_Init+0x2dc>)
 80016c4:	f002 ff1e 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	210e      	movs	r1, #14
 80016cc:	486c      	ldr	r0, [pc, #432]	; (8001880 <MX_GPIO_Init+0x2e0>)
 80016ce:	f002 ff19 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2108      	movs	r1, #8
 80016d6:	486b      	ldr	r0, [pc, #428]	; (8001884 <MX_GPIO_Init+0x2e4>)
 80016d8:	f002 ff14 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	4867      	ldr	r0, [pc, #412]	; (8001880 <MX_GPIO_Init+0x2e0>)
 80016e4:	f002 ff0e 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ee:	4866      	ldr	r0, [pc, #408]	; (8001888 <MX_GPIO_Init+0x2e8>)
 80016f0:	f002 ff08 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	21c8      	movs	r1, #200	; 0xc8
 80016f8:	4864      	ldr	r0, [pc, #400]	; (800188c <MX_GPIO_Init+0x2ec>)
 80016fa:	f002 ff03 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016fe:	2308      	movs	r3, #8
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170e:	4619      	mov	r1, r3
 8001710:	485f      	ldr	r0, [pc, #380]	; (8001890 <MX_GPIO_Init+0x2f0>)
 8001712:	f002 fd33 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001716:	f643 4323 	movw	r3, #15395	; 0x3c23
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001728:	230a      	movs	r3, #10
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	4619      	mov	r1, r3
 8001732:	4858      	ldr	r0, [pc, #352]	; (8001894 <MX_GPIO_Init+0x2f4>)
 8001734:	f002 fd22 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	4852      	ldr	r0, [pc, #328]	; (8001898 <MX_GPIO_Init+0x2f8>)
 800174e:	f002 fd15 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001756:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4845      	ldr	r0, [pc, #276]	; (800187c <MX_GPIO_Init+0x2dc>)
 8001768:	f002 fd08 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800176c:	2320      	movs	r3, #32
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001780:	4619      	mov	r1, r3
 8001782:	483e      	ldr	r0, [pc, #248]	; (800187c <MX_GPIO_Init+0x2dc>)
 8001784:	f002 fcfa 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8001788:	f241 030e 	movw	r3, #4110	; 0x100e
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	4837      	ldr	r0, [pc, #220]	; (8001880 <MX_GPIO_Init+0x2e0>)
 80017a2:	f002 fceb 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4838      	ldr	r0, [pc, #224]	; (800189c <MX_GPIO_Init+0x2fc>)
 80017bc:	f002 fcde 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80017c0:	2308      	movs	r3, #8
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	4619      	mov	r1, r3
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <MX_GPIO_Init+0x2e4>)
 80017d8:	f002 fcd0 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017dc:	2310      	movs	r3, #16
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	4619      	mov	r1, r3
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <MX_GPIO_Init+0x2dc>)
 80017f0:	f002 fcc4 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80017f4:	f248 0304 	movw	r3, #32772	; 0x8004
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	481f      	ldr	r0, [pc, #124]	; (8001888 <MX_GPIO_Init+0x2e8>)
 800180a:	f002 fcb7 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	4818      	ldr	r0, [pc, #96]	; (8001888 <MX_GPIO_Init+0x2e8>)
 8001828:	f002 fca8 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800182c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001832:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <MX_GPIO_Init+0x2e0>)
 8001844:	f002 fc9a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001848:	2310      	movs	r3, #16
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001858:	230a      	movs	r3, #10
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	4809      	ldr	r0, [pc, #36]	; (8001888 <MX_GPIO_Init+0x2e8>)
 8001864:	f002 fc8a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001868:	23c8      	movs	r3, #200	; 0xc8
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
 8001874:	e014      	b.n	80018a0 <MX_GPIO_Init+0x300>
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40022000 	.word	0x40022000
 8001884:	40022800 	.word	0x40022800
 8001888:	40021c00 	.word	0x40021c00
 800188c:	40021800 	.word	0x40021800
 8001890:	40021000 	.word	0x40021000
 8001894:	40020400 	.word	0x40020400
 8001898:	40022400 	.word	0x40022400
 800189c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4822      	ldr	r0, [pc, #136]	; (8001934 <MX_GPIO_Init+0x394>)
 80018ac:	f002 fc66 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80018b0:	2305      	movs	r3, #5
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018c0:	230a      	movs	r3, #10
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x398>)
 80018cc:	f002 fc56 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80018d0:	2304      	movs	r3, #4
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4814      	ldr	r0, [pc, #80]	; (8001934 <MX_GPIO_Init+0x394>)
 80018e4:	f002 fc4a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018e8:	2328      	movs	r3, #40	; 0x28
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018f8:	230a      	movs	r3, #10
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <MX_GPIO_Init+0x39c>)
 8001904:	f002 fc3a 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001908:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191a:	2305      	movs	r3, #5
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <MX_GPIO_Init+0x3a0>)
 8001926:	f002 fc29 	bl	800417c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800192a:	bf00      	nop
 800192c:	3740      	adds	r7, #64	; 0x40
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021800 	.word	0x40021800
 8001938:	40020800 	.word	0x40020800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400

08001944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001956:	f001 f947 	bl	8002be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40001000 	.word	0x40001000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210f      	movs	r1, #15
 80019ae:	f06f 0001 	mvn.w	r0, #1
 80019b2:	f001 fca9 	bl	8003308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_ADC_MspInit+0xa4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d13c      	bne.n	8001a60 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 80019ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a04:	f043 0320 	orr.w	r3, r3, #32
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_ADC_MspInit+0xa8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001a2e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a32:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_ADC_MspInit+0xac>)
 8001a44:	f002 fb9a 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <HAL_ADC_MspInit+0xb0>)
 8001a5c:	f002 fb8e 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40012200 	.word	0x40012200
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40020000 	.word	0x40020000

08001a78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_CRC_MspInit+0x38>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10b      	bne.n	8001aa2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_CRC_MspInit+0x3c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_CRC_MspInit+0x3c>)
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_CRC_MspInit+0x3c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023000 	.word	0x40023000
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <HAL_DCMI_MspInit+0x160>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	f040 809a 	bne.w	8001c10 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4a48      	ldr	r2, [pc, #288]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6313      	str	r3, [r2, #48]	; 0x30
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3c:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a36      	ldr	r2, [pc, #216]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_DCMI_MspInit+0x164>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b7c:	230d      	movs	r3, #13
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4826      	ldr	r0, [pc, #152]	; (8001c20 <HAL_DCMI_MspInit+0x168>)
 8001b88:	f002 faf8 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b9c:	230d      	movs	r3, #13
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481f      	ldr	r0, [pc, #124]	; (8001c24 <HAL_DCMI_MspInit+0x16c>)
 8001ba8:	f002 fae8 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bbe:	230d      	movs	r3, #13
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4817      	ldr	r0, [pc, #92]	; (8001c28 <HAL_DCMI_MspInit+0x170>)
 8001bca:	f002 fad7 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001bce:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001be0:	230d      	movs	r3, #13
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <HAL_DCMI_MspInit+0x174>)
 8001bec:	f002 fac6 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001bf0:	2350      	movs	r3, #80	; 0x50
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c00:	230d      	movs	r3, #13
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <HAL_DCMI_MspInit+0x178>)
 8001c0c:	f002 fab6 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3738      	adds	r7, #56	; 0x38
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	50050000 	.word	0x50050000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_DMA2D_MspInit+0x44>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d113      	bne.n	8001c6e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_DMA2D_MspInit+0x48>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_DMA2D_MspInit+0x48>)
 8001c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_DMA2D_MspInit+0x48>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	205a      	movs	r0, #90	; 0x5a
 8001c64:	f001 fb50 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c68:	205a      	movs	r0, #90	; 0x5a
 8001c6a:	f001 fb69 	bl	8003340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	4002b000 	.word	0x4002b000
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a3f      	ldr	r2, [pc, #252]	; (8001d9c <HAL_ETH_MspInit+0x11c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d178      	bne.n	8001d94 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a32      	ldr	r2, [pc, #200]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_ETH_MspInit+0x120>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d32:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d44:	230b      	movs	r3, #11
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4815      	ldr	r0, [pc, #84]	; (8001da4 <HAL_ETH_MspInit+0x124>)
 8001d50:	f002 fa14 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d54:	2332      	movs	r3, #50	; 0x32
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d64:	230b      	movs	r3, #11
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480e      	ldr	r0, [pc, #56]	; (8001da8 <HAL_ETH_MspInit+0x128>)
 8001d70:	f002 fa04 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d74:	2386      	movs	r3, #134	; 0x86
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d84:	230b      	movs	r3, #11
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <HAL_ETH_MspInit+0x12c>)
 8001d90:	f002 f9f4 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40028000 	.word	0x40028000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ac      	sub	sp, #176	; 0xb0
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	2284      	movs	r2, #132	; 0x84
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00c fd3d 	bl	800e850 <memset>
  if(hi2c->Instance==I2C1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a44      	ldr	r2, [pc, #272]	; (8001eec <HAL_I2C_MspInit+0x13c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d13d      	bne.n	8001e5c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 f886 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dfa:	f7ff fdb5 	bl	8001968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e30:	2304      	movs	r3, #4
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482d      	ldr	r0, [pc, #180]	; (8001ef4 <HAL_I2C_MspInit+0x144>)
 8001e3e:	f002 f99d 	bl	800417c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e5a:	e042      	b.n	8001ee2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_I2C_MspInit+0x148>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d13d      	bne.n	8001ee2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f005 f842 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001e82:	f7ff fd71 	bl	8001968 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ebe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <HAL_I2C_MspInit+0x14c>)
 8001ec6:	f002 f959 	bl	800417c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_I2C_MspInit+0x140>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	37b0      	adds	r7, #176	; 0xb0
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40005c00 	.word	0x40005c00
 8001efc:	40021c00 	.word	0x40021c00

08001f00 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <HAL_LTDC_MspInit+0x174>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	f040 80a3 	bne.w	800206a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f24:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	4a53      	ldr	r2, [pc, #332]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f30:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a4d      	ldr	r2, [pc, #308]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a41      	ldr	r2, [pc, #260]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a35      	ldr	r2, [pc, #212]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_LTDC_MspInit+0x178>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fc4:	230e      	movs	r3, #14
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	482b      	ldr	r0, [pc, #172]	; (800207c <HAL_LTDC_MspInit+0x17c>)
 8001fd0:	f002 f8d4 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fd4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fe6:	230e      	movs	r3, #14
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4823      	ldr	r0, [pc, #140]	; (8002080 <HAL_LTDC_MspInit+0x180>)
 8001ff2:	f002 f8c3 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001ff6:	23f7      	movs	r3, #247	; 0xf7
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002006:	230e      	movs	r3, #14
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <HAL_LTDC_MspInit+0x184>)
 8002012:	f002 f8b3 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002028:	2309      	movs	r3, #9
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	4815      	ldr	r0, [pc, #84]	; (8002088 <HAL_LTDC_MspInit+0x188>)
 8002034:	f002 f8a2 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002038:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204a:	230e      	movs	r3, #14
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <HAL_LTDC_MspInit+0x18c>)
 8002056:	f002 f891 	bl	800417c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2105      	movs	r1, #5
 800205e:	2058      	movs	r0, #88	; 0x58
 8002060:	f001 f952 	bl	8003308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002064:	2058      	movs	r0, #88	; 0x58
 8002066:	f001 f96b 	bl	8003340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3738      	adds	r7, #56	; 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40016800 	.word	0x40016800
 8002078:	40023800 	.word	0x40023800
 800207c:	40021000 	.word	0x40021000
 8002080:	40022400 	.word	0x40022400
 8002084:	40022800 	.word	0x40022800
 8002088:	40021800 	.word	0x40021800
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a3b      	ldr	r2, [pc, #236]	; (800219c <HAL_QSPI_MspInit+0x10c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d170      	bne.n	8002194 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6393      	str	r3, [r2, #56]	; 0x38
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_QSPI_MspInit+0x110>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002112:	2304      	movs	r3, #4
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002122:	2309      	movs	r3, #9
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	481d      	ldr	r0, [pc, #116]	; (80021a4 <HAL_QSPI_MspInit+0x114>)
 800212e:	f002 f825 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002142:	230a      	movs	r3, #10
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4816      	ldr	r0, [pc, #88]	; (80021a8 <HAL_QSPI_MspInit+0x118>)
 800214e:	f002 f815 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002152:	2304      	movs	r3, #4
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002162:	2309      	movs	r3, #9
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	480e      	ldr	r0, [pc, #56]	; (80021a8 <HAL_QSPI_MspInit+0x118>)
 800216e:	f002 f805 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002172:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002184:	2309      	movs	r3, #9
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <HAL_QSPI_MspInit+0x11c>)
 8002190:	f001 fff4 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3730      	adds	r7, #48	; 0x30
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	a0001000 	.word	0xa0001000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020c00 	.word	0x40020c00

080021b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0a4      	sub	sp, #144	; 0x90
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2284      	movs	r2, #132	; 0x84
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00c fb45 	bl	800e850 <memset>
  if(hrtc->Instance==RTC)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_RTC_MspInit+0x54>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d114      	bne.n	80021fa <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021d0:	2320      	movs	r3, #32
 80021d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fe8e 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021ea:	f7ff fbbd 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RTC_MspInit+0x58>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_RTC_MspInit+0x58>)
 80021f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3790      	adds	r7, #144	; 0x90
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40002800 	.word	0x40002800
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_SD_MspInit+0xb4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d144      	bne.n	80022b8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_SD_MspInit+0xb8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002276:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800227a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002288:	230c      	movs	r3, #12
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <HAL_SD_MspInit+0xbc>)
 8002294:	f001 ff72 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002298:	2304      	movs	r3, #4
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022a8:	230c      	movs	r3, #12
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <HAL_SD_MspInit+0xc0>)
 80022b4:	f001 ff62 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00

080022d0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0aa      	sub	sp, #168	; 0xa8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2284      	movs	r2, #132	; 0x84
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00c faad 	bl	800e850 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80022fe:	d143      	bne.n	8002388 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002304:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002306:	2364      	movs	r3, #100	; 0x64
 8002308:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002312:	2302      	movs	r3, #2
 8002314:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f004 fdee 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800232a:	f7ff fb1d 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_SPDIFRX_MspInit+0xc0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002376:	2308      	movs	r3, #8
 8002378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002380:	4619      	mov	r1, r3
 8002382:	4804      	ldr	r0, [pc, #16]	; (8002394 <HAL_SPDIFRX_MspInit+0xc4>)
 8002384:	f001 fefa 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	37a8      	adds	r7, #168	; 0xa8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	40020c00 	.word	0x40020c00

08002398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_TIM_Base_MspInit+0xc8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10c      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023c2:	e046      	b.n	8002452 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a24      	ldr	r2, [pc, #144]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
}
 80023e6:	e034      	b.n	8002452 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_TIM_Base_MspInit+0xd0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10c      	bne.n	800240c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
}
 800240a:	e022      	b.n	8002452 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_TIM_Base_MspInit+0xd4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10c      	bne.n	8002430 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
}
 800242e:	e010      	b.n	8002452 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <HAL_TIM_Base_MspInit+0xd8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10b      	bne.n	8002452 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <HAL_TIM_Base_MspInit+0xcc>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
}
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40023800 	.word	0x40023800
 8002468:	40000400 	.word	0x40000400
 800246c:	40000c00 	.word	0x40000c00
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_TIM_PWM_MspInit+0x38>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10b      	bne.n	800249e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800248c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40001800 	.word	0x40001800
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_TIM_MspPostInit+0x178>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11d      	bne.n	8002512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	484a      	ldr	r0, [pc, #296]	; (8002634 <HAL_TIM_MspPostInit+0x180>)
 800250c:	f001 fe36 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002510:	e087      	b.n	8002622 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d11d      	bne.n	8002558 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a43      	ldr	r2, [pc, #268]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002546:	2301      	movs	r3, #1
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	4838      	ldr	r0, [pc, #224]	; (8002634 <HAL_TIM_MspPostInit+0x180>)
 8002552:	f001 fe13 	bl	800417c <HAL_GPIO_Init>
}
 8002556:	e064      	b.n	8002622 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_TIM_MspPostInit+0x184>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d11c      	bne.n	800259c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a32      	ldr	r2, [pc, #200]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800257a:	2310      	movs	r3, #16
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800258a:	2302      	movs	r3, #2
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4829      	ldr	r0, [pc, #164]	; (800263c <HAL_TIM_MspPostInit+0x188>)
 8002596:	f001 fdf1 	bl	800417c <HAL_GPIO_Init>
}
 800259a:	e042      	b.n	8002622 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_TIM_MspPostInit+0x18c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d11c      	bne.n	80025e0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025ce:	2302      	movs	r3, #2
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	481a      	ldr	r0, [pc, #104]	; (8002644 <HAL_TIM_MspPostInit+0x190>)
 80025da:	f001 fdcf 	bl	800417c <HAL_GPIO_Init>
}
 80025de:	e020      	b.n	8002622 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_TIM_MspPostInit+0x194>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11b      	bne.n	8002622 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_TIM_MspPostInit+0x17c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002602:	2340      	movs	r3, #64	; 0x40
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002612:	2309      	movs	r3, #9
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <HAL_TIM_MspPostInit+0x198>)
 800261e:	f001 fdad 	bl	800417c <HAL_GPIO_Init>
}
 8002622:	bf00      	nop
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40023800 	.word	0x40023800
 8002634:	40020000 	.word	0x40020000
 8002638:	40000400 	.word	0x40000400
 800263c:	40020400 	.word	0x40020400
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40022000 	.word	0x40022000
 8002648:	40001800 	.word	0x40001800
 800264c:	40021c00 	.word	0x40021c00

08002650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0ae      	sub	sp, #184	; 0xb8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	2284      	movs	r2, #132	; 0x84
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f00c f8ed 	bl	800e850 <memset>
  if(huart->Instance==USART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a53      	ldr	r2, [pc, #332]	; (80027c8 <HAL_UART_MspInit+0x178>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d15d      	bne.n	800273c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002680:	2340      	movs	r3, #64	; 0x40
 8002682:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002684:	2300      	movs	r3, #0
 8002686:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fc37 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002698:	f7ff f966 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_UART_MspInit+0x17c>)
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	6453      	str	r3, [r2, #68]	; 0x44
 80026a8:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4a44      	ldr	r2, [pc, #272]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	6313      	str	r3, [r2, #48]	; 0x30
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a3e      	ldr	r2, [pc, #248]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_UART_MspInit+0x17c>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026fc:	2307      	movs	r3, #7
 80026fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002706:	4619      	mov	r1, r3
 8002708:	4831      	ldr	r0, [pc, #196]	; (80027d0 <HAL_UART_MspInit+0x180>)
 800270a:	f001 fd37 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800270e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002728:	2307      	movs	r3, #7
 800272a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002732:	4619      	mov	r1, r3
 8002734:	4827      	ldr	r0, [pc, #156]	; (80027d4 <HAL_UART_MspInit+0x184>)
 8002736:	f001 fd21 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800273a:	e040      	b.n	80027be <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_UART_MspInit+0x188>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d13b      	bne.n	80027be <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800274c:	2300      	movs	r3, #0
 800274e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fbd3 	bl	8006f00 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002760:	f7ff f902 	bl	8001968 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_UART_MspInit+0x17c>)
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_UART_MspInit+0x17c>)
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	6453      	str	r3, [r2, #68]	; 0x44
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_UART_MspInit+0x17c>)
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_UART_MspInit+0x17c>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <HAL_UART_MspInit+0x17c>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_UART_MspInit+0x17c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002794:	23c0      	movs	r3, #192	; 0xc0
 8002796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ac:	2308      	movs	r3, #8
 80027ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027b6:	4619      	mov	r1, r3
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <HAL_UART_MspInit+0x18c>)
 80027ba:	f001 fcdf 	bl	800417c <HAL_GPIO_Init>
}
 80027be:	bf00      	nop
 80027c0:	37b8      	adds	r7, #184	; 0xb8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40011400 	.word	0x40011400
 80027dc:	40020800 	.word	0x40020800

080027e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_FMC_MspInit+0x100>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d16d      	bne.n	80028d8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_FMC_MspInit+0x100>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_FMC_MspInit+0x104>)
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_FMC_MspInit+0x104>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6393      	str	r3, [r2, #56]	; 0x38
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_FMC_MspInit+0x104>)
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800281a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800281e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282c:	230c      	movs	r3, #12
 800282e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	4619      	mov	r1, r3
 8002834:	482c      	ldr	r0, [pc, #176]	; (80028e8 <HAL_FMC_MspInit+0x108>)
 8002836:	f001 fca1 	bl	800417c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800283a:	f248 1333 	movw	r3, #33075	; 0x8133
 800283e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800284c:	230c      	movs	r3, #12
 800284e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4825      	ldr	r0, [pc, #148]	; (80028ec <HAL_FMC_MspInit+0x10c>)
 8002856:	f001 fc91 	bl	800417c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800285a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800285e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800286c:	230c      	movs	r3, #12
 800286e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4619      	mov	r1, r3
 8002874:	481e      	ldr	r0, [pc, #120]	; (80028f0 <HAL_FMC_MspInit+0x110>)
 8002876:	f001 fc81 	bl	800417c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800287a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800287e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800288c:	230c      	movs	r3, #12
 800288e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4817      	ldr	r0, [pc, #92]	; (80028f4 <HAL_FMC_MspInit+0x114>)
 8002896:	f001 fc71 	bl	800417c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800289a:	2328      	movs	r3, #40	; 0x28
 800289c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028aa:	230c      	movs	r3, #12
 80028ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4811      	ldr	r0, [pc, #68]	; (80028f8 <HAL_FMC_MspInit+0x118>)
 80028b4:	f001 fc62 	bl	800417c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80028b8:	2308      	movs	r3, #8
 80028ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028c8:	230c      	movs	r3, #12
 80028ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <HAL_FMC_MspInit+0x11c>)
 80028d2:	f001 fc53 	bl	800417c <HAL_GPIO_Init>
 80028d6:	e000      	b.n	80028da <HAL_FMC_MspInit+0xfa>
    return;
 80028d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200009f8 	.word	0x200009f8
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021c00 	.word	0x40021c00
 80028fc:	40020800 	.word	0x40020800

08002900 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002908:	f7ff ff6a 	bl	80027e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_SAI_MspInit+0xbc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d124      	bne.n	8002970 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 8002934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 800294e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002950:	23f0      	movs	r3, #240	; 0xf0
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002960:	230a      	movs	r3, #10
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	481c      	ldr	r0, [pc, #112]	; (80029dc <HAL_SAI_MspInit+0xc8>)
 800296c:	f001 fc06 	bl	800417c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_SAI_MspInit+0xcc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d125      	bne.n	80029c6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 8002988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_SAI_MspInit+0xc4>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_SAI_MspInit+0xc0>)
 80029a2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029b6:	230a      	movs	r3, #10
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <HAL_SAI_MspInit+0xd0>)
 80029c2:	f001 fbdb 	bl	800417c <HAL_GPIO_Init>

    }
}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40015c04 	.word	0x40015c04
 80029d4:	200009fc 	.word	0x200009fc
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40015c24 	.word	0x40015c24
 80029e4:	40021800 	.word	0x40021800

080029e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_InitTick+0xe0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_InitTick+0xe0>)
 80029fe:	f043 0310 	orr.w	r3, r3, #16
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_InitTick+0xe0>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a10:	f107 0210 	add.w	r2, r7, #16
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fa3e 	bl	8006e9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a2a:	f004 fa0f 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8002a2e:	6378      	str	r0, [r7, #52]	; 0x34
 8002a30:	e004      	b.n	8002a3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a32:	f004 fa0b 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8002a36:	4603      	mov	r3, r0
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	4a23      	ldr	r2, [pc, #140]	; (8002acc <HAL_InitTick+0xe4>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	3b01      	subs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a4c:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a70:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a72:	f006 fe33 	bl	80096dc <HAL_TIM_Base_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11b      	bne.n	8002abc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a84:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a86:	f006 fe81 	bl	800978c <HAL_TIM_Base_Start_IT>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a98:	2036      	movs	r0, #54	; 0x36
 8002a9a:	f000 fc51 	bl	8003340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d808      	bhi.n	8002ab6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	2036      	movs	r0, #54	; 0x36
 8002aaa:	f000 fc2d 	bl	8003308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_InitTick+0xf0>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e002      	b.n	8002abc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3738      	adds	r7, #56	; 0x38
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	431bde83 	.word	0x431bde83
 8002ad0:	20000a00 	.word	0x20000a00
 8002ad4:	40001000 	.word	0x40001000
 8002ad8:	20000004 	.word	0x20000004

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <MemManage_Handler+0x4>

08002aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <TIM6_DAC_IRQHandler+0x10>)
 8002b0e:	f006 ff0c 	bl	800992a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000a00 	.word	0x20000a00

08002b1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <OTG_FS_IRQHandler+0x10>)
 8002b22:	f001 fd22 	bl	800456a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20008b6c 	.word	0x20008b6c

08002b30 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <LTDC_IRQHandler+0x10>)
 8002b36:	f003 f96b 	bl	8005e10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200003f8 	.word	0x200003f8

08002b44 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <DMA2D_IRQHandler+0x10>)
 8002b4a:	f000 fe4f 	bl	80037ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000260 	.word	0x20000260

08002b58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <SystemInit+0x20>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <SystemInit+0x20>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b82:	490e      	ldr	r1, [pc, #56]	; (8002bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b84:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b88:	e002      	b.n	8002b90 <LoopCopyDataInit>

08002b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8e:	3304      	adds	r3, #4

08002b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b94:	d3f9      	bcc.n	8002b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b98:	4c0b      	ldr	r4, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b9c:	e001      	b.n	8002ba2 <LoopFillZerobss>

08002b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba0:	3204      	adds	r2, #4

08002ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba4:	d3fb      	bcc.n	8002b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ba6:	f7ff ffd7 	bl	8002b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002baa:	f00b fe59 	bl	800e860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bae:	f7fd fcbf 	bl	8000530 <main>
  bx  lr    
 8002bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002bc0:	0800e928 	.word	0x0800e928
  ldr r2, =_sbss
 8002bc4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002bc8:	20008e70 	.word	0x20008e70

08002bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC_IRQHandler>

08002bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f000 fb8d 	bl	80032f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff ff05 	bl	80029e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bde:	f7fe fec9 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_IncTick+0x20>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x24>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_IncTick+0x24>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000a4c 	.word	0x20000a4c

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000a4c 	.word	0x20000a4c

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffde 	bl	8002c10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000008 	.word	0x20000008

08002c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e031      	b.n	8002cea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fe98 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_ADC_Init+0x84>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f970 	bl	8002fa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8002cda:	e001      	b.n	8002ce0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	ffffeefd 	.word	0xffffeefd

08002cf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e136      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x28a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d93a      	bls.n	8002d9a <HAL_ADC_ConfigChannel+0xa2>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d2c:	d035      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a8d      	ldr	r2, [pc, #564]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d72:	e035      	b.n	8002de0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68d9      	ldr	r1, [r3, #12]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4403      	add	r3, r0
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d98:	e022      	b.n	8002de0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6919      	ldr	r1, [r3, #16]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4403      	add	r3, r0
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d824      	bhi.n	8002e32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b05      	subs	r3, #5
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43da      	mvns	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b05      	subs	r3, #5
 8002e24:	fa00 f203 	lsl.w	r2, r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e30:	e04c      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b23      	subs	r3, #35	; 0x23
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b23      	subs	r3, #35	; 0x23
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
 8002e82:	e023      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b41      	subs	r3, #65	; 0x41
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b41      	subs	r3, #65	; 0x41
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10a      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1f4>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002eea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10f      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b12      	cmp	r3, #18
 8002efc:	d10b      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d12b      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x23a>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d122      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f32:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9a      	lsrs	r2, r3, #18
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f6a:	e002      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	10000012 	.word	0x10000012
 8002f94:	40012000 	.word	0x40012000
 8002f98:	40012300 	.word	0x40012300
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fac:	4b78      	ldr	r3, [pc, #480]	; (8003190 <ADC_Init+0x1ec>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a77      	ldr	r2, [pc, #476]	; (8003190 <ADC_Init+0x1ec>)
 8002fb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <ADC_Init+0x1ec>)
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4973      	ldr	r1, [pc, #460]	; (8003190 <ADC_Init+0x1ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	021a      	lsls	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ff8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6899      	ldr	r1, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	4a58      	ldr	r2, [pc, #352]	; (8003194 <ADC_Init+0x1f0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	e00f      	b.n	800309e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800309c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0202 	bic.w	r2, r2, #2
 80030ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	005a      	lsls	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	3b01      	subs	r3, #1
 80030f8:	035a      	lsls	r2, r3, #13
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e007      	b.n	8003114 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	3b01      	subs	r3, #1
 8003130:	051a      	lsls	r2, r3, #20
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003156:	025a      	lsls	r2, r3, #9
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	029a      	lsls	r2, r3, #10
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012300 	.word	0x40012300
 8003194:	0f000001 	.word	0x0f000001

08003198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <__NVIC_SetPriorityGrouping+0x40>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c6:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <__NVIC_SetPriorityGrouping+0x40>)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	60d3      	str	r3, [r2, #12]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00
 80031dc:	05fa0000 	.word	0x05fa0000

080031e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff4c 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800331a:	f7ff ff61 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 800331e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	6978      	ldr	r0, [r7, #20]
 8003326:	f7ff ffb1 	bl	800328c <NVIC_EncodePriority>
 800332a:	4602      	mov	r2, r0
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff80 	bl	8003238 <__NVIC_SetPriority>
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff54 	bl	80031fc <__NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e054      	b.n	8003418 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7f5b      	ldrb	r3, [r3, #29]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fb7a 	bl	8001a78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	791b      	ldrb	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_CRC_Init+0xc4>)
 8003398:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0218 	bic.w	r2, r2, #24
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	e00c      	b.n	80033c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	461a      	mov	r2, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f834 	bl	8003424 <HAL_CRCEx_Polynomial_Set>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e028      	b.n	8003418 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	795b      	ldrb	r3, [r3, #5]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	e004      	b.n	80033e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6912      	ldr	r2, [r2, #16]
 80033e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	04c11db7 	.word	0x04c11db7

08003424 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003434:	231f      	movs	r3, #31
 8003436:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003438:	bf00      	nop
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	613a      	str	r2, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <HAL_CRCEx_Polynomial_Set+0x34>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b18      	cmp	r3, #24
 800345c:	d846      	bhi.n	80034ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	080034f3 	.word	0x080034f3
 8003468:	080034ed 	.word	0x080034ed
 800346c:	080034ed 	.word	0x080034ed
 8003470:	080034ed 	.word	0x080034ed
 8003474:	080034ed 	.word	0x080034ed
 8003478:	080034ed 	.word	0x080034ed
 800347c:	080034ed 	.word	0x080034ed
 8003480:	080034ed 	.word	0x080034ed
 8003484:	080034e1 	.word	0x080034e1
 8003488:	080034ed 	.word	0x080034ed
 800348c:	080034ed 	.word	0x080034ed
 8003490:	080034ed 	.word	0x080034ed
 8003494:	080034ed 	.word	0x080034ed
 8003498:	080034ed 	.word	0x080034ed
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080034ed 	.word	0x080034ed
 80034a4:	080034d5 	.word	0x080034d5
 80034a8:	080034ed 	.word	0x080034ed
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	080034ed 	.word	0x080034ed
 80034b4:	080034ed 	.word	0x080034ed
 80034b8:	080034ed 	.word	0x080034ed
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	080034c9 	.word	0x080034c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d913      	bls.n	80034f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034d2:	e010      	b.n	80034f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d90f      	bls.n	80034fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034de:	e00c      	b.n	80034fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d90b      	bls.n	80034fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034ea:	e008      	b.n	80034fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	75fb      	strb	r3, [r7, #23]
      break;
 80034f0:	e006      	b.n	8003500 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f023 0118 	bic.w	r1, r3, #24
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e069      	b.n	8003616 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe fab2 	bl	8001ab8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_DCMI_Init+0xf0>)
 8003576:	400b      	ands	r3, r1
 8003578:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800358e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800359a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80035be:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d112      	bne.n	80035f6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7f1b      	ldrb	r3, [r3, #28]
 80035d4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f5b      	ldrb	r3, [r3, #29]
 80035da:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80035dc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7f9b      	ldrb	r3, [r3, #30]
 80035e2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7fdb      	ldrb	r3, [r3, #31]
 80035ec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80035f2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80035f4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 021e 	orr.w	r2, r2, #30
 8003604:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	ffe0f007 	.word	0xffe0f007

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DMA_Start_IT+0x26>
 8003646:	2302      	movs	r3, #2
 8003648:	e048      	b.n	80036dc <HAL_DMA_Start_IT+0xb8>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d137      	bne.n	80036ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f842 	bl	80036fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0216 	orr.w	r2, r2, #22
 8003692:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e005      	b.n	80036da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003718:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d108      	bne.n	800373c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800373a:	e007      	b.n	800374c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e039      	b.n	80037de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fa58 	bl	8001c34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	f023 0107 	bic.w	r1, r3, #7
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_DMA2D_Init+0x90>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d1      	ldr	r1, [r2, #12]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	ffffc000 	.word	0xffffc000

080037ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d026      	beq.n	800385c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003826:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2204      	movs	r2, #4
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d026      	beq.n	80038b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d021      	beq.n	80038b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2220      	movs	r2, #32
 8003886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	f043 0202 	orr.w	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d026      	beq.n	800390c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d021      	beq.n	800390c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d013      	beq.n	800393e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2204      	movs	r2, #4
 8003936:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f853 	bl	80039e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d024      	beq.n	8003992 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01f      	beq.n	8003992 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f80e 	bl	80039f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA2D_ConfigLayer+0x20>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e079      	b.n	8003b20 <HAL_DMA2D_ConfigLayer+0x114>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	3318      	adds	r3, #24
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a56:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_DMA2D_ConfigLayer+0x120>)
 8003a58:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b0a      	cmp	r3, #10
 8003a60:	d003      	beq.n	8003a6a <HAL_DMA2D_ConfigLayer+0x5e>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	d107      	bne.n	8003a7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e005      	b.n	8003a86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d120      	bne.n	8003ace <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	ea02 0103 	and.w	r1, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d003      	beq.n	8003abe <HAL_DMA2D_ConfigLayer+0xb2>
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d127      	bne.n	8003b0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
 8003acc:	e01f      	b.n	8003b0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	ea02 0103 	and.w	r1, r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b0a      	cmp	r3, #10
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA2D_ConfigLayer+0xf4>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d106      	bne.n	8003b0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b0c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	ff03000f 	.word	0xff03000f

08003b30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06a      	b.n	8003c18 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2223      	movs	r2, #35	; 0x23
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fe f893 	bl	8001c80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_ETH_Init+0xf0>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <HAL_ETH_Init+0xf0>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	; 0x44
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_ETH_Init+0xf0>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b72:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_ETH_Init+0xf4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_ETH_Init+0xf4>)
 8003b78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_ETH_Init+0xf4>)
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4927      	ldr	r1, [pc, #156]	; (8003c24 <HAL_ETH_Init+0xf4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_ETH_Init+0xf4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7ff f832 	bl	8002c10 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bae:	e011      	b.n	8003bd4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003bb0:	f7ff f82e 	bl	8002c10 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bbe:	d909      	bls.n	8003bd4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22e0      	movs	r2, #224	; 0xe0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e021      	b.n	8003c18 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e4      	bne.n	8003bb0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f958 	bl	8003e9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9ff 	bl	8003ff0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa55 	bl	80040a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9bd 	bl	8003f80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40013800 	.word	0x40013800

08003c28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <ETH_SetMACConfig+0x15c>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	7c1b      	ldrb	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <ETH_SetMACConfig+0x28>
 8003c4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c4e:	e000      	b.n	8003c52 <ETH_SetMACConfig+0x2a>
 8003c50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7c5b      	ldrb	r3, [r3, #17]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <ETH_SetMACConfig+0x38>
 8003c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c5e:	e000      	b.n	8003c62 <ETH_SetMACConfig+0x3a>
 8003c60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	7fdb      	ldrb	r3, [r3, #31]
 8003c6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	7f92      	ldrb	r2, [r2, #30]
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	d102      	bne.n	8003c86 <ETH_SetMACConfig+0x5e>
 8003c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c84:	e000      	b.n	8003c88 <ETH_SetMACConfig+0x60>
 8003c86:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7f1b      	ldrb	r3, [r3, #28]
 8003c8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	791b      	ldrb	r3, [r3, #4]
 8003c9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d102      	bne.n	8003cb0 <ETH_SetMACConfig+0x88>
 8003caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cae:	e000      	b.n	8003cb2 <ETH_SetMACConfig+0x8a>
 8003cb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	7bdb      	ldrb	r3, [r3, #15]
 8003cb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fe ffa0 	bl	8002c28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d101      	bne.n	8003d16 <ETH_SetMACConfig+0xee>
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	e000      	b.n	8003d18 <ETH_SetMACConfig+0xf0>
 8003d16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d26:	2a01      	cmp	r2, #1
 8003d28:	d101      	bne.n	8003d2e <ETH_SetMACConfig+0x106>
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	e000      	b.n	8003d30 <ETH_SetMACConfig+0x108>
 8003d2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d38:	2a01      	cmp	r2, #1
 8003d3a:	d101      	bne.n	8003d40 <ETH_SetMACConfig+0x118>
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	e000      	b.n	8003d42 <ETH_SetMACConfig+0x11a>
 8003d40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d4a:	2a01      	cmp	r2, #1
 8003d4c:	d101      	bne.n	8003d52 <ETH_SetMACConfig+0x12a>
 8003d4e:	2202      	movs	r2, #2
 8003d50:	e000      	b.n	8003d54 <ETH_SetMACConfig+0x12c>
 8003d52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fe ff5b 	bl	8002c28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	ff20810f 	.word	0xff20810f

08003d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <ETH_SetDMAConfig+0x110>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7b1b      	ldrb	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <ETH_SetDMAConfig+0x2c>
 8003dae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003db2:	e000      	b.n	8003db6 <ETH_SetDMAConfig+0x2e>
 8003db4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	7b5b      	ldrb	r3, [r3, #13]
 8003dba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	7f52      	ldrb	r2, [r2, #29]
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d102      	bne.n	8003dcc <ETH_SetDMAConfig+0x44>
 8003dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dca:	e000      	b.n	8003dce <ETH_SetDMAConfig+0x46>
 8003dcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b9b      	ldrb	r3, [r3, #14]
 8003dd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ddc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	7f1b      	ldrb	r3, [r3, #28]
 8003de2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003de4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	7f9b      	ldrb	r3, [r3, #30]
 8003dea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003df2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7fe ff02 	bl	8002c28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	791b      	ldrb	r3, [r3, #4]
 8003e36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7fe fed3 	bl	8002c28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	f8de3f23 	.word	0xf8de3f23

08003e9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b0a6      	sub	sp, #152	; 0x98
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe86 	bl	8003c28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f6c:	f107 0308 	add.w	r3, r7, #8
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff08 	bl	8003d88 <ETH_SetDMAConfig>
}
 8003f78:	bf00      	nop
 8003f7a:	3798      	adds	r7, #152	; 0x98
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3305      	adds	r3, #5
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	3204      	adds	r2, #4
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <ETH_MACAddressConfig+0x68>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3303      	adds	r3, #3
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	061a      	lsls	r2, r3, #24
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <ETH_MACAddressConfig+0x6c>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	6013      	str	r3, [r2, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40028040 	.word	0x40028040
 8003fec:	40028044 	.word	0x40028044

08003ff0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e03e      	b.n	800407c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	3206      	adds	r2, #6
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d80c      	bhi.n	8004060 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e004      	b.n	800406a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d9bd      	bls.n	8003ffe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004094:	611a      	str	r2, [r3, #16]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e046      	b.n	800413e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6919      	ldr	r1, [r3, #16]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2200      	movs	r2, #0
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80040f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	3212      	adds	r2, #18
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d80c      	bhi.n	800412e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e004      	b.n	8004138 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d9b5      	bls.n	80040b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	60da      	str	r2, [r3, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e175      	b.n	8004488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800419c:	2201      	movs	r2, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	f040 8164 	bne.w	8004482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d005      	beq.n	80041d2 <HAL_GPIO_Init+0x56>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d130      	bne.n	8004234 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 0201 	and.w	r2, r3, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b03      	cmp	r3, #3
 800423e:	d017      	beq.n	8004270 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d123      	bne.n	80042c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	08da      	lsrs	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3208      	adds	r2, #8
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	220f      	movs	r2, #15
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	08da      	lsrs	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3208      	adds	r2, #8
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0203 	and.w	r2, r3, #3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80be 	beq.w	8004482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_GPIO_Init+0x324>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a65      	ldr	r2, [pc, #404]	; (80044a0 <HAL_GPIO_Init+0x324>)
 800430c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <HAL_GPIO_Init+0x324>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800431e:	4a61      	ldr	r2, [pc, #388]	; (80044a4 <HAL_GPIO_Init+0x328>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <HAL_GPIO_Init+0x32c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d037      	beq.n	80043ba <HAL_GPIO_Init+0x23e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a57      	ldr	r2, [pc, #348]	; (80044ac <HAL_GPIO_Init+0x330>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_GPIO_Init+0x23a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <HAL_GPIO_Init+0x334>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x236>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_GPIO_Init+0x338>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x232>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a54      	ldr	r2, [pc, #336]	; (80044b8 <HAL_GPIO_Init+0x33c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x22e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a53      	ldr	r2, [pc, #332]	; (80044bc <HAL_GPIO_Init+0x340>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x22a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <HAL_GPIO_Init+0x344>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x226>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a51      	ldr	r2, [pc, #324]	; (80044c4 <HAL_GPIO_Init+0x348>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x222>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a50      	ldr	r2, [pc, #320]	; (80044c8 <HAL_GPIO_Init+0x34c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x21e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4f      	ldr	r2, [pc, #316]	; (80044cc <HAL_GPIO_Init+0x350>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x21a>
 8004392:	2309      	movs	r3, #9
 8004394:	e012      	b.n	80043bc <HAL_GPIO_Init+0x240>
 8004396:	230a      	movs	r3, #10
 8004398:	e010      	b.n	80043bc <HAL_GPIO_Init+0x240>
 800439a:	2308      	movs	r3, #8
 800439c:	e00e      	b.n	80043bc <HAL_GPIO_Init+0x240>
 800439e:	2307      	movs	r3, #7
 80043a0:	e00c      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e00a      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e008      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e004      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e002      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_GPIO_Init+0x240>
 80043ba:	2300      	movs	r3, #0
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f002 0203 	and.w	r2, r2, #3
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	4093      	lsls	r3, r2
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043cc:	4935      	ldr	r1, [pc, #212]	; (80044a4 <HAL_GPIO_Init+0x328>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	3302      	adds	r3, #2
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_GPIO_Init+0x354>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004428:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_GPIO_Init+0x354>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800447c:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <HAL_GPIO_Init+0x354>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b0f      	cmp	r3, #15
 800448c:	f67f ae86 	bls.w	800419c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3724      	adds	r7, #36	; 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40013800 	.word	0x40013800
 80044a8:	40020000 	.word	0x40020000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40020800 	.word	0x40020800
 80044b4:	40020c00 	.word	0x40020c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40021400 	.word	0x40021400
 80044c0:	40021800 	.word	0x40021800
 80044c4:	40021c00 	.word	0x40021c00
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40022400 	.word	0x40022400
 80044d0:	40013c00 	.word	0x40013c00

080044d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e001      	b.n	80044f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4013      	ands	r3, r2
 800454e:	041a      	lsls	r2, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43d9      	mvns	r1, r3
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	400b      	ands	r3, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	619a      	str	r2, [r3, #24]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f007 fd49 	bl	800c018 <USB_GetMode>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 80f6 	bne.w	800477a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f007 fd0c 	bl	800bfb0 <USB_ReadInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80ec 	beq.w	8004778 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f007 fd03 	bl	800bfb0 <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b4:	d104      	bne.n	80045c0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f007 fcf3 	bl	800bfb0 <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d4:	d104      	bne.n	80045e0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f007 fce3 	bl	800bfb0 <USB_ReadInterrupts>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f4:	d104      	bne.n	8004600 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f007 fcd3 	bl	800bfb0 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d103      	bne.n	800461c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2202      	movs	r2, #2
 800461a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f007 fcc5 	bl	800bfb0 <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004630:	d11c      	bne.n	800466c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800463a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800464c:	2110      	movs	r1, #16
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f007 fbf2 	bl	800be38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004654:	6938      	ldr	r0, [r7, #16]
 8004656:	f007 fc23 	bl	800bea0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f007 fce7 	bl	800c034 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f00a f86e 	bl	800e748 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f007 fc9d 	bl	800bfb0 <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004680:	d102      	bne.n	8004688 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 f959 	bl	800593a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f007 fc8f 	bl	800bfb0 <USB_ReadInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d106      	bne.n	80046aa <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f00a f837 	bl	800e710 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2208      	movs	r2, #8
 80046a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f007 fc7e 	bl	800bfb0 <USB_ReadInterrupts>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d101      	bne.n	80046c2 <HAL_HCD_IRQHandler+0x158>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_HCD_IRQHandler+0x15a>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0210 	bic.w	r2, r2, #16
 80046d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 f85c 	bl	8005796 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0210 	orr.w	r2, r2, #16
 80046ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f007 fc5c 	bl	800bfb0 <USB_ReadInterrupts>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004702:	d13a      	bne.n	800477a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f007 fccd 	bl	800c0a8 <USB_HC_ReadInterrupt>
 800470e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e025      	b.n	8004762 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d106      	bne.n	8004750 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f836 	bl	80047ba <HCD_HC_IN_IRQHandler>
 800474e:	e005      	b.n	800475c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fc51 	bl	8004ffe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	d3d4      	bcc.n	8004716 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004774:	615a      	str	r2, [r3, #20]
 8004776:	e000      	b.n	800477a <HAL_HCD_IRQHandler+0x210>
      return;
 8004778:	bf00      	nop
    }
  }
}
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_HCD_Stop+0x16>
 8004792:	2302      	movs	r3, #2
 8004794:	e00d      	b.n	80047b2 <HAL_HCD_Stop+0x32>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f007 fd8d 	bl	800c2c2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f007 fbf9 	bl	800bfd6 <USB_ReadChInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d11a      	bne.n	8004824 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	461a      	mov	r2, r3
 80047fc:	2304      	movs	r3, #4
 80047fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3361      	adds	r3, #97	; 0x61
 800480e:	2207      	movs	r2, #7
 8004810:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f007 fc54 	bl	800c0ca <USB_HC_Halt>
 8004822:	e0a2      	b.n	800496a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f007 fbd1 	bl	800bfd6 <USB_ReadChInterrupts>
 8004834:	4603      	mov	r3, r0
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d11b      	bne.n	8004878 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	461a      	mov	r2, r3
 800484e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004852:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3361      	adds	r3, #97	; 0x61
 8004862:	2208      	movs	r2, #8
 8004864:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f007 fc2a 	bl	800c0ca <USB_HC_Halt>
 8004876:	e078      	b.n	800496a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f007 fba7 	bl	800bfd6 <USB_ReadChInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d11a      	bne.n	80048c8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	2308      	movs	r3, #8
 80048a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3361      	adds	r3, #97	; 0x61
 80048b2:	2206      	movs	r2, #6
 80048b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f007 fc02 	bl	800c0ca <USB_HC_Halt>
 80048c6:	e050      	b.n	800496a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f007 fb7f 	bl	800bfd6 <USB_ReadChInterrupts>
 80048d8:	4603      	mov	r3, r0
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d11b      	bne.n	800491c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	3361      	adds	r3, #97	; 0x61
 8004906:	2209      	movs	r2, #9
 8004908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f007 fbd8 	bl	800c0ca <USB_HC_Halt>
 800491a:	e026      	b.n	800496a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f007 fb55 	bl	800bfd6 <USB_ReadChInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d119      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	461a      	mov	r2, r3
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3361      	adds	r3, #97	; 0x61
 8004956:	2207      	movs	r2, #7
 8004958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f007 fbb0 	bl	800c0ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f007 fb2e 	bl	800bfd6 <USB_ReadChInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004984:	d112      	bne.n	80049ac <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f007 fb9a 	bl	800c0ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a8:	6093      	str	r3, [r2, #8]
 80049aa:	e325      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f007 fb0d 	bl	800bfd6 <USB_ReadChInterrupts>
 80049bc:	4603      	mov	r3, r0
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 80e8 	bne.w	8004b98 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	461a      	mov	r2, r3
 80049d6:	2320      	movs	r3, #32
 80049d8:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d019      	beq.n	8004a16 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3348      	adds	r3, #72	; 0x48
 80049f0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0159      	lsls	r1, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	440b      	add	r3, r1
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	202c      	movs	r0, #44	; 0x2c
 8004a0c:	fb00 f303 	mul.w	r3, r0, r3
 8004a10:	440b      	add	r3, r1
 8004a12:	3350      	adds	r3, #80	; 0x50
 8004a14:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3361      	adds	r3, #97	; 0x61
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	335c      	adds	r3, #92	; 0x5c
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	2301      	movs	r3, #1
 8004a4a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	333f      	adds	r3, #63	; 0x3f
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	333f      	adds	r3, #63	; 0x3f
 8004a6e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d111      	bne.n	8004a98 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f007 fb23 	bl	800c0ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	2310      	movs	r3, #16
 8004a94:	6093      	str	r3, [r2, #8]
 8004a96:	e03a      	b.n	8004b0e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	333f      	adds	r3, #63	; 0x3f
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d009      	beq.n	8004ac0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	333f      	adds	r3, #63	; 0x3f
 8004aba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d126      	bne.n	8004b0e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ade:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3360      	adds	r3, #96	; 0x60
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b2d9      	uxtb	r1, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	202c      	movs	r0, #44	; 0x2c
 8004afc:	fb00 f303 	mul.w	r3, r0, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3360      	adds	r3, #96	; 0x60
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f009 fe2b 	bl	800e764 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d12b      	bne.n	8004b6e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	3348      	adds	r3, #72	; 0x48
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	202c      	movs	r0, #44	; 0x2c
 8004b2c:	fb00 f202 	mul.w	r2, r0, r2
 8004b30:	440a      	add	r2, r1
 8004b32:	3240      	adds	r2, #64	; 0x40
 8004b34:	8812      	ldrh	r2, [r2, #0]
 8004b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 825a 	beq.w	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3354      	adds	r3, #84	; 0x54
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f083 0301 	eor.w	r3, r3, #1
 8004b58:	b2d8      	uxtb	r0, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3354      	adds	r3, #84	; 0x54
 8004b68:	4602      	mov	r2, r0
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e244      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3354      	adds	r3, #84	; 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f083 0301 	eor.w	r3, r3, #1
 8004b82:	b2d8      	uxtb	r0, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3354      	adds	r3, #84	; 0x54
 8004b92:	4602      	mov	r2, r0
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e22f      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f007 fa17 	bl	800bfd6 <USB_ReadChInterrupts>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d109      	bne.n	8004bc6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	e218      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f007 fa00 	bl	800bfd6 <USB_ReadChInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f040 816b 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	212c      	movs	r1, #44	; 0x2c
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3361      	adds	r3, #97	; 0x61
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d112      	bne.n	8004c2e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	212c      	movs	r1, #44	; 0x2c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	3361      	adds	r3, #97	; 0x61
 8004c16:	2202      	movs	r2, #2
 8004c18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e135      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d112      	bne.n	8004c68 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3361      	adds	r3, #97	; 0x61
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3360      	adds	r3, #96	; 0x60
 8004c62:	2205      	movs	r2, #5
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e118      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	212c      	movs	r1, #44	; 0x2c
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3361      	adds	r3, #97	; 0x61
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b07      	cmp	r3, #7
 8004c7a:	d009      	beq.n	8004c90 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d159      	bne.n	8004d44 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3361      	adds	r3, #97	; 0x61
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	335c      	adds	r3, #92	; 0x5c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	202c      	movs	r0, #44	; 0x2c
 8004cba:	fb00 f303 	mul.w	r3, r0, r3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	335c      	adds	r3, #92	; 0x5c
 8004cc2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	212c      	movs	r1, #44	; 0x2c
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	335c      	adds	r3, #92	; 0x5c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d912      	bls.n	8004cfe <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	335c      	adds	r3, #92	; 0x5c
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	212c      	movs	r1, #44	; 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3360      	adds	r3, #96	; 0x60
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cfc:	e0cd      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3360      	adds	r3, #96	; 0x60
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d26:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d42:	e0aa      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	3361      	adds	r3, #97	; 0x61
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d109      	bne.n	8004d6c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	3361      	adds	r3, #97	; 0x61
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e096      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	3361      	adds	r3, #97	; 0x61
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d109      	bne.n	8004d94 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3361      	adds	r3, #97	; 0x61
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e082      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3361      	adds	r3, #97	; 0x61
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d13f      	bne.n	8004e28 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3361      	adds	r3, #97	; 0x61
 8004db6:	2202      	movs	r2, #2
 8004db8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3360      	adds	r3, #96	; 0x60
 8004dc8:	2202      	movs	r2, #2
 8004dca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	333f      	adds	r3, #63	; 0x3f
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	333f      	adds	r3, #63	; 0x3f
 8004dee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d152      	bne.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e12:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e038      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3361      	adds	r3, #97	; 0x61
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d123      	bne.n	8004e84 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	212c      	movs	r1, #44	; 0x2c
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	3361      	adds	r3, #97	; 0x61
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	335c      	adds	r3, #92	; 0x5c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	202c      	movs	r0, #44	; 0x2c
 8004e66:	fb00 f303 	mul.w	r3, r0, r3
 8004e6a:	440b      	add	r3, r1
 8004e6c:	335c      	adds	r3, #92	; 0x5c
 8004e6e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3360      	adds	r3, #96	; 0x60
 8004e7e:	2204      	movs	r2, #4
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e00a      	b.n	8004e9a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	3361      	adds	r3, #97	; 0x61
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	f000 80ae 	beq.w	8004ff6 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	b2d9      	uxtb	r1, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	202c      	movs	r0, #44	; 0x2c
 8004ea4:	fb00 f303 	mul.w	r3, r0, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3360      	adds	r3, #96	; 0x60
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f009 fc57 	bl	800e764 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004eb6:	e09f      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f007 f887 	bl	800bfd6 <USB_ReadChInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d123      	bne.n	8004f1a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3361      	adds	r3, #97	; 0x61
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	212c      	movs	r1, #44	; 0x2c
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	335c      	adds	r3, #92	; 0x5c
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f007 f8d9 	bl	800c0ca <USB_HC_Halt>
 8004f18:	e06e      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f007 f856 	bl	800bfd6 <USB_ReadChInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d161      	bne.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	333f      	adds	r3, #63	; 0x3f
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d11a      	bne.n	8004f7e <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	335c      	adds	r3, #92	; 0x5c
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3361      	adds	r3, #97	; 0x61
 8004f68:	2204      	movs	r2, #4
 8004f6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f007 f8a7 	bl	800c0ca <USB_HC_Halt>
 8004f7c:	e031      	b.n	8004fe2 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	212c      	movs	r1, #44	; 0x2c
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	333f      	adds	r3, #63	; 0x3f
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	333f      	adds	r3, #63	; 0x3f
 8004fa0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d11d      	bne.n	8004fe2 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	335c      	adds	r3, #92	; 0x5c
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d110      	bne.n	8004fe2 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	3361      	adds	r3, #97	; 0x61
 8004fce:	2204      	movs	r2, #4
 8004fd0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f007 f874 	bl	800c0ca <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	6093      	str	r3, [r2, #8]
 8004ff4:	e000      	b.n	8004ff8 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8004ff6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b088      	sub	sp, #32
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f006 ffd7 	bl	800bfd6 <USB_ReadChInterrupts>
 8005028:	4603      	mov	r3, r0
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d11a      	bne.n	8005068 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	461a      	mov	r2, r3
 8005040:	2304      	movs	r3, #4
 8005042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	212c      	movs	r1, #44	; 0x2c
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	3361      	adds	r3, #97	; 0x61
 8005052:	2207      	movs	r2, #7
 8005054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f007 f832 	bl	800c0ca <USB_HC_Halt>
 8005066:	e393      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f006 ffaf 	bl	800bfd6 <USB_ReadChInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d137      	bne.n	80050f2 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	461a      	mov	r2, r3
 8005090:	2320      	movs	r3, #32
 8005092:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	212c      	movs	r1, #44	; 0x2c
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	333d      	adds	r3, #61	; 0x3d
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 8373 	bne.w	8005790 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	212c      	movs	r1, #44	; 0x2c
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	4413      	add	r3, r2
 80050b6:	333d      	adds	r3, #61	; 0x3d
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	3360      	adds	r3, #96	; 0x60
 80050ca:	2202      	movs	r2, #2
 80050cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	3361      	adds	r3, #97	; 0x61
 80050dc:	2203      	movs	r2, #3
 80050de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f006 ffed 	bl	800c0ca <USB_HC_Halt>
 80050f0:	e34e      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	4611      	mov	r1, r2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f006 ff6a 	bl	800bfd6 <USB_ReadChInterrupts>
 8005102:	4603      	mov	r3, r0
 8005104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510c:	d112      	bne.n	8005134 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	461a      	mov	r2, r3
 800511c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005120:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f006 ffcc 	bl	800c0ca <USB_HC_Halt>
 8005132:	e32d      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f006 ff49 	bl	800bfd6 <USB_ReadChInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d142      	bne.n	80051d4 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	212c      	movs	r1, #44	; 0x2c
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	4413      	add	r3, r2
 800515a:	335c      	adds	r3, #92	; 0x5c
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f006 ff33 	bl	800bfd6 <USB_ReadChInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d111      	bne.n	800519e <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	333d      	adds	r3, #61	; 0x3d
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	461a      	mov	r2, r3
 800519a:	2340      	movs	r3, #64	; 0x40
 800519c:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	2301      	movs	r3, #1
 80051ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3361      	adds	r3, #97	; 0x61
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f006 ff7c 	bl	800c0ca <USB_HC_Halt>
 80051d2:	e2dd      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f006 fef9 	bl	800bfd6 <USB_ReadChInterrupts>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d12c      	bne.n	8005248 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	3361      	adds	r3, #97	; 0x61
 80051fc:	2205      	movs	r2, #5
 80051fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	333d      	adds	r3, #61	; 0x3d
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	335c      	adds	r3, #92	; 0x5c
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f006 ff4b 	bl	800c0ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	461a      	mov	r2, r3
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	6093      	str	r3, [r2, #8]
 8005246:	e2a3      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f006 febf 	bl	800bfd6 <USB_ReadChInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b08      	cmp	r3, #8
 8005260:	d11a      	bne.n	8005298 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	2308      	movs	r3, #8
 8005272:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	212c      	movs	r1, #44	; 0x2c
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	4413      	add	r3, r2
 8005280:	3361      	adds	r3, #97	; 0x61
 8005282:	2206      	movs	r2, #6
 8005284:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f006 ff1a 	bl	800c0ca <USB_HC_Halt>
 8005296:	e27b      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f006 fe97 	bl	800bfd6 <USB_ReadChInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d140      	bne.n	8005334 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	335c      	adds	r3, #92	; 0x5c
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	212c      	movs	r1, #44	; 0x2c
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3361      	adds	r3, #97	; 0x61
 80052d2:	2204      	movs	r2, #4
 80052d4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	333d      	adds	r3, #61	; 0x3d
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d112      	bne.n	8005310 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	212c      	movs	r1, #44	; 0x2c
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	333c      	adds	r3, #60	; 0x3c
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d108      	bne.n	8005310 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	212c      	movs	r1, #44	; 0x2c
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	333d      	adds	r3, #61	; 0x3d
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f006 fed5 	bl	800c0ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	461a      	mov	r2, r3
 800532e:	2310      	movs	r3, #16
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	e22d      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f006 fe49 	bl	800bfd6 <USB_ReadChInterrupts>
 8005344:	4603      	mov	r3, r0
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d164      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d111      	bne.n	800537a <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	212c      	movs	r1, #44	; 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3361      	adds	r3, #97	; 0x61
 8005364:	2207      	movs	r2, #7
 8005366:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f006 fea9 	bl	800c0ca <USB_HC_Halt>
 8005378:	e044      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	212c      	movs	r1, #44	; 0x2c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	335c      	adds	r3, #92	; 0x5c
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	202c      	movs	r0, #44	; 0x2c
 8005392:	fb00 f303 	mul.w	r3, r0, r3
 8005396:	440b      	add	r3, r1
 8005398:	335c      	adds	r3, #92	; 0x5c
 800539a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	212c      	movs	r1, #44	; 0x2c
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	335c      	adds	r3, #92	; 0x5c
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d920      	bls.n	80053f2 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	335c      	adds	r3, #92	; 0x5c
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	212c      	movs	r1, #44	; 0x2c
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	3360      	adds	r3, #96	; 0x60
 80053d0:	2204      	movs	r2, #4
 80053d2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	b2d9      	uxtb	r1, r3
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	202c      	movs	r0, #44	; 0x2c
 80053de:	fb00 f303 	mul.w	r3, r0, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3360      	adds	r3, #96	; 0x60
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f009 f9ba 	bl	800e764 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053f0:	e008      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	212c      	movs	r1, #44	; 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3360      	adds	r3, #96	; 0x60
 8005400:	2202      	movs	r2, #2
 8005402:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	461a      	mov	r2, r3
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	6093      	str	r3, [r2, #8]
 8005416:	e1bb      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	4611      	mov	r1, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f006 fdd7 	bl	800bfd6 <USB_ReadChInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d11b      	bne.n	800546c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	212c      	movs	r1, #44	; 0x2c
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	3361      	adds	r3, #97	; 0x61
 8005442:	2209      	movs	r2, #9
 8005444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	4611      	mov	r1, r2
 8005450:	4618      	mov	r0, r3
 8005452:	f006 fe3a 	bl	800c0ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	461a      	mov	r2, r3
 8005464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005468:	6093      	str	r3, [r2, #8]
 800546a:	e191      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f006 fdad 	bl	800bfd6 <USB_ReadChInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 8184 	bne.w	8005790 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	461a      	mov	r2, r3
 8005496:	2302      	movs	r3, #2
 8005498:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	212c      	movs	r1, #44	; 0x2c
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	3361      	adds	r3, #97	; 0x61
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	f040 8087 	bne.w	80055be <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3361      	adds	r3, #97	; 0x61
 80054be:	2202      	movs	r2, #2
 80054c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	212c      	movs	r1, #44	; 0x2c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	212c      	movs	r1, #44	; 0x2c
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	333f      	adds	r3, #63	; 0x3f
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d00a      	beq.n	80054fe <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	212c      	movs	r1, #44	; 0x2c
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	333f      	adds	r3, #63	; 0x3f
 80054f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	f040 8139 	bne.w	8005770 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	3355      	adds	r3, #85	; 0x55
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2d8      	uxtb	r0, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	3355      	adds	r3, #85	; 0x55
 800552a:	4602      	mov	r2, r0
 800552c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 811c 	bne.w	8005770 <HCD_HC_OUT_IRQHandler+0x772>
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	212c      	movs	r1, #44	; 0x2c
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	334c      	adds	r3, #76	; 0x4c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8111 	beq.w	8005770 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	212c      	movs	r1, #44	; 0x2c
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	4413      	add	r3, r2
 800555a:	334c      	adds	r3, #76	; 0x4c
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	202c      	movs	r0, #44	; 0x2c
 8005564:	fb00 f202 	mul.w	r2, r0, r2
 8005568:	440a      	add	r2, r1
 800556a:	3240      	adds	r2, #64	; 0x40
 800556c:	8812      	ldrh	r2, [r2, #0]
 800556e:	4413      	add	r3, r2
 8005570:	3b01      	subs	r3, #1
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	202c      	movs	r0, #44	; 0x2c
 8005578:	fb00 f202 	mul.w	r2, r0, r2
 800557c:	440a      	add	r2, r1
 800557e:	3240      	adds	r2, #64	; 0x40
 8005580:	8812      	ldrh	r2, [r2, #0]
 8005582:	fbb3 f3f2 	udiv	r3, r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80ee 	beq.w	8005770 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	3355      	adds	r3, #85	; 0x55
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f083 0301 	eor.w	r3, r3, #1
 80055a8:	b2d8      	uxtb	r0, r3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	212c      	movs	r1, #44	; 0x2c
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	3355      	adds	r3, #85	; 0x55
 80055b8:	4602      	mov	r2, r0
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e0d8      	b.n	8005770 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3361      	adds	r3, #97	; 0x61
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d109      	bne.n	80055e6 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	3361      	adds	r3, #97	; 0x61
 80055e0:	2202      	movs	r2, #2
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e0c4      	b.n	8005770 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	212c      	movs	r1, #44	; 0x2c
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	4413      	add	r3, r2
 80055f2:	3361      	adds	r3, #97	; 0x61
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d112      	bne.n	8005620 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	212c      	movs	r1, #44	; 0x2c
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	3361      	adds	r3, #97	; 0x61
 8005608:	2202      	movs	r2, #2
 800560a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3360      	adds	r3, #96	; 0x60
 800561a:	2202      	movs	r2, #2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e0a7      	b.n	8005770 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	212c      	movs	r1, #44	; 0x2c
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	3361      	adds	r3, #97	; 0x61
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b05      	cmp	r3, #5
 8005632:	d112      	bne.n	800565a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	212c      	movs	r1, #44	; 0x2c
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	3361      	adds	r3, #97	; 0x61
 8005642:	2202      	movs	r2, #2
 8005644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	212c      	movs	r1, #44	; 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	3360      	adds	r3, #96	; 0x60
 8005654:	2202      	movs	r2, #2
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e08a      	b.n	8005770 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	212c      	movs	r1, #44	; 0x2c
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	3361      	adds	r3, #97	; 0x61
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b06      	cmp	r3, #6
 800566c:	d112      	bne.n	8005694 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	3361      	adds	r3, #97	; 0x61
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	212c      	movs	r1, #44	; 0x2c
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	3360      	adds	r3, #96	; 0x60
 800568e:	2205      	movs	r2, #5
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e06d      	b.n	8005770 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	212c      	movs	r1, #44	; 0x2c
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	3361      	adds	r3, #97	; 0x61
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	d009      	beq.n	80056bc <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	212c      	movs	r1, #44	; 0x2c
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	3361      	adds	r3, #97	; 0x61
 80056b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d168      	bne.n	800578e <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	212c      	movs	r1, #44	; 0x2c
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	3361      	adds	r3, #97	; 0x61
 80056ca:	2202      	movs	r2, #2
 80056cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	335c      	adds	r3, #92	; 0x5c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	202c      	movs	r0, #44	; 0x2c
 80056e6:	fb00 f303 	mul.w	r3, r0, r3
 80056ea:	440b      	add	r3, r1
 80056ec:	335c      	adds	r3, #92	; 0x5c
 80056ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	335c      	adds	r3, #92	; 0x5c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d912      	bls.n	800572a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	212c      	movs	r1, #44	; 0x2c
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	335c      	adds	r3, #92	; 0x5c
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	212c      	movs	r1, #44	; 0x2c
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	3360      	adds	r3, #96	; 0x60
 8005724:	2204      	movs	r2, #4
 8005726:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005728:	e021      	b.n	800576e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	212c      	movs	r1, #44	; 0x2c
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	4413      	add	r3, r2
 8005736:	3360      	adds	r3, #96	; 0x60
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005752:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800575a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005768:	461a      	mov	r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800576e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	b2d9      	uxtb	r1, r3
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	202c      	movs	r0, #44	; 0x2c
 800577a:	fb00 f303 	mul.w	r3, r0, r3
 800577e:	4413      	add	r3, r2
 8005780:	3360      	adds	r3, #96	; 0x60
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f008 ffec 	bl	800e764 <HAL_HCD_HC_NotifyURBChange_Callback>
 800578c:	e000      	b.n	8005790 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 800578e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08a      	sub	sp, #40	; 0x28
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	0c5b      	lsrs	r3, r3, #17
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d004      	beq.n	80057dc <HCD_RXQLVL_IRQHandler+0x46>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	f000 80a9 	beq.w	800592c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057da:	e0aa      	b.n	8005932 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a6 	beq.w	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3344      	adds	r3, #68	; 0x44
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 809b 	beq.w	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	212c      	movs	r1, #44	; 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	3350      	adds	r3, #80	; 0x50
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	441a      	add	r2, r3
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	202c      	movs	r0, #44	; 0x2c
 8005814:	fb00 f303 	mul.w	r3, r0, r3
 8005818:	440b      	add	r3, r1
 800581a:	334c      	adds	r3, #76	; 0x4c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d87a      	bhi.n	8005918 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3344      	adds	r3, #68	; 0x44
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	b292      	uxth	r2, r2
 800583a:	4619      	mov	r1, r3
 800583c:	f006 fb60 	bl	800bf00 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	212c      	movs	r1, #44	; 0x2c
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	3344      	adds	r3, #68	; 0x44
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	441a      	add	r2, r3
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	202c      	movs	r0, #44	; 0x2c
 800585a:	fb00 f303 	mul.w	r3, r0, r3
 800585e:	440b      	add	r3, r1
 8005860:	3344      	adds	r3, #68	; 0x44
 8005862:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3350      	adds	r3, #80	; 0x50
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	441a      	add	r2, r3
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	202c      	movs	r0, #44	; 0x2c
 800587e:	fb00 f303 	mul.w	r3, r0, r3
 8005882:	440b      	add	r3, r1
 8005884:	3350      	adds	r3, #80	; 0x50
 8005886:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	0cdb      	lsrs	r3, r3, #19
 8005898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	3340      	adds	r3, #64	; 0x40
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d13c      	bne.n	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d039      	beq.n	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	212c      	movs	r1, #44	; 0x2c
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	3354      	adds	r3, #84	; 0x54
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2d8      	uxtb	r0, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	3354      	adds	r3, #84	; 0x54
 8005912:	4602      	mov	r2, r0
 8005914:	701a      	strb	r2, [r3, #0]
      break;
 8005916:	e00b      	b.n	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	3360      	adds	r3, #96	; 0x60
 8005926:	2204      	movs	r2, #4
 8005928:	701a      	strb	r2, [r3, #0]
      break;
 800592a:	e001      	b.n	8005930 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005930:	bf00      	nop
  }
}
 8005932:	bf00      	nop
 8005934:	3728      	adds	r7, #40	; 0x28
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005966:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d10b      	bne.n	800598a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f008 fed5 	bl	800e72c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f043 0302 	orr.w	r3, r3, #2
 8005988:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b08      	cmp	r3, #8
 8005992:	d132      	bne.n	80059fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f043 0308 	orr.w	r3, r3, #8
 800599a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d126      	bne.n	80059f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d113      	bne.n	80059d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80059b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059b8:	d106      	bne.n	80059c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f006 fb37 	bl	800c034 <USB_InitFSLSPClkSel>
 80059c6:	e011      	b.n	80059ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2101      	movs	r1, #1
 80059ce:	4618      	mov	r0, r3
 80059d0:	f006 fb30 	bl	800c034 <USB_InitFSLSPClkSel>
 80059d4:	e00a      	b.n	80059ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d106      	bne.n	80059ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e4:	461a      	mov	r2, r3
 80059e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80059ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f008 fecb 	bl	800e788 <HAL_HCD_PortEnabled_Callback>
 80059f2:	e002      	b.n	80059fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f008 fed5 	bl	800e7a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d103      	bne.n	8005a0c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f043 0320 	orr.w	r3, r3, #32
 8005a0a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e07f      	b.n	8005b32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc f9b2 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	; 0x24
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	e006      	b.n	8005aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d104      	bne.n	8005aba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <HAL_I2C_Init+0x11c>)
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69d9      	ldr	r1, [r3, #28]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	02008000 	.word	0x02008000

08005b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d138      	bne.n	8005bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e032      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d139      	bne.n	8005c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e033      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2224      	movs	r2, #36	; 0x24
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e0bf      	b.n	8005e02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fc f932 	bl	8001f00 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005cb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6899      	ldr	r1, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	; (8005e0c <HAL_LTDC_Init+0x19c>)
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68d9      	ldr	r1, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b3e      	ldr	r3, [pc, #248]	; (8005e0c <HAL_LTDC_Init+0x19c>)
 8005d12:	400b      	ands	r3, r1
 8005d14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68d9      	ldr	r1, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6919      	ldr	r1, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b33      	ldr	r3, [pc, #204]	; (8005e0c <HAL_LTDC_Init+0x19c>)
 8005d40:	400b      	ands	r3, r1
 8005d42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6959      	ldr	r1, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_LTDC_Init+0x19c>)
 8005d6e:	400b      	ands	r3, r1
 8005d70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6959      	ldr	r1, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0206 	orr.w	r2, r2, #6
 8005dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	f000f800 	.word	0xf000f800

08005e10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d023      	beq.n	8005e7a <HAL_LTDC_IRQHandler+0x6a>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01e      	beq.n	8005e7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2204      	movs	r2, #4
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2204      	movs	r2, #4
 8005e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f86f 	bl	8005f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d023      	beq.n	8005ecc <HAL_LTDC_IRQHandler+0xbc>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01e      	beq.n	8005ecc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0202 	bic.w	r2, r2, #2
 8005e9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eac:	f043 0202 	orr.w	r2, r3, #2
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f846 	bl	8005f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01b      	beq.n	8005f0e <HAL_LTDC_IRQHandler+0xfe>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f82f 	bl	8005f6c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_LTDC_IRQHandler+0x140>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0208 	bic.w	r2, r2, #8
 8005f30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2208      	movs	r2, #8
 8005f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f818 	bl	8005f80 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f94:	b5b0      	push	{r4, r5, r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_LTDC_ConfigLayer+0x1a>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e02c      	b.n	8006008 <HAL_LTDC_ConfigLayer+0x74>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2134      	movs	r1, #52	; 0x34
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f811 	bl	8006010 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bdb0      	pop	{r4, r5, r7, pc}

08006010 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602c:	4413      	add	r3, r2
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	01db      	lsls	r3, r3, #7
 800603c:	4413      	add	r3, r2
 800603e:	3384      	adds	r3, #132	; 0x84
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	4611      	mov	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	01d2      	lsls	r2, r2, #7
 800604c:	440a      	add	r2, r1
 800604e:	3284      	adds	r2, #132	; 0x84
 8006050:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006054:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006066:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006068:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	01db      	lsls	r3, r3, #7
 8006074:	440b      	add	r3, r1
 8006076:	3384      	adds	r3, #132	; 0x84
 8006078:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800607e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608e:	4413      	add	r3, r2
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	01db      	lsls	r3, r3, #7
 800609e:	4413      	add	r3, r2
 80060a0:	3384      	adds	r3, #132	; 0x84
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	4611      	mov	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	01d2      	lsls	r2, r2, #7
 80060ae:	440a      	add	r2, r1
 80060b0:	3284      	adds	r2, #132	; 0x84
 80060b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c6:	4413      	add	r3, r2
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	440b      	add	r3, r1
 80060d6:	3384      	adds	r3, #132	; 0x84
 80060d8:	4619      	mov	r1, r3
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4313      	orrs	r3, r2
 80060de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	01db      	lsls	r3, r3, #7
 80060ea:	4413      	add	r3, r2
 80060ec:	3384      	adds	r3, #132	; 0x84
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	4611      	mov	r1, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	01d2      	lsls	r2, r2, #7
 80060fa:	440a      	add	r2, r1
 80060fc:	3284      	adds	r2, #132	; 0x84
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	01db      	lsls	r3, r3, #7
 800610e:	4413      	add	r3, r2
 8006110:	3384      	adds	r3, #132	; 0x84
 8006112:	461a      	mov	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	061b      	lsls	r3, r3, #24
 8006134:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	01db      	lsls	r3, r3, #7
 8006140:	4413      	add	r3, r2
 8006142:	3384      	adds	r3, #132	; 0x84
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	4413      	add	r3, r2
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006160:	461a      	mov	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	431a      	orrs	r2, r3
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4619      	mov	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	01db      	lsls	r3, r3, #7
 8006174:	440b      	add	r3, r1
 8006176:	3384      	adds	r3, #132	; 0x84
 8006178:	4619      	mov	r1, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	01db      	lsls	r3, r3, #7
 800618a:	4413      	add	r3, r2
 800618c:	3384      	adds	r3, #132	; 0x84
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	4611      	mov	r1, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	01d2      	lsls	r2, r2, #7
 800619a:	440a      	add	r2, r1
 800619c:	3284      	adds	r2, #132	; 0x84
 800619e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	01db      	lsls	r3, r3, #7
 80061ae:	4413      	add	r3, r2
 80061b0:	3384      	adds	r3, #132	; 0x84
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	01db      	lsls	r3, r3, #7
 80061c4:	4413      	add	r3, r2
 80061c6:	3384      	adds	r3, #132	; 0x84
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	01db      	lsls	r3, r3, #7
 80061d4:	440b      	add	r3, r1
 80061d6:	3384      	adds	r3, #132	; 0x84
 80061d8:	4619      	mov	r1, r3
 80061da:	4b58      	ldr	r3, [pc, #352]	; (800633c <LTDC_SetConfig+0x32c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	6809      	ldr	r1, [r1, #0]
 80061ec:	4608      	mov	r0, r1
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	01c9      	lsls	r1, r1, #7
 80061f2:	4401      	add	r1, r0
 80061f4:	3184      	adds	r1, #132	; 0x84
 80061f6:	4313      	orrs	r3, r2
 80061f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	4413      	add	r3, r2
 8006206:	3384      	adds	r3, #132	; 0x84
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	01db      	lsls	r3, r3, #7
 8006214:	4413      	add	r3, r2
 8006216:	3384      	adds	r3, #132	; 0x84
 8006218:	461a      	mov	r2, r3
 800621a:	2300      	movs	r3, #0
 800621c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	01db      	lsls	r3, r3, #7
 8006228:	4413      	add	r3, r2
 800622a:	3384      	adds	r3, #132	; 0x84
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800623c:	2304      	movs	r3, #4
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e01b      	b.n	800627a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d102      	bne.n	8006250 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800624a:	2303      	movs	r3, #3
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e014      	b.n	800627a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d00b      	beq.n	8006270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800625c:	2b02      	cmp	r3, #2
 800625e:	d007      	beq.n	8006270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006264:	2b03      	cmp	r3, #3
 8006266:	d003      	beq.n	8006270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800626c:	2b07      	cmp	r3, #7
 800626e:	d102      	bne.n	8006276 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006270:	2302      	movs	r3, #2
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e001      	b.n	800627a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006276:	2301      	movs	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	4413      	add	r3, r2
 8006286:	3384      	adds	r3, #132	; 0x84
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	4611      	mov	r1, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	01d2      	lsls	r2, r2, #7
 8006294:	440a      	add	r2, r1
 8006296:	3284      	adds	r2, #132	; 0x84
 8006298:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800629c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1acb      	subs	r3, r1, r3
 80062b4:	69f9      	ldr	r1, [r7, #28]
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	6809      	ldr	r1, [r1, #0]
 80062c0:	4608      	mov	r0, r1
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	01c9      	lsls	r1, r1, #7
 80062c6:	4401      	add	r1, r0
 80062c8:	3184      	adds	r1, #132	; 0x84
 80062ca:	4313      	orrs	r3, r2
 80062cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	01db      	lsls	r3, r3, #7
 80062d8:	4413      	add	r3, r2
 80062da:	3384      	adds	r3, #132	; 0x84
 80062dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	440b      	add	r3, r1
 80062ea:	3384      	adds	r3, #132	; 0x84
 80062ec:	4619      	mov	r1, r3
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <LTDC_SetConfig+0x330>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	01db      	lsls	r3, r3, #7
 80062fe:	4413      	add	r3, r2
 8006300:	3384      	adds	r3, #132	; 0x84
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	01db      	lsls	r3, r3, #7
 8006314:	4413      	add	r3, r2
 8006316:	3384      	adds	r3, #132	; 0x84
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	4611      	mov	r1, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	01d2      	lsls	r2, r2, #7
 8006324:	440a      	add	r2, r1
 8006326:	3284      	adds	r2, #132	; 0x84
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	6013      	str	r3, [r2, #0]
}
 800632e:	bf00      	nop
 8006330:	3724      	adds	r7, #36	; 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	fffff8f8 	.word	0xfffff8f8
 8006340:	fffff800 	.word	0xfffff800

08006344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a04      	ldr	r2, [pc, #16]	; (8006360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800634e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40007000 	.word	0x40007000

08006364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800636e:	4b23      	ldr	r3, [pc, #140]	; (80063fc <HAL_PWREx_EnableOverDrive+0x98>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	4a22      	ldr	r2, [pc, #136]	; (80063fc <HAL_PWREx_EnableOverDrive+0x98>)
 8006374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006378:	6413      	str	r3, [r2, #64]	; 0x40
 800637a:	4b20      	ldr	r3, [pc, #128]	; (80063fc <HAL_PWREx_EnableOverDrive+0x98>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006386:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006392:	f7fc fc3d 	bl	8002c10 <HAL_GetTick>
 8006396:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006398:	e009      	b.n	80063ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800639a:	f7fc fc39 	bl	8002c10 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a8:	d901      	bls.n	80063ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e022      	b.n	80063f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063ae:	4b14      	ldr	r3, [pc, #80]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	d1ee      	bne.n	800639a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063c8:	f7fc fc22 	bl	8002c10 <HAL_GetTick>
 80063cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063ce:	e009      	b.n	80063e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063d0:	f7fc fc1e 	bl	8002c10 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063de:	d901      	bls.n	80063e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e007      	b.n	80063f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f0:	d1ee      	bne.n	80063d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40023800 	.word	0x40023800
 8006400:	40007000 	.word	0x40007000

08006404 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800640c:	f7fc fc00 	bl	8002c10 <HAL_GetTick>
 8006410:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e067      	b.n	80064ec <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fb fe2d 	bl	8002090 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006436:	f241 3188 	movw	r1, #5000	; 0x1388
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f85e 	bl	80064fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	3b01      	subs	r3, #1
 8006450:	021a      	lsls	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	2120      	movs	r1, #32
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f856 	bl	8006518 <QSPI_WaitFlagStateUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d135      	bne.n	80064e2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_QSPI_Init+0xf0>)
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6852      	ldr	r2, [r2, #4]
 8006484:	0611      	lsls	r1, r2, #24
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68d2      	ldr	r2, [r2, #12]
 800648a:	4311      	orrs	r1, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	69d2      	ldr	r2, [r2, #28]
 8006490:	4311      	orrs	r1, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6a12      	ldr	r2, [r2, #32]
 8006496:	4311      	orrs	r1, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <HAL_QSPI_Init+0xf4>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6912      	ldr	r2, [r2, #16]
 80064ae:	0411      	lsls	r1, r2, #16
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6952      	ldr	r2, [r2, #20]
 80064b4:	4311      	orrs	r1, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6992      	ldr	r2, [r2, #24]
 80064ba:	4311      	orrs	r1, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80064ea:	7afb      	ldrb	r3, [r7, #11]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	00ffff2f 	.word	0x00ffff2f
 80064f8:	ffe0f8fe 	.word	0xffe0f8fe

080064fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006528:	e01a      	b.n	8006560 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006530:	d016      	beq.n	8006560 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc fb6d 	bl	8002c10 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2204      	movs	r2, #4
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e00e      	b.n	800657e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	429a      	cmp	r2, r3
 800657a:	d1d6      	bne.n	800652a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e291      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8087 	beq.w	80066ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065ac:	4b96      	ldr	r3, [pc, #600]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 030c 	and.w	r3, r3, #12
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d00c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d112      	bne.n	80065ea <HAL_RCC_OscConfig+0x62>
 80065c4:	4b90      	ldr	r3, [pc, #576]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d0:	d10b      	bne.n	80065ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d2:	4b8d      	ldr	r3, [pc, #564]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d06c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x130>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d168      	bne.n	80066b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e26b      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x7a>
 80065f4:	4b84      	ldr	r3, [pc, #528]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a83      	ldr	r2, [pc, #524]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80065fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e02e      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x9c>
 800660a:	4b7f      	ldr	r3, [pc, #508]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a7e      	ldr	r2, [pc, #504]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b7c      	ldr	r3, [pc, #496]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a7b      	ldr	r2, [pc, #492]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800661c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e01d      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0xc0>
 800662e:	4b76      	ldr	r3, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a75      	ldr	r2, [pc, #468]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b73      	ldr	r3, [pc, #460]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a72      	ldr	r2, [pc, #456]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0xd8>
 8006648:	4b6f      	ldr	r3, [pc, #444]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a6e      	ldr	r2, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6b      	ldr	r2, [pc, #428]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fc fad2 	bl	8002c10 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006670:	f7fc face 	bl	8002c10 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	; 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e21f      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0xe8>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fc fabe 	bl	8002c10 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006698:	f7fc faba 	bl	8002c10 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e20b      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x110>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d069      	beq.n	800679a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c6:	4b50      	ldr	r3, [pc, #320]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d2:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d11c      	bne.n	8006718 <HAL_RCC_OscConfig+0x190>
 80066de:	4b4a      	ldr	r3, [pc, #296]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d116      	bne.n	8006718 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCC_OscConfig+0x17a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e1df      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006702:	4b41      	ldr	r3, [pc, #260]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	493d      	ldr	r1, [pc, #244]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006716:	e040      	b.n	800679a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d023      	beq.n	8006768 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006720:	4b39      	ldr	r3, [pc, #228]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a38      	ldr	r2, [pc, #224]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fc fa70 	bl	8002c10 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006734:	f7fc fa6c 	bl	8002c10 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1bd      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006746:	4b30      	ldr	r3, [pc, #192]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4929      	ldr	r1, [pc, #164]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006762:	4313      	orrs	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
 8006766:	e018      	b.n	800679a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fc fa4c 	bl	8002c10 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677c:	f7fc fa48 	bl	8002c10 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e199      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678e:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d038      	beq.n	8006818 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ae:	4b16      	ldr	r3, [pc, #88]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ba:	f7fc fa29 	bl	8002c10 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c2:	f7fc fa25 	bl	8002c10 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e176      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x23a>
 80067e0:	e01a      	b.n	8006818 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <HAL_RCC_OscConfig+0x280>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fc fa0f 	bl	8002c10 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f6:	f7fc fa0b 	bl	8002c10 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d903      	bls.n	800680c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e15c      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
 8006808:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800680c:	4b91      	ldr	r3, [pc, #580]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 800680e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ee      	bne.n	80067f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a4 	beq.w	800696e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006826:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10d      	bne.n	800684e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006832:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	4a87      	ldr	r2, [pc, #540]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683c:	6413      	str	r3, [r2, #64]	; 0x40
 800683e:	4b85      	ldr	r3, [pc, #532]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684e:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d118      	bne.n	800688c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800685a:	4b7f      	ldr	r3, [pc, #508]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7e      	ldr	r2, [pc, #504]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006866:	f7fc f9d3 	bl	8002c10 <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686e:	f7fc f9cf 	bl	8002c10 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b64      	cmp	r3, #100	; 0x64
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e120      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	4b75      	ldr	r3, [pc, #468]	; (8006a58 <HAL_RCC_OscConfig+0x4d0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f0      	beq.n	800686e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d106      	bne.n	80068a2 <HAL_RCC_OscConfig+0x31a>
 8006894:	4b6f      	ldr	r3, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
 80068a0:	e02d      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x33c>
 80068aa:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a69      	ldr	r2, [pc, #420]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	4a66      	ldr	r2, [pc, #408]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	6713      	str	r3, [r2, #112]	; 0x70
 80068c2:	e01c      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCC_OscConfig+0x35e>
 80068cc:	4b61      	ldr	r3, [pc, #388]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a60      	ldr	r2, [pc, #384]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
 80068d8:	4b5e      	ldr	r3, [pc, #376]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a5d      	ldr	r2, [pc, #372]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	e00b      	b.n	80068fe <HAL_RCC_OscConfig+0x376>
 80068e6:	4b5b      	ldr	r3, [pc, #364]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	4a5a      	ldr	r2, [pc, #360]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	6713      	str	r3, [r2, #112]	; 0x70
 80068f2:	4b58      	ldr	r3, [pc, #352]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	4a57      	ldr	r2, [pc, #348]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80068f8:	f023 0304 	bic.w	r3, r3, #4
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d015      	beq.n	8006932 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fc f983 	bl	8002c10 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	e00a      	b.n	8006924 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fc f97f 	bl	8002c10 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e0ce      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ee      	beq.n	800690e <HAL_RCC_OscConfig+0x386>
 8006930:	e014      	b.n	800695c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fc f96d 	bl	8002c10 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006938:	e00a      	b.n	8006950 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fc f969 	bl	8002c10 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	; 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e0b8      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006950:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ee      	bne.n	800693a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4b3c      	ldr	r3, [pc, #240]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	4a3b      	ldr	r2, [pc, #236]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80a4 	beq.w	8006ac0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006978:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b08      	cmp	r3, #8
 8006982:	d06b      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d149      	bne.n	8006a20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698c:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fc f93a 	bl	8002c10 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fc f936 	bl	8002c10 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e087      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69da      	ldr	r2, [r3, #28]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	019b      	lsls	r3, r3, #6
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	3b01      	subs	r3, #1
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	061b      	lsls	r3, r3, #24
 80069e2:	4313      	orrs	r3, r2
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ec:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fc f90a 	bl	8002c10 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fc f906 	bl	8002c10 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e057      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x478>
 8006a1e:	e04f      	b.n	8006ac0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0b      	ldr	r2, [pc, #44]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fc f8f0 	bl	8002c10 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fc f8ec 	bl	8002c10 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e03d      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a46:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x4ac>
 8006a52:	e035      	b.n	8006ac0 <HAL_RCC_OscConfig+0x538>
 8006a54:	40023800 	.word	0x40023800
 8006a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x544>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d028      	beq.n	8006abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d121      	bne.n	8006abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d11a      	bne.n	8006abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d111      	bne.n	8006abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d107      	bne.n	8006abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800

08006ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0d0      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b6a      	ldr	r3, [pc, #424]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d910      	bls.n	8006b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b67      	ldr	r3, [pc, #412]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 020f 	bic.w	r2, r3, #15
 8006afe:	4965      	ldr	r1, [pc, #404]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b06:	4b63      	ldr	r3, [pc, #396]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d001      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0b8      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b30:	4b59      	ldr	r3, [pc, #356]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4a58      	ldr	r2, [pc, #352]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b48:	4b53      	ldr	r3, [pc, #332]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4a52      	ldr	r2, [pc, #328]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b54:	4b50      	ldr	r3, [pc, #320]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	494d      	ldr	r1, [pc, #308]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d040      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d107      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	4b47      	ldr	r3, [pc, #284]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d115      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e07f      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b92:	4b41      	ldr	r3, [pc, #260]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e073      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba2:	4b3d      	ldr	r3, [pc, #244]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e06b      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 0203 	bic.w	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4936      	ldr	r1, [pc, #216]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fc f824 	bl	8002c10 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bca:	e00a      	b.n	8006be2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bcc:	f7fc f820 	bl	8002c10 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e053      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	4b2d      	ldr	r3, [pc, #180]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 020c 	and.w	r2, r3, #12
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d1eb      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d210      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 020f 	bic.w	r2, r3, #15
 8006c0a:	4922      	ldr	r1, [pc, #136]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e032      	b.n	8006c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4916      	ldr	r1, [pc, #88]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	490e      	ldr	r1, [pc, #56]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c62:	f000 f821 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	490a      	ldr	r1, [pc, #40]	; (8006c9c <HAL_RCC_ClockConfig+0x1cc>)
 8006c74:	5ccb      	ldrb	r3, [r1, r3]
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	4a09      	ldr	r2, [pc, #36]	; (8006ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8006c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1d4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fb feb0 	bl	80029e8 <HAL_InitTick>

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40023c00 	.word	0x40023c00
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	0800e8ec 	.word	0x0800e8ec
 8006ca0:	20000000 	.word	0x20000000
 8006ca4:	20000004 	.word	0x20000004

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cac:	b090      	sub	sp, #64	; 0x40
 8006cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb8:	2300      	movs	r3, #0
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc0:	4b59      	ldr	r3, [pc, #356]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 030c 	and.w	r3, r3, #12
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d00d      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	f200 80a1 	bhi.w	8006e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x34>
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cda:	e09b      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cdc:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ce0:	e09b      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ce2:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ce6:	e098      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce8:	4b4f      	ldr	r3, [pc, #316]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cf2:	4b4d      	ldr	r3, [pc, #308]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d028      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfe:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	099b      	lsrs	r3, r3, #6
 8006d04:	2200      	movs	r2, #0
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	627a      	str	r2, [r7, #36]	; 0x24
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d10:	2100      	movs	r1, #0
 8006d12:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d14:	fb03 f201 	mul.w	r2, r3, r1
 8006d18:	2300      	movs	r3, #0
 8006d1a:	fb00 f303 	mul.w	r3, r0, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	4a43      	ldr	r2, [pc, #268]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d22:	fba0 1202 	umull	r1, r2, r0, r2
 8006d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d28:	460a      	mov	r2, r1
 8006d2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2e:	4413      	add	r3, r2
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	2200      	movs	r2, #0
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	61fa      	str	r2, [r7, #28]
 8006d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d42:	f7f9 fa65 	bl	8000210 <__aeabi_uldivmod>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4e:	e053      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d50:	4b35      	ldr	r3, [pc, #212]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	099b      	lsrs	r3, r3, #6
 8006d56:	2200      	movs	r2, #0
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	617a      	str	r2, [r7, #20]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d62:	f04f 0b00 	mov.w	fp, #0
 8006d66:	4652      	mov	r2, sl
 8006d68:	465b      	mov	r3, fp
 8006d6a:	f04f 0000 	mov.w	r0, #0
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	0159      	lsls	r1, r3, #5
 8006d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d78:	0150      	lsls	r0, r2, #5
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8006d82:	eb63 090b 	sbc.w	r9, r3, fp
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8006d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	00eb      	lsls	r3, r5, #3
 8006dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006db0:	00e2      	lsls	r2, r4, #3
 8006db2:	4614      	mov	r4, r2
 8006db4:	461d      	mov	r5, r3
 8006db6:	eb14 030a 	adds.w	r3, r4, sl
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	eb45 030b 	adc.w	r3, r5, fp
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dce:	4629      	mov	r1, r5
 8006dd0:	028b      	lsls	r3, r1, #10
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dd8:	4621      	mov	r1, r4
 8006dda:	028a      	lsls	r2, r1, #10
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de2:	2200      	movs	r2, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	60fa      	str	r2, [r7, #12]
 8006de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dec:	f7f9 fa10 	bl	8000210 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4613      	mov	r3, r2
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	3301      	adds	r3, #1
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e12:	e002      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8006e16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3740      	adds	r7, #64	; 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	017d7840 	.word	0x017d7840

08006e34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000000 	.word	0x20000000

08006e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e50:	f7ff fff0 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	0a9b      	lsrs	r3, r3, #10
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4903      	ldr	r1, [pc, #12]	; (8006e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	0800e8fc 	.word	0x0800e8fc

08006e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e78:	f7ff ffdc 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0b5b      	lsrs	r3, r3, #13
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4903      	ldr	r1, [pc, #12]	; (8006e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	0800e8fc 	.word	0x0800e8fc

08006e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	220f      	movs	r2, #15
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0203 	and.w	r2, r3, #3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ed0:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <HAL_RCC_GetClockConfig+0x60>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 020f 	and.w	r2, r3, #15
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	601a      	str	r2, [r3, #0]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	40023c00 	.word	0x40023c00

08006f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d012      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f28:	4b69      	ldr	r3, [pc, #420]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a68      	ldr	r2, [pc, #416]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f32:	6093      	str	r3, [r2, #8]
 8006f34:	4b66      	ldr	r3, [pc, #408]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3c:	4964      	ldr	r1, [pc, #400]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d017      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f5a:	4b5d      	ldr	r3, [pc, #372]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	4959      	ldr	r1, [pc, #356]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f78:	d101      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f96:	4b4e      	ldr	r3, [pc, #312]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	494a      	ldr	r1, [pc, #296]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fb4:	d101      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 808b 	beq.w	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fe4:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	4a39      	ldr	r2, [pc, #228]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fee:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff0:	4b37      	ldr	r3, [pc, #220]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ffc:	4b35      	ldr	r3, [pc, #212]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a34      	ldr	r2, [pc, #208]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007008:	f7fb fe02 	bl	8002c10 <HAL_GetTick>
 800700c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007010:	f7fb fdfe 	bl	8002c10 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b64      	cmp	r3, #100	; 0x64
 800701c:	d901      	bls.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e357      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007022:	4b2c      	ldr	r3, [pc, #176]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007036:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d035      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	429a      	cmp	r2, r3
 800704a:	d02e      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800704c:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007054:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007056:	4b1e      	ldr	r3, [pc, #120]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007060:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007062:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800706e:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007074:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d114      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fb fdc6 	bl	8002c10 <HAL_GetTick>
 8007084:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007086:	e00a      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007088:	f7fb fdc2 	bl	8002c10 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	; 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e319      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0ee      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b6:	d111      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070c4:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070c6:	400b      	ands	r3, r1
 80070c8:	4901      	ldr	r1, [pc, #4]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
 80070ce:	e00b      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070d0:	40023800 	.word	0x40023800
 80070d4:	40007000 	.word	0x40007000
 80070d8:	0ffffcff 	.word	0x0ffffcff
 80070dc:	4baa      	ldr	r3, [pc, #680]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4aa9      	ldr	r2, [pc, #676]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070e6:	6093      	str	r3, [r2, #8]
 80070e8:	4ba7      	ldr	r3, [pc, #668]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f4:	49a4      	ldr	r1, [pc, #656]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d010      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007106:	4ba0      	ldr	r3, [pc, #640]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710c:	4a9e      	ldr	r2, [pc, #632]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007112:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007118:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	4999      	ldr	r1, [pc, #612]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007134:	4b94      	ldr	r3, [pc, #592]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007142:	4991      	ldr	r1, [pc, #580]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007156:	4b8c      	ldr	r3, [pc, #560]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007164:	4988      	ldr	r1, [pc, #544]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007178:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007186:	4980      	ldr	r1, [pc, #512]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	4977      	ldr	r1, [pc, #476]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071bc:	4b72      	ldr	r3, [pc, #456]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f023 0203 	bic.w	r2, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	496f      	ldr	r1, [pc, #444]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	f023 020c 	bic.w	r2, r3, #12
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	4966      	ldr	r1, [pc, #408]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007200:	4b61      	ldr	r3, [pc, #388]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	495e      	ldr	r1, [pc, #376]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007210:	4313      	orrs	r3, r2
 8007212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007228:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	4955      	ldr	r1, [pc, #340]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007244:	4b50      	ldr	r3, [pc, #320]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	494d      	ldr	r1, [pc, #308]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007274:	4944      	ldr	r1, [pc, #272]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007288:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007296:	493c      	ldr	r1, [pc, #240]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b8:	4933      	ldr	r1, [pc, #204]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072cc:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072da:	492b      	ldr	r1, [pc, #172]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d011      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072ee:	4b26      	ldr	r3, [pc, #152]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fc:	4922      	ldr	r1, [pc, #136]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800730c:	d101      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800730e:	2301      	movs	r3, #1
 8007310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800731e:	2301      	movs	r3, #1
 8007320:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800732e:	4b16      	ldr	r3, [pc, #88]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733c:	4912      	ldr	r1, [pc, #72]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007356:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007360:	4909      	ldr	r1, [pc, #36]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d006      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80d9 	beq.w	800752e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a01      	ldr	r2, [pc, #4]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007386:	e001      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007388:	40023800 	.word	0x40023800
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fb fc3f 	bl	8002c10 <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007396:	f7fb fc3b 	bl	8002c10 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b64      	cmp	r3, #100	; 0x64
 80073a2:	d901      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e194      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073a8:	4b6c      	ldr	r3, [pc, #432]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d021      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11d      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073c8:	4b64      	ldr	r3, [pc, #400]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073d6:	4b61      	ldr	r3, [pc, #388]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073dc:	0e1b      	lsrs	r3, r3, #24
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	019a      	lsls	r2, r3, #6
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	071b      	lsls	r3, r3, #28
 80073fc:	4957      	ldr	r1, [pc, #348]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02e      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800742e:	d129      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007430:	4b4a      	ldr	r3, [pc, #296]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800743e:	4b47      	ldr	r3, [pc, #284]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007444:	0f1b      	lsrs	r3, r3, #28
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	019a      	lsls	r2, r3, #6
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	431a      	orrs	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	071b      	lsls	r3, r3, #28
 8007464:	493d      	ldr	r1, [pc, #244]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800746c:	4b3b      	ldr	r3, [pc, #236]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800746e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007472:	f023 021f 	bic.w	r2, r3, #31
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	3b01      	subs	r3, #1
 800747c:	4937      	ldr	r1, [pc, #220]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01d      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007490:	4b32      	ldr	r3, [pc, #200]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007496:	0e1b      	lsrs	r3, r3, #24
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800749e:	4b2f      	ldr	r3, [pc, #188]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a4:	0f1b      	lsrs	r3, r3, #28
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	019a      	lsls	r2, r3, #6
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	431a      	orrs	r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	431a      	orrs	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	071b      	lsls	r3, r3, #28
 80074c4:	4925      	ldr	r1, [pc, #148]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d011      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	019a      	lsls	r2, r3, #6
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	071b      	lsls	r3, r3, #28
 80074f4:	4919      	ldr	r1, [pc, #100]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074fc:	4b17      	ldr	r3, [pc, #92]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a16      	ldr	r2, [pc, #88]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007508:	f7fb fb82 	bl	8002c10 <HAL_GetTick>
 800750c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007510:	f7fb fb7e 	bl	8002c10 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	; 0x64
 800751c:	d901      	bls.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0d7      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 80cd 	bne.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a08      	ldr	r2, [pc, #32]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800753c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007542:	f7fb fb65 	bl	8002c10 <HAL_GetTick>
 8007546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007548:	e00a      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800754a:	f7fb fb61 	bl	8002c10 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b64      	cmp	r3, #100	; 0x64
 8007556:	d903      	bls.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e0ba      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800755c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007560:	4b5e      	ldr	r3, [pc, #376]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d0ed      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800758a:	2b00      	cmp	r3, #0
 800758c:	d02e      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d12a      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007596:	4b51      	ldr	r3, [pc, #324]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075a4:	4b4d      	ldr	r3, [pc, #308]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	0f1b      	lsrs	r3, r3, #28
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	019a      	lsls	r2, r3, #6
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	071b      	lsls	r3, r3, #28
 80075ca:	4944      	ldr	r1, [pc, #272]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075d2:	4b42      	ldr	r3, [pc, #264]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	3b01      	subs	r3, #1
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	493d      	ldr	r1, [pc, #244]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d022      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007600:	d11d      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007602:	4b36      	ldr	r3, [pc, #216]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	0e1b      	lsrs	r3, r3, #24
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007610:	4b32      	ldr	r3, [pc, #200]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	0f1b      	lsrs	r3, r3, #28
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	019a      	lsls	r2, r3, #6
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	041b      	lsls	r3, r3, #16
 800762a:	431a      	orrs	r2, r3
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	061b      	lsls	r3, r3, #24
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	071b      	lsls	r3, r3, #28
 8007636:	4929      	ldr	r1, [pc, #164]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d028      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007658:	4b20      	ldr	r3, [pc, #128]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	019a      	lsls	r2, r3, #6
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	431a      	orrs	r2, r3
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	071b      	lsls	r3, r3, #28
 800767e:	4917      	ldr	r1, [pc, #92]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	4911      	ldr	r1, [pc, #68]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a8:	f7fb fab2 	bl	8002c10 <HAL_GetTick>
 80076ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076b0:	f7fb faae 	bl	8002c10 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b64      	cmp	r3, #100	; 0x64
 80076bc:	d901      	bls.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e007      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ce:	d1ef      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800

080076e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076fe:	f040 808d 	bne.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007702:	4b93      	ldr	r3, [pc, #588]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007708:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007710:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007718:	d07c      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007720:	d87b      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772e:	d039      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007730:	e073      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007732:	4b87      	ldr	r3, [pc, #540]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d108      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800773e:	4b84      	ldr	r3, [pc, #528]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007746:	4a83      	ldr	r2, [pc, #524]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	e007      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007750:	4b7f      	ldr	r3, [pc, #508]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007758:	4a7f      	ldr	r2, [pc, #508]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800775a:	fbb2 f3f3 	udiv	r3, r2, r3
 800775e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007760:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007766:	0e1b      	lsrs	r3, r3, #24
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800776e:	4b78      	ldr	r3, [pc, #480]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007774:	099b      	lsrs	r3, r3, #6
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	fb03 f202 	mul.w	r2, r3, r2
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007788:	4b71      	ldr	r3, [pc, #452]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800778a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]
        break;
 80077a2:	e03b      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80077a4:	4b6a      	ldr	r3, [pc, #424]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d108      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077b0:	4b67      	ldr	r3, [pc, #412]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b8:	4a66      	ldr	r2, [pc, #408]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e007      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80077c2:	4b63      	ldr	r3, [pc, #396]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ca:	4a63      	ldr	r2, [pc, #396]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80077d2:	4b5f      	ldr	r3, [pc, #380]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d8:	0e1b      	lsrs	r3, r3, #24
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80077e0:	4b5b      	ldr	r3, [pc, #364]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	fb03 f202 	mul.w	r2, r3, r2
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80077fa:	4b55      	ldr	r3, [pc, #340]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	617b      	str	r3, [r7, #20]
        break;
 8007812:	e003      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007814:	4b51      	ldr	r3, [pc, #324]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007816:	617b      	str	r3, [r7, #20]
        break;
 8007818:	e000      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800781a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007822:	f040 808d 	bne.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007826:	4b4a      	ldr	r3, [pc, #296]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800782c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007834:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800783c:	d07c      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007844:	d87b      	bhi.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007852:	d039      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007854:	e073      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007856:	4b3e      	ldr	r3, [pc, #248]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d108      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007862:	4b3b      	ldr	r3, [pc, #236]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800786a:	4a3a      	ldr	r2, [pc, #232]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	e007      	b.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007874:	4b36      	ldr	r3, [pc, #216]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800787c:	4a36      	ldr	r2, [pc, #216]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007884:	4b32      	ldr	r3, [pc, #200]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788a:	0e1b      	lsrs	r3, r3, #24
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007892:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007898:	099b      	lsrs	r3, r3, #6
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	fb03 f202 	mul.w	r2, r3, r2
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	f003 031f 	and.w	r3, r3, #31
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	617b      	str	r3, [r7, #20]
        break;
 80078c6:	e03b      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80078c8:	4b21      	ldr	r3, [pc, #132]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078d4:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078dc:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078de:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	e007      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ee:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80078f6:	4b16      	ldr	r3, [pc, #88]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790a:	099b      	lsrs	r3, r3, #6
 800790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	fb03 f202 	mul.w	r2, r3, r2
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	fbb2 f3f3 	udiv	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800791e:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	617b      	str	r3, [r7, #20]
        break;
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007938:	4b08      	ldr	r3, [pc, #32]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800793a:	617b      	str	r3, [r7, #20]
        break;
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800793e:	bf00      	nop
      }
    }
  }

  return frequency;
 8007940:	697b      	ldr	r3, [r7, #20]
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800
 8007954:	00f42400 	.word	0x00f42400
 8007958:	017d7840 	.word	0x017d7840
 800795c:	00bb8000 	.word	0x00bb8000

08007960 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e071      	b.n	8007a5a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7f5b      	ldrb	r3, [r3, #29]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fa fc12 	bl	80021b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b10      	cmp	r3, #16
 800799e:	d053      	beq.n	8007a48 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	22ca      	movs	r2, #202	; 0xca
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2253      	movs	r2, #83	; 0x53
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fac9 	bl	8007f48 <RTC_EnterInitMode>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d12a      	bne.n	8007a16 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6899      	ldr	r1, [r3, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <HAL_RTC_Init+0x104>)
 80079cc:	400b      	ands	r3, r1
 80079ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6899      	ldr	r1, [r3, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	68d2      	ldr	r2, [r2, #12]
 80079f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6919      	ldr	r1, [r3, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	041a      	lsls	r2, r3, #16
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fad2 	bl	8007fb6 <RTC_ExitInitMode>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d110      	bne.n	8007a3e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0208 	bic.w	r2, r2, #8
 8007a2a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	22ff      	movs	r2, #255	; 0xff
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
 8007a46:	e001      	b.n	8007a4c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	ff8fffbf 	.word	0xff8fffbf

08007a68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	7f1b      	ldrb	r3, [r3, #28]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_RTC_SetTime+0x1c>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e085      	b.n	8007b90 <HAL_RTC_SetTime+0x128>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d126      	bne.n	8007ae4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 faa6 	bl	8008000 <RTC_ByteToBcd2>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fa9f 	bl	8008000 <RTC_ByteToBcd2>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ac6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	789b      	ldrb	r3, [r3, #2]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fa97 	bl	8008000 <RTC_ByteToBcd2>
 8007ad2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ad4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	78db      	ldrb	r3, [r3, #3]
 8007adc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e018      	b.n	8007b16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d102      	bne.n	8007af8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b04:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	78db      	ldrb	r3, [r3, #3]
 8007b10:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	22ca      	movs	r2, #202	; 0xca
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2253      	movs	r2, #83	; 0x53
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fa0e 	bl	8007f48 <RTC_EnterInitMode>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007b30:	7cfb      	ldrb	r3, [r7, #19]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d11e      	bne.n	8007b74 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	6979      	ldr	r1, [r7, #20]
 8007b3c:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <HAL_RTC_SetTime+0x130>)
 8007b3e:	400b      	ands	r3, r1
 8007b40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6899      	ldr	r1, [r3, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fa23 	bl	8007fb6 <RTC_ExitInitMode>
 8007b70:	4603      	mov	r3, r0
 8007b72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	771a      	strb	r2, [r3, #28]

  return status;
 8007b8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd90      	pop	{r4, r7, pc}
 8007b98:	007f7f7f 	.word	0x007f7f7f

08007b9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	7f1b      	ldrb	r3, [r3, #28]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_RTC_SetDate+0x1c>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e06f      	b.n	8007c98 <HAL_RTC_SetDate+0xfc>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10e      	bne.n	8007be8 <HAL_RTC_SetDate+0x4c>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	330a      	adds	r3, #10
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d11c      	bne.n	8007c28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	78db      	ldrb	r3, [r3, #3]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fa04 	bl	8008000 <RTC_ByteToBcd2>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f9fd 	bl	8008000 <RTC_ByteToBcd2>
 8007c06:	4603      	mov	r3, r0
 8007c08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	789b      	ldrb	r3, [r3, #2]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 f9f5 	bl	8008000 <RTC_ByteToBcd2>
 8007c16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	e00e      	b.n	8007c46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	78db      	ldrb	r3, [r3, #3]
 8007c2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c34:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	22ca      	movs	r2, #202	; 0xca
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2253      	movs	r2, #83	; 0x53
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f976 	bl	8007f48 <RTC_EnterInitMode>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007c60:	7cfb      	ldrb	r3, [r7, #19]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	6979      	ldr	r1, [r7, #20]
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <HAL_RTC_SetDate+0x104>)
 8007c6e:	400b      	ands	r3, r1
 8007c70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f99f 	bl	8007fb6 <RTC_ExitInitMode>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007c7c:	7cfb      	ldrb	r3, [r7, #19]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	771a      	strb	r2, [r3, #28]

  return status;
 8007c96:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}
 8007ca0:	00ffff3f 	.word	0x00ffff3f

08007ca4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b089      	sub	sp, #36	; 0x24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	7f1b      	ldrb	r3, [r3, #28]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_RTC_SetAlarm+0x24>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e113      	b.n	8007ef0 <HAL_RTC_SetAlarm+0x24c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d137      	bne.n	8007d4a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f984 	bl	8008000 <RTC_ByteToBcd2>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f97d 	bl	8008000 <RTC_ByteToBcd2>
 8007d06:	4603      	mov	r3, r0
 8007d08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d0a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	789b      	ldrb	r3, [r3, #2]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f975 	bl	8008000 <RTC_ByteToBcd2>
 8007d16:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d18:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	78db      	ldrb	r3, [r3, #3]
 8007d20:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d22:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f967 	bl	8008000 <RTC_ByteToBcd2>
 8007d32:	4603      	mov	r3, r0
 8007d34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	e023      	b.n	8007d92 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d6a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007d70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	78db      	ldrb	r3, [r3, #3]
 8007d76:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d88:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	22ca      	movs	r2, #202	; 0xca
 8007da4:	625a      	str	r2, [r3, #36]	; 0x24
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2253      	movs	r2, #83	; 0x53
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db6:	d148      	bne.n	8007e4a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dc6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dd6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007de8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dea:	f7fa ff11 	bl	8002c10 <HAL_GetTick>
 8007dee:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007df0:	e013      	b.n	8007e1a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007df2:	f7fa ff0d 	bl	8002c10 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e00:	d90b      	bls.n	8007e1a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	22ff      	movs	r2, #255	; 0xff
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e06a      	b.n	8007ef0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0e4      	beq.n	8007df2 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e46:	609a      	str	r2, [r3, #8]
 8007e48:	e047      	b.n	8007eda <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e58:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e68:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007e7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e7c:	f7fa fec8 	bl	8002c10 <HAL_GetTick>
 8007e80:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007e82:	e013      	b.n	8007eac <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e84:	f7fa fec4 	bl	8002c10 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e92:	d90b      	bls.n	8007eac <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e021      	b.n	8007ef0 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0e4      	beq.n	8007e84 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	22ff      	movs	r2, #255	; 0xff
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3724      	adds	r7, #36	; 0x24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}

08007ef8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f14:	f7fa fe7c 	bl	8002c10 <HAL_GetTick>
 8007f18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f1a:	e009      	b.n	8007f30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f1c:	f7fa fe78 	bl	8002c10 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f2a:	d901      	bls.n	8007f30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e007      	b.n	8007f40 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0ee      	beq.n	8007f1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d122      	bne.n	8007fac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f76:	f7fa fe4b 	bl	8002c10 <HAL_GetTick>
 8007f7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f7c:	e00c      	b.n	8007f98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f7e:	f7fa fe47 	bl	8002c10 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f8c:	d904      	bls.n	8007f98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2204      	movs	r2, #4
 8007f92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <RTC_EnterInitMode+0x64>
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d1e8      	bne.n	8007f7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff ff89 	bl	8007ef8 <HAL_RTC_WaitForSynchro>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2204      	movs	r2, #4
 8007ff0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800800e:	e005      	b.n	800801c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	3b0a      	subs	r3, #10
 800801a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b09      	cmp	r3, #9
 8008020:	d8f6      	bhi.n	8008010 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	b2db      	uxtb	r3, r3
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	b2da      	uxtb	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	4313      	orrs	r3, r2
 800802e:	b2db      	uxtb	r3, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	7f1b      	ldrb	r3, [r3, #28]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008054:	2302      	movs	r3, #2
 8008056:	e050      	b.n	80080fa <HAL_RTCEx_SetTimeStamp+0xbe>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2202      	movs	r2, #2
 8008062:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0206 	bic.w	r2, r2, #6
 8008072:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	430a      	orrs	r2, r1
 8008082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	4b1f      	ldr	r3, [pc, #124]	; (8008108 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800808c:	4013      	ands	r3, r2
 800808e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	22ca      	movs	r2, #202	; 0xca
 800809e:	625a      	str	r2, [r3, #36]	; 0x24
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2253      	movs	r2, #83	; 0x53
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f462 6208 	orn	r2, r2, #2176	; 0x880
 80080c0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80080d2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	fffff7f7 	.word	0xfffff7f7

0800810c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e156      	b.n	80083d8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fa fbe8 	bl	8002914 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f95b 	bl	8008408 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d00c      	beq.n	8008174 <HAL_SAI_Init+0x68>
 800815a:	2b02      	cmp	r3, #2
 800815c:	d80d      	bhi.n	800817a <HAL_SAI_Init+0x6e>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_SAI_Init+0x5c>
 8008162:	2b01      	cmp	r3, #1
 8008164:	d003      	beq.n	800816e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008166:	e008      	b.n	800817a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
      break;
 800816c:	e006      	b.n	800817c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800816e:	2310      	movs	r3, #16
 8008170:	61fb      	str	r3, [r7, #28]
      break;
 8008172:	e003      	b.n	800817c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008174:	2320      	movs	r3, #32
 8008176:	61fb      	str	r3, [r7, #28]
      break;
 8008178:	e000      	b.n	800817c <HAL_SAI_Init+0x70>
      break;
 800817a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d81e      	bhi.n	80081c2 <HAL_SAI_Init+0xb6>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_SAI_Init+0x80>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	0800819d 	.word	0x0800819d
 8008190:	080081a3 	.word	0x080081a3
 8008194:	080081ab 	.word	0x080081ab
 8008198:	080081b3 	.word	0x080081b3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
    }
    break;
 80081a0:	e010      	b.n	80081c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80081a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a6:	617b      	str	r3, [r7, #20]
    }
    break;
 80081a8:	e00c      	b.n	80081c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80081aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081ae:	617b      	str	r3, [r7, #20]
    }
    break;
 80081b0:	e008      	b.n	80081c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80081b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081b6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	61fb      	str	r3, [r7, #28]
    }
    break;
 80081c0:	e000      	b.n	80081c4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80081c2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a85      	ldr	r2, [pc, #532]	; (80083e0 <HAL_SAI_Init+0x2d4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_SAI_Init+0xcc>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a84      	ldr	r2, [pc, #528]	; (80083e4 <HAL_SAI_Init+0x2d8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d103      	bne.n	80081e0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80081d8:	4a83      	ldr	r2, [pc, #524]	; (80083e8 <HAL_SAI_Init+0x2dc>)
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e002      	b.n	80081e6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80081e0:	4a82      	ldr	r2, [pc, #520]	; (80083ec <HAL_SAI_Init+0x2e0>)
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d04c      	beq.n	8008288 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a7a      	ldr	r2, [pc, #488]	; (80083e0 <HAL_SAI_Init+0x2d4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_SAI_Init+0xfa>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a78      	ldr	r2, [pc, #480]	; (80083e4 <HAL_SAI_Init+0x2d8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d104      	bne.n	8008210 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008206:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800820a:	f7ff fa69 	bl	80076e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800820e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a76      	ldr	r2, [pc, #472]	; (80083f0 <HAL_SAI_Init+0x2e4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_SAI_Init+0x118>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a75      	ldr	r2, [pc, #468]	; (80083f4 <HAL_SAI_Init+0x2e8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d104      	bne.n	800822e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008224:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008228:	f7ff fa5a 	bl	80076e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800822c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	025b      	lsls	r3, r3, #9
 8008240:	fbb2 f3f3 	udiv	r3, r2, r3
 8008244:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4a6b      	ldr	r2, [pc, #428]	; (80083f8 <HAL_SAI_Init+0x2ec>)
 800824a:	fba2 2303 	umull	r2, r3, r2, r3
 800824e:	08da      	lsrs	r2, r3, #3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	4b68      	ldr	r3, [pc, #416]	; (80083f8 <HAL_SAI_Init+0x2ec>)
 8008258:	fba3 2301 	umull	r2, r3, r3, r1
 800825c:	08da      	lsrs	r2, r3, #3
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	1aca      	subs	r2, r1, r3
 8008268:	2a08      	cmp	r2, #8
 800826a:	d904      	bls.n	8008276 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	2b04      	cmp	r3, #4
 800827c:	d104      	bne.n	8008288 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	085a      	lsrs	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_SAI_Init+0x18c>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d109      	bne.n	80082ac <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_SAI_Init+0x198>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e001      	b.n	80082a8 <HAL_SAI_Init+0x19c>
 80082a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	e008      	b.n	80082be <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d102      	bne.n	80082ba <HAL_SAI_Init+0x1ae>
 80082b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b8:	e000      	b.n	80082bc <HAL_SAI_Init+0x1b0>
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b4c      	ldr	r3, [pc, #304]	; (80083fc <HAL_SAI_Init+0x2f0>)
 80082ca:	400b      	ands	r3, r1
 80082cc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6819      	ldr	r1, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	431a      	orrs	r2, r3
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80082f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008302:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	051b      	lsls	r3, r3, #20
 800830a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b38      	ldr	r3, [pc, #224]	; (8008400 <HAL_SAI_Init+0x2f4>)
 8008320:	400b      	ands	r3, r1
 8008322:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6859      	ldr	r1, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6899      	ldr	r1, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4b2d      	ldr	r3, [pc, #180]	; (8008404 <HAL_SAI_Init+0x2f8>)
 800834e:	400b      	ands	r3, r1
 8008350:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6899      	ldr	r1, [r3, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008362:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008368:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800836e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008374:	3b01      	subs	r3, #1
 8008376:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008378:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68d9      	ldr	r1, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008390:	400b      	ands	r3, r1
 8008392:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68d9      	ldr	r1, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a8:	041b      	lsls	r3, r3, #16
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b0:	3b01      	subs	r3, #1
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40015804 	.word	0x40015804
 80083e4:	40015824 	.word	0x40015824
 80083e8:	40015800 	.word	0x40015800
 80083ec:	40015c00 	.word	0x40015c00
 80083f0:	40015c04 	.word	0x40015c04
 80083f4:	40015c24 	.word	0x40015c24
 80083f8:	cccccccd 	.word	0xcccccccd
 80083fc:	ff05c010 	.word	0xff05c010
 8008400:	ffff1ff0 	.word	0xffff1ff0
 8008404:	fff88000 	.word	0xfff88000

08008408 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008410:	4b17      	ldr	r3, [pc, #92]	; (8008470 <SAI_Disable+0x68>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a17      	ldr	r2, [pc, #92]	; (8008474 <SAI_Disable+0x6c>)
 8008416:	fba2 2303 	umull	r2, r3, r2, r3
 800841a:	0b1b      	lsrs	r3, r3, #12
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008432:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	1e5a      	subs	r2, r3, #1
 8008438:	60fa      	str	r2, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	72fb      	strb	r3, [r7, #11]
      break;
 8008452:	e006      	b.n	8008462 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e8      	bne.n	8008434 <SAI_Disable+0x2c>

  return status;
 8008462:	7afb      	ldrb	r3, [r7, #11]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	20000000 	.word	0x20000000
 8008474:	95cbec1b 	.word	0x95cbec1b

08008478 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e022      	b.n	80084d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7f9 feb5 	bl	800220c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2203      	movs	r2, #3
 80084a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f814 	bl	80084d8 <HAL_SD_InitCard>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e00a      	b.n	80084d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084d8:	b5b0      	push	{r4, r5, r7, lr}
 80084da:	b08e      	sub	sp, #56	; 0x38
 80084dc:	af04      	add	r7, sp, #16
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80084f4:	2376      	movs	r3, #118	; 0x76
 80084f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681d      	ldr	r5, [r3, #0]
 80084fc:	466c      	mov	r4, sp
 80084fe:	f107 0314 	add.w	r3, r7, #20
 8008502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008510:	4628      	mov	r0, r5
 8008512:	f002 ff09 	bl	800b328 <SDMMC_Init>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800851c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e059      	b.n	80085dc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008536:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f002 ff2c 	bl	800b39a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008550:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008552:	2002      	movs	r0, #2
 8008554:	f7fa fb68 	bl	8002c28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fe0f 	bl	800917c <SD_PowerON>
 800855e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e02e      	b.n	80085dc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fd2e 	bl	8008fe0 <SD_InitCard>
 8008584:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e01b      	b.n	80085dc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 ff87 	bl	800b4c0 <SDMMC_CmdBlockLength>
 80085b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a09      	ldr	r2, [pc, #36]	; (80085e4 <HAL_SD_InitCard+0x10c>)
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3728      	adds	r7, #40	; 0x28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bdb0      	pop	{r4, r5, r7, pc}
 80085e4:	004005ff 	.word	0x004005ff

080085e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	; 0x30
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0c3      	b.n	8008798 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b01      	cmp	r3, #1
 800861a:	f040 80bc 	bne.w	8008796 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862e:	429a      	cmp	r2, r3
 8008630:	d907      	bls.n	8008642 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e0aa      	b.n	8008798 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2203      	movs	r2, #3
 8008646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2200      	movs	r2, #0
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	4a4e      	ldr	r2, [pc, #312]	; (80087a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	4a4d      	ldr	r2, [pc, #308]	; (80087a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008670:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	2200      	movs	r2, #0
 8008678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	2200      	movs	r2, #0
 8008680:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3380      	adds	r3, #128	; 0x80
 80086a8:	4619      	mov	r1, r3
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	025b      	lsls	r3, r3, #9
 80086b0:	089b      	lsrs	r3, r3, #2
 80086b2:	f7fa ffb7 	bl	8003624 <HAL_DMA_Start_IT>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80086ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e055      	b.n	8008798 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0208 	orr.w	r2, r2, #8
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008700:	2b01      	cmp	r3, #1
 8008702:	d002      	beq.n	800870a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	025b      	lsls	r3, r3, #9
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800870a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800870e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	025b      	lsls	r3, r3, #9
 8008714:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008716:	2390      	movs	r3, #144	; 0x90
 8008718:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800871a:	2302      	movs	r3, #2
 800871c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800871e:	2300      	movs	r3, #0
 8008720:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008722:	2301      	movs	r3, #1
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f107 0210 	add.w	r2, r7, #16
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f002 fe99 	bl	800b468 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d90a      	bls.n	8008752 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2282      	movs	r2, #130	; 0x82
 8008740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fefd 	bl	800b548 <SDMMC_CmdReadMultiBlock>
 800874e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008750:	e009      	b.n	8008766 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2281      	movs	r2, #129	; 0x81
 8008756:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875e:	4618      	mov	r0, r3
 8008760:	f002 fed0 	bl	800b504 <SDMMC_CmdReadSingleBlock>
 8008764:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d012      	beq.n	8008792 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	431a      	orrs	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e002      	b.n	8008798 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008796:	2302      	movs	r3, #2
  }
}
 8008798:	4618      	mov	r0, r3
 800879a:	3730      	adds	r7, #48	; 0x30
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	08008ecb 	.word	0x08008ecb
 80087a4:	08008f3d 	.word	0x08008f3d
 80087a8:	004005ff 	.word	0x004005ff

080087ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	; 0x30
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d107      	bne.n	80087d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e0c6      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	f040 80bf 	bne.w	8008960 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d907      	bls.n	8008806 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e0ad      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2203      	movs	r2, #3
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 021a 	orr.w	r2, r2, #26
 8008824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	4a50      	ldr	r2, [pc, #320]	; (800896c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800882c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008832:	4a4f      	ldr	r2, [pc, #316]	; (8008970 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008834:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	2200      	movs	r2, #0
 800883c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008842:	2b01      	cmp	r3, #1
 8008844:	d002      	beq.n	800884c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	025b      	lsls	r3, r3, #9
 800884a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d90a      	bls.n	8008868 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	22a0      	movs	r2, #160	; 0xa0
 8008856:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800885e:	4618      	mov	r0, r3
 8008860:	f002 feb6 	bl	800b5d0 <SDMMC_CmdWriteMultiBlock>
 8008864:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008866:	e009      	b.n	800887c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2290      	movs	r2, #144	; 0x90
 800886c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008874:	4618      	mov	r0, r3
 8008876:	f002 fe89 	bl	800b58c <SDMMC_CmdWriteSingleBlock>
 800887a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d012      	beq.n	80088a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a3b      	ldr	r2, [pc, #236]	; (8008974 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	431a      	orrs	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e05c      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3380      	adds	r3, #128	; 0x80
 80088e8:	461a      	mov	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	089b      	lsrs	r3, r3, #2
 80088f0:	f7fa fe98 	bl	8003624 <HAL_DMA_Start_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01a      	beq.n	8008930 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 021a 	bic.w	r2, r2, #26
 8008908:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a19      	ldr	r2, [pc, #100]	; (8008974 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e018      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008934:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	025b      	lsls	r3, r3, #9
 800893a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800893c:	2390      	movs	r3, #144	; 0x90
 800893e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008944:	2300      	movs	r3, #0
 8008946:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008948:	2301      	movs	r3, #1
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f107 0210 	add.w	r2, r7, #16
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fd86 	bl	800b468 <SDMMC_ConfigData>

      return HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e000      	b.n	8008962 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008960:	2302      	movs	r3, #2
  }
}
 8008962:	4618      	mov	r0, r3
 8008964:	3730      	adds	r7, #48	; 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08008ea1 	.word	0x08008ea1
 8008970:	08008f3d 	.word	0x08008f3d
 8008974:	004005ff 	.word	0x004005ff

08008978 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899a:	0f9b      	lsrs	r3, r3, #30
 800899c:	b2da      	uxtb	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a6:	0e9b      	lsrs	r3, r3, #26
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b8:	0e1b      	lsrs	r3, r3, #24
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ec:	0d1b      	lsrs	r3, r3, #20
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	0c1b      	lsrs	r3, r3, #16
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 030f 	and.w	r3, r3, #15
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a0a:	0bdb      	lsrs	r3, r3, #15
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1c:	0b9b      	lsrs	r3, r3, #14
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2e:	0b5b      	lsrs	r3, r3, #13
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a40:	0b1b      	lsrs	r3, r3, #12
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d163      	bne.n	8008b24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a60:	009a      	lsls	r2, r3, #2
 8008a62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a66:	4013      	ands	r3, r2
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a6c:	0f92      	lsrs	r2, r2, #30
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a78:	0edb      	lsrs	r3, r3, #27
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	0e1b      	lsrs	r3, r3, #24
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9c:	0d5b      	lsrs	r3, r3, #21
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aae:	0c9b      	lsrs	r3, r3, #18
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac0:	0bdb      	lsrs	r3, r3, #15
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	7e1b      	ldrb	r3, [r3, #24]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008aee:	fb03 f202 	mul.w	r2, r3, r2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	7a1b      	ldrb	r3, [r3, #8]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	2201      	movs	r2, #1
 8008b02:	409a      	lsls	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b10:	0a52      	lsrs	r2, r2, #9
 8008b12:	fb03 f202 	mul.w	r2, r3, r2
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60
 8008b22:	e031      	b.n	8008b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d11d      	bne.n	8008b68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	3301      	adds	r3, #1
 8008b48:	029a      	lsls	r2, r3, #10
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	661a      	str	r2, [r3, #96]	; 0x60
 8008b66:	e00f      	b.n	8008b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a58      	ldr	r2, [pc, #352]	; (8008cd0 <HAL_SD_GetCardCSD+0x344>)
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e09d      	b.n	8008cc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	0b9b      	lsrs	r3, r3, #14
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	09db      	lsrs	r3, r3, #7
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	0fdb      	lsrs	r3, r3, #31
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	0f5b      	lsrs	r3, r3, #29
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	0e9b      	lsrs	r3, r3, #26
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	0d9b      	lsrs	r3, r3, #22
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	0d5b      	lsrs	r3, r3, #21
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	0bdb      	lsrs	r3, r3, #15
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	0b9b      	lsrs	r3, r3, #14
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	0b5b      	lsrs	r3, r3, #13
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	0b1b      	lsrs	r3, r3, #12
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	0a9b      	lsrs	r3, r3, #10
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	004005ff 	.word	0x004005ff

08008cd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d2c:	b5b0      	push	{r4, r5, r7, lr}
 8008d2e:	b08e      	sub	sp, #56	; 0x38
 8008d30:	af04      	add	r7, sp, #16
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d02e      	beq.n	8008daa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d106      	bne.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8008d60:	e029      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d68:	d10a      	bne.n	8008d80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fabc 	bl	80092e8 <SD_WideBus_Enable>
 8008d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d7e:	e01a      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 faf9 	bl	800937e <SD_WideBus_Disable>
 8008d8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38
 8008d9a:	e00c      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
 8008da8:	e005      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a26      	ldr	r2, [pc, #152]	; (8008e5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dd4:	e01f      	b.n	8008e16 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681d      	ldr	r5, [r3, #0]
 8008dfc:	466c      	mov	r4, sp
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e10:	4628      	mov	r0, r5
 8008e12:	f002 fa89 	bl	800b328 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 fb4e 	bl	800b4c0 <SDMMC_CmdBlockLength>
 8008e24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bdb0      	pop	{r4, r5, r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	004005ff 	.word	0x004005ff

08008e60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa10 	bl	8009298 <SD_SendStatus>
 8008e78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0a5b      	lsrs	r3, r3, #9
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e96:	693b      	ldr	r3, [r7, #16]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ebc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	2b82      	cmp	r3, #130	; 0x82
 8008ede:	d111      	bne.n	8008f04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f002 fb95 	bl	800b614 <SDMMC_CmdStopTransfer>
 8008eea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d008      	beq.n	8008f04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fd3a 	bl	8008978 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0208 	bic.w	r2, r2, #8
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f003 fae5 	bl	800c4fc <HAL_SD_RxCpltCallback>
#endif
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fa fbca 	bl	80036e4 <HAL_DMA_GetError>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d03e      	beq.n	8008fd4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d002      	beq.n	8008f72 <SD_DMAError+0x36>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d12d      	bne.n	8008fce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <SD_DMAError+0xa0>)
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7ff ff62 	bl	8008e60 <HAL_SD_GetCardState>
 8008f9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d002      	beq.n	8008faa <SD_DMAError+0x6e>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d10a      	bne.n	8008fc0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 fb30 	bl	800b614 <SDMMC_CmdStopTransfer>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff fcd2 	bl	8008978 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	004005ff 	.word	0x004005ff

08008fe0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fe0:	b5b0      	push	{r4, r5, r7, lr}
 8008fe2:	b094      	sub	sp, #80	; 0x50
 8008fe4:	af04      	add	r7, sp, #16
 8008fe6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 f9e0 	bl	800b3b6 <SDMMC_GetPowerState>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ffc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009000:	e0b8      	b.n	8009174 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009006:	2b03      	cmp	r3, #3
 8009008:	d02f      	beq.n	800906a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f002 fc0b 	bl	800b82a <SDMMC_CmdSendCID>
 8009014:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <SD_InitCard+0x40>
    {
      return errorstate;
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	e0a9      	b.n	8009174 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fa0b 	bl	800b442 <SDMMC_GetResponse>
 800902c:	4602      	mov	r2, r0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2104      	movs	r1, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f002 fa02 	bl	800b442 <SDMMC_GetResponse>
 800903e:	4602      	mov	r2, r0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2108      	movs	r1, #8
 800904a:	4618      	mov	r0, r3
 800904c:	f002 f9f9 	bl	800b442 <SDMMC_GetResponse>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	210c      	movs	r1, #12
 800905c:	4618      	mov	r0, r3
 800905e:	f002 f9f0 	bl	800b442 <SDMMC_GetResponse>
 8009062:	4602      	mov	r2, r0
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	2b03      	cmp	r3, #3
 8009070:	d00d      	beq.n	800908e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f107 020e 	add.w	r2, r7, #14
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f002 fc11 	bl	800b8a4 <SDMMC_CmdSetRelAdd>
 8009082:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <SD_InitCard+0xae>
    {
      return errorstate;
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908c:	e072      	b.n	8009174 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	2b03      	cmp	r3, #3
 8009094:	d036      	beq.n	8009104 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009096:	89fb      	ldrh	r3, [r7, #14]
 8009098:	461a      	mov	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	041b      	lsls	r3, r3, #16
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f002 fbdb 	bl	800b866 <SDMMC_CmdSendCSD>
 80090b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	e05b      	b.n	8009174 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f002 f9bd 	bl	800b442 <SDMMC_GetResponse>
 80090c8:	4602      	mov	r2, r0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2104      	movs	r1, #4
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 f9b4 	bl	800b442 <SDMMC_GetResponse>
 80090da:	4602      	mov	r2, r0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2108      	movs	r1, #8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f002 f9ab 	bl	800b442 <SDMMC_GetResponse>
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	210c      	movs	r1, #12
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 f9a2 	bl	800b442 <SDMMC_GetResponse>
 80090fe:	4602      	mov	r2, r0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2104      	movs	r1, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f002 f999 	bl	800b442 <SDMMC_GetResponse>
 8009110:	4603      	mov	r3, r0
 8009112:	0d1a      	lsrs	r2, r3, #20
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009118:	f107 0310 	add.w	r3, r7, #16
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff fc34 	bl	800898c <HAL_SD_GetCardCSD>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800912a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800912e:	e021      	b.n	8009174 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	2200      	movs	r2, #0
 800913c:	461c      	mov	r4, r3
 800913e:	4615      	mov	r5, r2
 8009140:	4622      	mov	r2, r4
 8009142:	462b      	mov	r3, r5
 8009144:	4608      	mov	r0, r1
 8009146:	f002 fa87 	bl	800b658 <SDMMC_CmdSelDesel>
 800914a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800914c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <SD_InitCard+0x176>
  {
    return errorstate;
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009154:	e00e      	b.n	8009174 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681d      	ldr	r5, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	466c      	mov	r4, sp
 800915e:	f103 0210 	add.w	r2, r3, #16
 8009162:	ca07      	ldmia	r2, {r0, r1, r2}
 8009164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009168:	3304      	adds	r3, #4
 800916a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800916c:	4628      	mov	r0, r5
 800916e:	f002 f8db 	bl	800b328 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3740      	adds	r7, #64	; 0x40
 8009178:	46bd      	mov	sp, r7
 800917a:	bdb0      	pop	{r4, r5, r7, pc}

0800917c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	2300      	movs	r3, #0
 800918e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fa82 	bl	800b69e <SDMMC_CmdGoIdleState>
 800919a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	e072      	b.n	800928c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f002 fa95 	bl	800b6da <SDMMC_CmdOperCond>
 80091b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00d      	beq.n	80091d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 fa6b 	bl	800b69e <SDMMC_CmdGoIdleState>
 80091c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <SD_PowerON+0x5e>
    {
      return errorstate;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	e05b      	b.n	800928c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d137      	bne.n	8009252 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fa95 	bl	800b718 <SDMMC_CmdAppCommand>
 80091ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d02d      	beq.n	8009252 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091fa:	e047      	b.n	800928c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f002 fa88 	bl	800b718 <SDMMC_CmdAppCommand>
 8009208:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <SD_PowerON+0x98>
    {
      return errorstate;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e03b      	b.n	800928c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	491e      	ldr	r1, [pc, #120]	; (8009294 <SD_PowerON+0x118>)
 800921a:	4618      	mov	r0, r3
 800921c:	f002 fa9e 	bl	800b75c <SDMMC_CmdAppOperCommand>
 8009220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009228:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800922c:	e02e      	b.n	800928c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2100      	movs	r1, #0
 8009234:	4618      	mov	r0, r3
 8009236:	f002 f904 	bl	800b442 <SDMMC_GetResponse>
 800923a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	0fdb      	lsrs	r3, r3, #31
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <SD_PowerON+0xcc>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <SD_PowerON+0xce>
 8009248:	2300      	movs	r3, #0
 800924a:	613b      	str	r3, [r7, #16]

    count++;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3301      	adds	r3, #1
 8009250:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009258:	4293      	cmp	r3, r2
 800925a:	d802      	bhi.n	8009262 <SD_PowerON+0xe6>
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0cc      	beq.n	80091fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009268:	4293      	cmp	r3, r2
 800926a:	d902      	bls.n	8009272 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800926c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009270:	e00c      	b.n	800928c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	645a      	str	r2, [r3, #68]	; 0x44
 8009282:	e002      	b.n	800928a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	c1100000 	.word	0xc1100000

08009298 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092ac:	e018      	b.n	80092e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f002 fb13 	bl	800b8e6 <SDMMC_CmdSendStatus>
 80092c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <SD_SendStatus+0x34>
  {
    return errorstate;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	e009      	b.n	80092e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f002 f8b5 	bl	800b442 <SDMMC_GetResponse>
 80092d8:	4602      	mov	r2, r0
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	2300      	movs	r3, #0
 80092f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f002 f89f 	bl	800b442 <SDMMC_GetResponse>
 8009304:	4603      	mov	r3, r0
 8009306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800930a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800930e:	d102      	bne.n	8009316 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009314:	e02f      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f879 	bl	8009414 <SD_FindSCR>
 8009322:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	e023      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01c      	beq.n	8009372 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f002 f9e7 	bl	800b718 <SDMMC_CmdAppCommand>
 800934a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	e00f      	b.n	8009376 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2102      	movs	r1, #2
 800935c:	4618      	mov	r0, r3
 800935e:	f002 fa21 	bl	800b7a4 <SDMMC_CmdBusWidth>
 8009362:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	e003      	b.n	8009376 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	e001      	b.n	8009376 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	2300      	movs	r3, #0
 800938c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f002 f854 	bl	800b442 <SDMMC_GetResponse>
 800939a:	4603      	mov	r3, r0
 800939c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093a4:	d102      	bne.n	80093ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093aa:	e02f      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f82e 	bl	8009414 <SD_FindSCR>
 80093b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	e023      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01c      	beq.n	8009408 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f002 f99c 	bl	800b718 <SDMMC_CmdAppCommand>
 80093e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	e00f      	b.n	800940c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f002 f9d6 	bl	800b7a4 <SDMMC_CmdBusWidth>
 80093f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e003      	b.n	800940c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009404:	2300      	movs	r3, #0
 8009406:	e001      	b.n	800940c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009408:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009414:	b590      	push	{r4, r7, lr}
 8009416:	b08f      	sub	sp, #60	; 0x3c
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800941e:	f7f9 fbf7 	bl	8002c10 <HAL_GetTick>
 8009422:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009428:	2300      	movs	r3, #0
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2108      	movs	r1, #8
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f840 	bl	800b4c0 <SDMMC_CmdBlockLength>
 8009440:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	e0b2      	b.n	80095b2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f002 f95d 	bl	800b718 <SDMMC_CmdAppCommand>
 800945e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	e0a3      	b.n	80095b2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800946a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800946e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009470:	2308      	movs	r3, #8
 8009472:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009474:	2330      	movs	r3, #48	; 0x30
 8009476:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009478:	2302      	movs	r3, #2
 800947a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800947c:	2300      	movs	r3, #0
 800947e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009480:	2301      	movs	r3, #1
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f107 0210 	add.w	r2, r7, #16
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f001 ffea 	bl	800b468 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f002 f9a5 	bl	800b7e8 <SDMMC_CmdSendSCR>
 800949e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02a      	beq.n	80094fc <SD_FindSCR+0xe8>
  {
    return errorstate;
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	e083      	b.n	80095b2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6819      	ldr	r1, [r3, #0]
 80094bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	f107 0208 	add.w	r2, r7, #8
 80094c4:	18d4      	adds	r4, r2, r3
 80094c6:	4608      	mov	r0, r1
 80094c8:	f001 ff5a 	bl	800b380 <SDMMC_ReadFIFO>
 80094cc:	4603      	mov	r3, r0
 80094ce:	6023      	str	r3, [r4, #0]
      index++;
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	3301      	adds	r3, #1
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
 80094d6:	e006      	b.n	80094e6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d012      	beq.n	800950c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094e6:	f7f9 fb93 	bl	8002c10 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094f4:	d102      	bne.n	80094fc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094fa:	e05a      	b.n	80095b2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0cf      	beq.n	80094aa <SD_FindSCR+0x96>
 800950a:	e000      	b.n	800950e <SD_FindSCR+0xfa>
      break;
 800950c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2208      	movs	r2, #8
 8009522:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009524:	2308      	movs	r3, #8
 8009526:	e044      	b.n	80095b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2202      	movs	r2, #2
 800953c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	e037      	b.n	80095b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2220      	movs	r2, #32
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009558:	2320      	movs	r3, #32
 800955a:	e02a      	b.n	80095b2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f240 523a 	movw	r2, #1338	; 0x53a
 8009564:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	061a      	lsls	r2, r3, #24
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009572:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800957c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	0e1b      	lsrs	r3, r3, #24
 8009582:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	601a      	str	r2, [r3, #0]
    scr++;
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	3304      	adds	r3, #4
 800958c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	061a      	lsls	r2, r3, #24
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800959a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	0a1b      	lsrs	r3, r3, #8
 80095a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	0e1b      	lsrs	r3, r3, #24
 80095aa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	373c      	adds	r7, #60	; 0x3c
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd90      	pop	{r4, r7, pc}

080095ba <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e025      	b.n	800961a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7f9 f98c 	bl	8002900 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	f001 fdce 	bl	800b19c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	461a      	mov	r2, r3
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	f001 fe22 	bl	800b254 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e04c      	b.n	80096d0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7f8 fe40 	bl	80022d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0203 	bic.w	r2, r2, #3
 8009666:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4b19      	ldr	r3, [pc, #100]	; (80096d8 <HAL_SPDIFRX_Init+0xb4>)
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009680:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009686:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800968c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009692:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009698:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800969e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80096a4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80096aa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80096b0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	fff88407 	.word	0xfff88407

080096dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e049      	b.n	8009782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f8 fe48 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f000 fc2a 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	d001      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e054      	b.n	800984e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0201 	orr.w	r2, r2, #1
 80097ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a26      	ldr	r2, [pc, #152]	; (800985c <HAL_TIM_Base_Start_IT+0xd0>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d022      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ce:	d01d      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <HAL_TIM_Base_Start_IT+0xd4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d018      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a21      	ldr	r2, [pc, #132]	; (8009864 <HAL_TIM_Base_Start_IT+0xd8>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d013      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <HAL_TIM_Base_Start_IT+0xdc>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00e      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a1e      	ldr	r2, [pc, #120]	; (800986c <HAL_TIM_Base_Start_IT+0xe0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d009      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a1c      	ldr	r2, [pc, #112]	; (8009870 <HAL_TIM_Base_Start_IT+0xe4>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d004      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x80>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <HAL_TIM_Base_Start_IT+0xe8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d115      	bne.n	8009838 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	4b19      	ldr	r3, [pc, #100]	; (8009878 <HAL_TIM_Base_Start_IT+0xec>)
 8009814:	4013      	ands	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b06      	cmp	r3, #6
 800981c:	d015      	beq.n	800984a <HAL_TIM_Base_Start_IT+0xbe>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009824:	d011      	beq.n	800984a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009836:	e008      	b.n	800984a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0201 	orr.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	e000      	b.n	800984c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800984a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40010000 	.word	0x40010000
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
 800986c:	40010400 	.word	0x40010400
 8009870:	40014000 	.word	0x40014000
 8009874:	40001800 	.word	0x40001800
 8009878:	00010007 	.word	0x00010007

0800987c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e049      	b.n	8009922 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7f8 fde6 	bl	8002474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4619      	mov	r1, r3
 80098ba:	4610      	mov	r0, r2
 80098bc:	f000 fb5a 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b02      	cmp	r3, #2
 800993e:	d122      	bne.n	8009986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b02      	cmp	r3, #2
 800994c:	d11b      	bne.n	8009986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0202 	mvn.w	r2, #2
 8009956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	f003 0303 	and.w	r3, r3, #3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fae3 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009972:	e005      	b.n	8009980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fad5 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fae6 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b04      	cmp	r3, #4
 8009992:	d122      	bne.n	80099da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d11b      	bne.n	80099da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0204 	mvn.w	r2, #4
 80099aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fab9 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 80099c6:	e005      	b.n	80099d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 faab 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fabc 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d122      	bne.n	8009a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d11b      	bne.n	8009a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f06f 0208 	mvn.w	r2, #8
 80099fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2204      	movs	r2, #4
 8009a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa8f 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009a1a:	e005      	b.n	8009a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fa81 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa92 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f003 0310 	and.w	r3, r3, #16
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d122      	bne.n	8009a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b10      	cmp	r3, #16
 8009a48:	d11b      	bne.n	8009a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f06f 0210 	mvn.w	r2, #16
 8009a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2208      	movs	r2, #8
 8009a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa65 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009a6e:	e005      	b.n	8009a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa57 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa68 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d10e      	bne.n	8009aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d107      	bne.n	8009aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f06f 0201 	mvn.w	r2, #1
 8009aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7f7 ff4b 	bl	8001944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab8:	2b80      	cmp	r3, #128	; 0x80
 8009aba:	d10e      	bne.n	8009ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	2b80      	cmp	r3, #128	; 0x80
 8009ac8:	d107      	bne.n	8009ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fefb 	bl	800a8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae8:	d10e      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af4:	2b80      	cmp	r3, #128	; 0x80
 8009af6:	d107      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 feee 	bl	800a8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b12:	2b40      	cmp	r3, #64	; 0x40
 8009b14:	d10e      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d107      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa16 	bl	8009f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d10e      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d107      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f06f 0220 	mvn.w	r2, #32
 8009b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 feae 	bl	800a8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e0ff      	b.n	8009d86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b14      	cmp	r3, #20
 8009b92:	f200 80f0 	bhi.w	8009d76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009d77 	.word	0x08009d77
 8009ba4:	08009d77 	.word	0x08009d77
 8009ba8:	08009d77 	.word	0x08009d77
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009d77 	.word	0x08009d77
 8009bb4:	08009d77 	.word	0x08009d77
 8009bb8:	08009d77 	.word	0x08009d77
 8009bbc:	08009c73 	.word	0x08009c73
 8009bc0:	08009d77 	.word	0x08009d77
 8009bc4:	08009d77 	.word	0x08009d77
 8009bc8:	08009d77 	.word	0x08009d77
 8009bcc:	08009cb3 	.word	0x08009cb3
 8009bd0:	08009d77 	.word	0x08009d77
 8009bd4:	08009d77 	.word	0x08009d77
 8009bd8:	08009d77 	.word	0x08009d77
 8009bdc:	08009cf5 	.word	0x08009cf5
 8009be0:	08009d77 	.word	0x08009d77
 8009be4:	08009d77 	.word	0x08009d77
 8009be8:	08009d77 	.word	0x08009d77
 8009bec:	08009d35 	.word	0x08009d35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fa5c 	bl	800a0b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0208 	orr.w	r2, r2, #8
 8009c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0204 	bic.w	r2, r2, #4
 8009c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6999      	ldr	r1, [r3, #24]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	691a      	ldr	r2, [r3, #16]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	619a      	str	r2, [r3, #24]
      break;
 8009c2e:	e0a5      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 faae 	bl	800a198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699a      	ldr	r2, [r3, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6999      	ldr	r1, [r3, #24]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	021a      	lsls	r2, r3, #8
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	619a      	str	r2, [r3, #24]
      break;
 8009c70:	e084      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68b9      	ldr	r1, [r7, #8]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fb05 	bl	800a288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69da      	ldr	r2, [r3, #28]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0208 	orr.w	r2, r2, #8
 8009c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0204 	bic.w	r2, r2, #4
 8009c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	69d9      	ldr	r1, [r3, #28]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	61da      	str	r2, [r3, #28]
      break;
 8009cb0:	e064      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fb5b 	bl	800a374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69da      	ldr	r2, [r3, #28]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69d9      	ldr	r1, [r3, #28]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	021a      	lsls	r2, r3, #8
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	61da      	str	r2, [r3, #28]
      break;
 8009cf2:	e043      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fb92 	bl	800a424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0208 	orr.w	r2, r2, #8
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0204 	bic.w	r2, r2, #4
 8009d1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d32:	e023      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fbc4 	bl	800a4c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	021a      	lsls	r2, r3, #8
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d74:	e002      	b.n	8009d7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
      break;
 8009d7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop

08009d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d101      	bne.n	8009dac <HAL_TIM_ConfigClockSource+0x1c>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e0b4      	b.n	8009f16 <HAL_TIM_ConfigClockSource+0x186>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	4b56      	ldr	r3, [pc, #344]	; (8009f20 <HAL_TIM_ConfigClockSource+0x190>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de4:	d03e      	beq.n	8009e64 <HAL_TIM_ConfigClockSource+0xd4>
 8009de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dea:	f200 8087 	bhi.w	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df2:	f000 8086 	beq.w	8009f02 <HAL_TIM_ConfigClockSource+0x172>
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d87f      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009dfc:	2b70      	cmp	r3, #112	; 0x70
 8009dfe:	d01a      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0xa6>
 8009e00:	2b70      	cmp	r3, #112	; 0x70
 8009e02:	d87b      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e04:	2b60      	cmp	r3, #96	; 0x60
 8009e06:	d050      	beq.n	8009eaa <HAL_TIM_ConfigClockSource+0x11a>
 8009e08:	2b60      	cmp	r3, #96	; 0x60
 8009e0a:	d877      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b50      	cmp	r3, #80	; 0x50
 8009e0e:	d03c      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0xfa>
 8009e10:	2b50      	cmp	r3, #80	; 0x50
 8009e12:	d873      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e14:	2b40      	cmp	r3, #64	; 0x40
 8009e16:	d058      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x13a>
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d86f      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e1c:	2b30      	cmp	r3, #48	; 0x30
 8009e1e:	d064      	beq.n	8009eea <HAL_TIM_ConfigClockSource+0x15a>
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	d86b      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d060      	beq.n	8009eea <HAL_TIM_ConfigClockSource+0x15a>
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d867      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d05c      	beq.n	8009eea <HAL_TIM_ConfigClockSource+0x15a>
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d05a      	beq.n	8009eea <HAL_TIM_ConfigClockSource+0x15a>
 8009e34:	e062      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e46:	f000 fc0d 	bl	800a664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	609a      	str	r2, [r3, #8]
      break;
 8009e62:	e04f      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e74:	f000 fbf6 	bl	800a664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e86:	609a      	str	r2, [r3, #8]
      break;
 8009e88:	e03c      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e96:	461a      	mov	r2, r3
 8009e98:	f000 fb6a 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2150      	movs	r1, #80	; 0x50
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fbc3 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009ea8:	e02c      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f000 fb89 	bl	800a5ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2160      	movs	r1, #96	; 0x60
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fbb3 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009ec8:	e01c      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f000 fb4a 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2140      	movs	r1, #64	; 0x40
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fba3 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009ee8:	e00c      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	f000 fb9a 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009efa:	e003      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
      break;
 8009f00:	e000      	b.n	8009f04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	fffeff88 	.word	0xfffeff88

08009f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a40      	ldr	r2, [pc, #256]	; (800a088 <TIM_Base_SetConfig+0x114>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <TIM_Base_SetConfig+0x40>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f92:	d00f      	beq.n	8009fb4 <TIM_Base_SetConfig+0x40>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a3d      	ldr	r2, [pc, #244]	; (800a08c <TIM_Base_SetConfig+0x118>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00b      	beq.n	8009fb4 <TIM_Base_SetConfig+0x40>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a3c      	ldr	r2, [pc, #240]	; (800a090 <TIM_Base_SetConfig+0x11c>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d007      	beq.n	8009fb4 <TIM_Base_SetConfig+0x40>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a3b      	ldr	r2, [pc, #236]	; (800a094 <TIM_Base_SetConfig+0x120>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_Base_SetConfig+0x40>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a3a      	ldr	r2, [pc, #232]	; (800a098 <TIM_Base_SetConfig+0x124>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d108      	bne.n	8009fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a2f      	ldr	r2, [pc, #188]	; (800a088 <TIM_Base_SetConfig+0x114>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d02b      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd4:	d027      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a2c      	ldr	r2, [pc, #176]	; (800a08c <TIM_Base_SetConfig+0x118>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d023      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a2b      	ldr	r2, [pc, #172]	; (800a090 <TIM_Base_SetConfig+0x11c>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d01f      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a2a      	ldr	r2, [pc, #168]	; (800a094 <TIM_Base_SetConfig+0x120>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d01b      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a29      	ldr	r2, [pc, #164]	; (800a098 <TIM_Base_SetConfig+0x124>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d017      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a28      	ldr	r2, [pc, #160]	; (800a09c <TIM_Base_SetConfig+0x128>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d013      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a27      	ldr	r2, [pc, #156]	; (800a0a0 <TIM_Base_SetConfig+0x12c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d00f      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a26      	ldr	r2, [pc, #152]	; (800a0a4 <TIM_Base_SetConfig+0x130>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00b      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a25      	ldr	r2, [pc, #148]	; (800a0a8 <TIM_Base_SetConfig+0x134>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d007      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a24      	ldr	r2, [pc, #144]	; (800a0ac <TIM_Base_SetConfig+0x138>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d003      	beq.n	800a026 <TIM_Base_SetConfig+0xb2>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a23      	ldr	r2, [pc, #140]	; (800a0b0 <TIM_Base_SetConfig+0x13c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d108      	bne.n	800a038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4313      	orrs	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a0a      	ldr	r2, [pc, #40]	; (800a088 <TIM_Base_SetConfig+0x114>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d003      	beq.n	800a06c <TIM_Base_SetConfig+0xf8>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a0c      	ldr	r2, [pc, #48]	; (800a098 <TIM_Base_SetConfig+0x124>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d103      	bne.n	800a074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	691a      	ldr	r2, [r3, #16]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	615a      	str	r2, [r3, #20]
}
 800a07a:	bf00      	nop
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	40010000 	.word	0x40010000
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40000c00 	.word	0x40000c00
 800a098:	40010400 	.word	0x40010400
 800a09c:	40014000 	.word	0x40014000
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800
 800a0a8:	40001800 	.word	0x40001800
 800a0ac:	40001c00 	.word	0x40001c00
 800a0b0:	40002000 	.word	0x40002000

0800a0b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	f023 0201 	bic.w	r2, r3, #1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	4b2b      	ldr	r3, [pc, #172]	; (800a18c <TIM_OC1_SetConfig+0xd8>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f023 0303 	bic.w	r3, r3, #3
 800a0ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f023 0302 	bic.w	r3, r3, #2
 800a0fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a21      	ldr	r2, [pc, #132]	; (800a190 <TIM_OC1_SetConfig+0xdc>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_OC1_SetConfig+0x64>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a20      	ldr	r2, [pc, #128]	; (800a194 <TIM_OC1_SetConfig+0xe0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d10c      	bne.n	800a132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f023 0308 	bic.w	r3, r3, #8
 800a11e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f023 0304 	bic.w	r3, r3, #4
 800a130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a16      	ldr	r2, [pc, #88]	; (800a190 <TIM_OC1_SetConfig+0xdc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <TIM_OC1_SetConfig+0x8e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a15      	ldr	r2, [pc, #84]	; (800a194 <TIM_OC1_SetConfig+0xe0>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d111      	bne.n	800a166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	4313      	orrs	r3, r2
 800a15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	4313      	orrs	r3, r2
 800a164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	621a      	str	r2, [r3, #32]
}
 800a180:	bf00      	nop
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	fffeff8f 	.word	0xfffeff8f
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400

0800a198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f023 0210 	bic.w	r2, r3, #16
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4b2e      	ldr	r3, [pc, #184]	; (800a27c <TIM_OC2_SetConfig+0xe4>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f023 0320 	bic.w	r3, r3, #32
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a23      	ldr	r2, [pc, #140]	; (800a280 <TIM_OC2_SetConfig+0xe8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC2_SetConfig+0x68>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a22      	ldr	r2, [pc, #136]	; (800a284 <TIM_OC2_SetConfig+0xec>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10d      	bne.n	800a21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a18      	ldr	r2, [pc, #96]	; (800a280 <TIM_OC2_SetConfig+0xe8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d003      	beq.n	800a22c <TIM_OC2_SetConfig+0x94>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a17      	ldr	r2, [pc, #92]	; (800a284 <TIM_OC2_SetConfig+0xec>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d113      	bne.n	800a254 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a23a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	4313      	orrs	r3, r2
 800a246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	621a      	str	r2, [r3, #32]
}
 800a26e:	bf00      	nop
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	feff8fff 	.word	0xfeff8fff
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400

0800a288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4b2d      	ldr	r3, [pc, #180]	; (800a368 <TIM_OC3_SetConfig+0xe0>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0303 	bic.w	r3, r3, #3
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a22      	ldr	r2, [pc, #136]	; (800a36c <TIM_OC3_SetConfig+0xe4>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d003      	beq.n	800a2ee <TIM_OC3_SetConfig+0x66>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a21      	ldr	r2, [pc, #132]	; (800a370 <TIM_OC3_SetConfig+0xe8>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d10d      	bne.n	800a30a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a17      	ldr	r2, [pc, #92]	; (800a36c <TIM_OC3_SetConfig+0xe4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d003      	beq.n	800a31a <TIM_OC3_SetConfig+0x92>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a16      	ldr	r2, [pc, #88]	; (800a370 <TIM_OC3_SetConfig+0xe8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d113      	bne.n	800a342 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	621a      	str	r2, [r3, #32]
}
 800a35c:	bf00      	nop
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	fffeff8f 	.word	0xfffeff8f
 800a36c:	40010000 	.word	0x40010000
 800a370:	40010400 	.word	0x40010400

0800a374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <TIM_OC4_SetConfig+0xa4>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	021b      	lsls	r3, r3, #8
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	031b      	lsls	r3, r3, #12
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a13      	ldr	r2, [pc, #76]	; (800a41c <TIM_OC4_SetConfig+0xa8>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d003      	beq.n	800a3dc <TIM_OC4_SetConfig+0x68>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a12      	ldr	r2, [pc, #72]	; (800a420 <TIM_OC4_SetConfig+0xac>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d109      	bne.n	800a3f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	019b      	lsls	r3, r3, #6
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	feff8fff 	.word	0xfeff8fff
 800a41c:	40010000 	.word	0x40010000
 800a420:	40010400 	.word	0x40010400

0800a424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <TIM_OC5_SetConfig+0x98>)
 800a450:	4013      	ands	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	041b      	lsls	r3, r3, #16
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a12      	ldr	r2, [pc, #72]	; (800a4c0 <TIM_OC5_SetConfig+0x9c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d003      	beq.n	800a482 <TIM_OC5_SetConfig+0x5e>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a11      	ldr	r2, [pc, #68]	; (800a4c4 <TIM_OC5_SetConfig+0xa0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d109      	bne.n	800a496 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a488:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	021b      	lsls	r3, r3, #8
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	4313      	orrs	r3, r2
 800a494:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	621a      	str	r2, [r3, #32]
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	fffeff8f 	.word	0xfffeff8f
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <TIM_OC6_SetConfig+0x9c>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a50a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	051b      	lsls	r3, r3, #20
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <TIM_OC6_SetConfig+0xa0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC6_SetConfig+0x60>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a12      	ldr	r2, [pc, #72]	; (800a56c <TIM_OC6_SetConfig+0xa4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a52e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	029b      	lsls	r3, r3, #10
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	feff8fff 	.word	0xfeff8fff
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400

0800a570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	f023 0201 	bic.w	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a59a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f023 030a 	bic.w	r3, r3, #10
 800a5ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b087      	sub	sp, #28
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f023 0210 	bic.w	r2, r3, #16
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	031b      	lsls	r3, r3, #12
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4313      	orrs	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a60a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	4313      	orrs	r3, r2
 800a614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	621a      	str	r2, [r3, #32]
}
 800a622:	bf00      	nop
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f043 0307 	orr.w	r3, r3, #7
 800a650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	609a      	str	r2, [r3, #8]
}
 800a658:	bf00      	nop
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a67e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	431a      	orrs	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	609a      	str	r2, [r3, #8]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e06d      	b.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d108      	bne.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a708:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a20      	ldr	r2, [pc, #128]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d022      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72e:	d01d      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1d      	ldr	r2, [pc, #116]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d018      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00e      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d10c      	bne.n	800a786 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40000400 	.word	0x40000400
 800a7b0:	40000800 	.word	0x40000800
 800a7b4:	40000c00 	.word	0x40000c00
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40001800 	.word	0x40001800

0800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e065      	b.n	800a8a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a16      	ldr	r2, [pc, #88]	; (800a8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d004      	beq.n	800a86a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a14      	ldr	r2, [pc, #80]	; (800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d115      	bne.n	800a896 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	051b      	lsls	r3, r3, #20
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e040      	b.n	800a98c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f7 fe98 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2224      	movs	r2, #36	; 0x24
 800a924:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0201 	bic.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f82c 	bl	800a994 <UART_SetConfig>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e022      	b.n	800a98c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fa84 	bl	800ae5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fb0b 	bl	800afa0 <UART_CheckIdleState>
 800a98a:	4603      	mov	r3, r0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4ba6      	ldr	r3, [pc, #664]	; (800ac58 <UART_SetConfig+0x2c4>)
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	6979      	ldr	r1, [r7, #20]
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a94      	ldr	r2, [pc, #592]	; (800ac5c <UART_SetConfig+0x2c8>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d120      	bne.n	800aa52 <UART_SetConfig+0xbe>
 800aa10:	4b93      	ldr	r3, [pc, #588]	; (800ac60 <UART_SetConfig+0x2cc>)
 800aa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d816      	bhi.n	800aa4c <UART_SetConfig+0xb8>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <UART_SetConfig+0x90>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa35 	.word	0x0800aa35
 800aa28:	0800aa41 	.word	0x0800aa41
 800aa2c:	0800aa3b 	.word	0x0800aa3b
 800aa30:	0800aa47 	.word	0x0800aa47
 800aa34:	2301      	movs	r3, #1
 800aa36:	77fb      	strb	r3, [r7, #31]
 800aa38:	e150      	b.n	800acdc <UART_SetConfig+0x348>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	77fb      	strb	r3, [r7, #31]
 800aa3e:	e14d      	b.n	800acdc <UART_SetConfig+0x348>
 800aa40:	2304      	movs	r3, #4
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e14a      	b.n	800acdc <UART_SetConfig+0x348>
 800aa46:	2308      	movs	r3, #8
 800aa48:	77fb      	strb	r3, [r7, #31]
 800aa4a:	e147      	b.n	800acdc <UART_SetConfig+0x348>
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e144      	b.n	800acdc <UART_SetConfig+0x348>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a83      	ldr	r2, [pc, #524]	; (800ac64 <UART_SetConfig+0x2d0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d132      	bne.n	800aac2 <UART_SetConfig+0x12e>
 800aa5c:	4b80      	ldr	r3, [pc, #512]	; (800ac60 <UART_SetConfig+0x2cc>)
 800aa5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa62:	f003 030c 	and.w	r3, r3, #12
 800aa66:	2b0c      	cmp	r3, #12
 800aa68:	d828      	bhi.n	800aabc <UART_SetConfig+0x128>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <UART_SetConfig+0xdc>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aaa5 	.word	0x0800aaa5
 800aa74:	0800aabd 	.word	0x0800aabd
 800aa78:	0800aabd 	.word	0x0800aabd
 800aa7c:	0800aabd 	.word	0x0800aabd
 800aa80:	0800aab1 	.word	0x0800aab1
 800aa84:	0800aabd 	.word	0x0800aabd
 800aa88:	0800aabd 	.word	0x0800aabd
 800aa8c:	0800aabd 	.word	0x0800aabd
 800aa90:	0800aaab 	.word	0x0800aaab
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800aab7 	.word	0x0800aab7
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	77fb      	strb	r3, [r7, #31]
 800aaa8:	e118      	b.n	800acdc <UART_SetConfig+0x348>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	77fb      	strb	r3, [r7, #31]
 800aaae:	e115      	b.n	800acdc <UART_SetConfig+0x348>
 800aab0:	2304      	movs	r3, #4
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	e112      	b.n	800acdc <UART_SetConfig+0x348>
 800aab6:	2308      	movs	r3, #8
 800aab8:	77fb      	strb	r3, [r7, #31]
 800aaba:	e10f      	b.n	800acdc <UART_SetConfig+0x348>
 800aabc:	2310      	movs	r3, #16
 800aabe:	77fb      	strb	r3, [r7, #31]
 800aac0:	e10c      	b.n	800acdc <UART_SetConfig+0x348>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a68      	ldr	r2, [pc, #416]	; (800ac68 <UART_SetConfig+0x2d4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d120      	bne.n	800ab0e <UART_SetConfig+0x17a>
 800aacc:	4b64      	ldr	r3, [pc, #400]	; (800ac60 <UART_SetConfig+0x2cc>)
 800aace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aad6:	2b30      	cmp	r3, #48	; 0x30
 800aad8:	d013      	beq.n	800ab02 <UART_SetConfig+0x16e>
 800aada:	2b30      	cmp	r3, #48	; 0x30
 800aadc:	d814      	bhi.n	800ab08 <UART_SetConfig+0x174>
 800aade:	2b20      	cmp	r3, #32
 800aae0:	d009      	beq.n	800aaf6 <UART_SetConfig+0x162>
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	d810      	bhi.n	800ab08 <UART_SetConfig+0x174>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <UART_SetConfig+0x15c>
 800aaea:	2b10      	cmp	r3, #16
 800aaec:	d006      	beq.n	800aafc <UART_SetConfig+0x168>
 800aaee:	e00b      	b.n	800ab08 <UART_SetConfig+0x174>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	77fb      	strb	r3, [r7, #31]
 800aaf4:	e0f2      	b.n	800acdc <UART_SetConfig+0x348>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e0ef      	b.n	800acdc <UART_SetConfig+0x348>
 800aafc:	2304      	movs	r3, #4
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e0ec      	b.n	800acdc <UART_SetConfig+0x348>
 800ab02:	2308      	movs	r3, #8
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e0e9      	b.n	800acdc <UART_SetConfig+0x348>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e0e6      	b.n	800acdc <UART_SetConfig+0x348>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a56      	ldr	r2, [pc, #344]	; (800ac6c <UART_SetConfig+0x2d8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d120      	bne.n	800ab5a <UART_SetConfig+0x1c6>
 800ab18:	4b51      	ldr	r3, [pc, #324]	; (800ac60 <UART_SetConfig+0x2cc>)
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab22:	2bc0      	cmp	r3, #192	; 0xc0
 800ab24:	d013      	beq.n	800ab4e <UART_SetConfig+0x1ba>
 800ab26:	2bc0      	cmp	r3, #192	; 0xc0
 800ab28:	d814      	bhi.n	800ab54 <UART_SetConfig+0x1c0>
 800ab2a:	2b80      	cmp	r3, #128	; 0x80
 800ab2c:	d009      	beq.n	800ab42 <UART_SetConfig+0x1ae>
 800ab2e:	2b80      	cmp	r3, #128	; 0x80
 800ab30:	d810      	bhi.n	800ab54 <UART_SetConfig+0x1c0>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <UART_SetConfig+0x1a8>
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	d006      	beq.n	800ab48 <UART_SetConfig+0x1b4>
 800ab3a:	e00b      	b.n	800ab54 <UART_SetConfig+0x1c0>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	e0cc      	b.n	800acdc <UART_SetConfig+0x348>
 800ab42:	2302      	movs	r3, #2
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e0c9      	b.n	800acdc <UART_SetConfig+0x348>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e0c6      	b.n	800acdc <UART_SetConfig+0x348>
 800ab4e:	2308      	movs	r3, #8
 800ab50:	77fb      	strb	r3, [r7, #31]
 800ab52:	e0c3      	b.n	800acdc <UART_SetConfig+0x348>
 800ab54:	2310      	movs	r3, #16
 800ab56:	77fb      	strb	r3, [r7, #31]
 800ab58:	e0c0      	b.n	800acdc <UART_SetConfig+0x348>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a44      	ldr	r2, [pc, #272]	; (800ac70 <UART_SetConfig+0x2dc>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d125      	bne.n	800abb0 <UART_SetConfig+0x21c>
 800ab64:	4b3e      	ldr	r3, [pc, #248]	; (800ac60 <UART_SetConfig+0x2cc>)
 800ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab72:	d017      	beq.n	800aba4 <UART_SetConfig+0x210>
 800ab74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab78:	d817      	bhi.n	800abaa <UART_SetConfig+0x216>
 800ab7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab7e:	d00b      	beq.n	800ab98 <UART_SetConfig+0x204>
 800ab80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab84:	d811      	bhi.n	800abaa <UART_SetConfig+0x216>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <UART_SetConfig+0x1fe>
 800ab8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab8e:	d006      	beq.n	800ab9e <UART_SetConfig+0x20a>
 800ab90:	e00b      	b.n	800abaa <UART_SetConfig+0x216>
 800ab92:	2300      	movs	r3, #0
 800ab94:	77fb      	strb	r3, [r7, #31]
 800ab96:	e0a1      	b.n	800acdc <UART_SetConfig+0x348>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e09e      	b.n	800acdc <UART_SetConfig+0x348>
 800ab9e:	2304      	movs	r3, #4
 800aba0:	77fb      	strb	r3, [r7, #31]
 800aba2:	e09b      	b.n	800acdc <UART_SetConfig+0x348>
 800aba4:	2308      	movs	r3, #8
 800aba6:	77fb      	strb	r3, [r7, #31]
 800aba8:	e098      	b.n	800acdc <UART_SetConfig+0x348>
 800abaa:	2310      	movs	r3, #16
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e095      	b.n	800acdc <UART_SetConfig+0x348>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a2f      	ldr	r2, [pc, #188]	; (800ac74 <UART_SetConfig+0x2e0>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d125      	bne.n	800ac06 <UART_SetConfig+0x272>
 800abba:	4b29      	ldr	r3, [pc, #164]	; (800ac60 <UART_SetConfig+0x2cc>)
 800abbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800abc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800abc8:	d017      	beq.n	800abfa <UART_SetConfig+0x266>
 800abca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800abce:	d817      	bhi.n	800ac00 <UART_SetConfig+0x26c>
 800abd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abd4:	d00b      	beq.n	800abee <UART_SetConfig+0x25a>
 800abd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abda:	d811      	bhi.n	800ac00 <UART_SetConfig+0x26c>
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <UART_SetConfig+0x254>
 800abe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abe4:	d006      	beq.n	800abf4 <UART_SetConfig+0x260>
 800abe6:	e00b      	b.n	800ac00 <UART_SetConfig+0x26c>
 800abe8:	2301      	movs	r3, #1
 800abea:	77fb      	strb	r3, [r7, #31]
 800abec:	e076      	b.n	800acdc <UART_SetConfig+0x348>
 800abee:	2302      	movs	r3, #2
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e073      	b.n	800acdc <UART_SetConfig+0x348>
 800abf4:	2304      	movs	r3, #4
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e070      	b.n	800acdc <UART_SetConfig+0x348>
 800abfa:	2308      	movs	r3, #8
 800abfc:	77fb      	strb	r3, [r7, #31]
 800abfe:	e06d      	b.n	800acdc <UART_SetConfig+0x348>
 800ac00:	2310      	movs	r3, #16
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e06a      	b.n	800acdc <UART_SetConfig+0x348>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a1b      	ldr	r2, [pc, #108]	; (800ac78 <UART_SetConfig+0x2e4>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d138      	bne.n	800ac82 <UART_SetConfig+0x2ee>
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <UART_SetConfig+0x2cc>)
 800ac12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac1e:	d017      	beq.n	800ac50 <UART_SetConfig+0x2bc>
 800ac20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac24:	d82a      	bhi.n	800ac7c <UART_SetConfig+0x2e8>
 800ac26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac2a:	d00b      	beq.n	800ac44 <UART_SetConfig+0x2b0>
 800ac2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac30:	d824      	bhi.n	800ac7c <UART_SetConfig+0x2e8>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <UART_SetConfig+0x2aa>
 800ac36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac3a:	d006      	beq.n	800ac4a <UART_SetConfig+0x2b6>
 800ac3c:	e01e      	b.n	800ac7c <UART_SetConfig+0x2e8>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	77fb      	strb	r3, [r7, #31]
 800ac42:	e04b      	b.n	800acdc <UART_SetConfig+0x348>
 800ac44:	2302      	movs	r3, #2
 800ac46:	77fb      	strb	r3, [r7, #31]
 800ac48:	e048      	b.n	800acdc <UART_SetConfig+0x348>
 800ac4a:	2304      	movs	r3, #4
 800ac4c:	77fb      	strb	r3, [r7, #31]
 800ac4e:	e045      	b.n	800acdc <UART_SetConfig+0x348>
 800ac50:	2308      	movs	r3, #8
 800ac52:	77fb      	strb	r3, [r7, #31]
 800ac54:	e042      	b.n	800acdc <UART_SetConfig+0x348>
 800ac56:	bf00      	nop
 800ac58:	efff69f3 	.word	0xefff69f3
 800ac5c:	40011000 	.word	0x40011000
 800ac60:	40023800 	.word	0x40023800
 800ac64:	40004400 	.word	0x40004400
 800ac68:	40004800 	.word	0x40004800
 800ac6c:	40004c00 	.word	0x40004c00
 800ac70:	40005000 	.word	0x40005000
 800ac74:	40011400 	.word	0x40011400
 800ac78:	40007800 	.word	0x40007800
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e02c      	b.n	800acdc <UART_SetConfig+0x348>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a72      	ldr	r2, [pc, #456]	; (800ae50 <UART_SetConfig+0x4bc>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d125      	bne.n	800acd8 <UART_SetConfig+0x344>
 800ac8c:	4b71      	ldr	r3, [pc, #452]	; (800ae54 <UART_SetConfig+0x4c0>)
 800ac8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac9a:	d017      	beq.n	800accc <UART_SetConfig+0x338>
 800ac9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aca0:	d817      	bhi.n	800acd2 <UART_SetConfig+0x33e>
 800aca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aca6:	d00b      	beq.n	800acc0 <UART_SetConfig+0x32c>
 800aca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acac:	d811      	bhi.n	800acd2 <UART_SetConfig+0x33e>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <UART_SetConfig+0x326>
 800acb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acb6:	d006      	beq.n	800acc6 <UART_SetConfig+0x332>
 800acb8:	e00b      	b.n	800acd2 <UART_SetConfig+0x33e>
 800acba:	2300      	movs	r3, #0
 800acbc:	77fb      	strb	r3, [r7, #31]
 800acbe:	e00d      	b.n	800acdc <UART_SetConfig+0x348>
 800acc0:	2302      	movs	r3, #2
 800acc2:	77fb      	strb	r3, [r7, #31]
 800acc4:	e00a      	b.n	800acdc <UART_SetConfig+0x348>
 800acc6:	2304      	movs	r3, #4
 800acc8:	77fb      	strb	r3, [r7, #31]
 800acca:	e007      	b.n	800acdc <UART_SetConfig+0x348>
 800accc:	2308      	movs	r3, #8
 800acce:	77fb      	strb	r3, [r7, #31]
 800acd0:	e004      	b.n	800acdc <UART_SetConfig+0x348>
 800acd2:	2310      	movs	r3, #16
 800acd4:	77fb      	strb	r3, [r7, #31]
 800acd6:	e001      	b.n	800acdc <UART_SetConfig+0x348>
 800acd8:	2310      	movs	r3, #16
 800acda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ace4:	d15b      	bne.n	800ad9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ace6:	7ffb      	ldrb	r3, [r7, #31]
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d828      	bhi.n	800ad3e <UART_SetConfig+0x3aa>
 800acec:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <UART_SetConfig+0x360>)
 800acee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf2:	bf00      	nop
 800acf4:	0800ad19 	.word	0x0800ad19
 800acf8:	0800ad21 	.word	0x0800ad21
 800acfc:	0800ad29 	.word	0x0800ad29
 800ad00:	0800ad3f 	.word	0x0800ad3f
 800ad04:	0800ad2f 	.word	0x0800ad2f
 800ad08:	0800ad3f 	.word	0x0800ad3f
 800ad0c:	0800ad3f 	.word	0x0800ad3f
 800ad10:	0800ad3f 	.word	0x0800ad3f
 800ad14:	0800ad37 	.word	0x0800ad37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad18:	f7fc f898 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 800ad1c:	61b8      	str	r0, [r7, #24]
        break;
 800ad1e:	e013      	b.n	800ad48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad20:	f7fc f8a8 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 800ad24:	61b8      	str	r0, [r7, #24]
        break;
 800ad26:	e00f      	b.n	800ad48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad28:	4b4b      	ldr	r3, [pc, #300]	; (800ae58 <UART_SetConfig+0x4c4>)
 800ad2a:	61bb      	str	r3, [r7, #24]
        break;
 800ad2c:	e00c      	b.n	800ad48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad2e:	f7fb ffbb 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 800ad32:	61b8      	str	r0, [r7, #24]
        break;
 800ad34:	e008      	b.n	800ad48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad3a:	61bb      	str	r3, [r7, #24]
        break;
 800ad3c:	e004      	b.n	800ad48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	77bb      	strb	r3, [r7, #30]
        break;
 800ad46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d074      	beq.n	800ae38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	005a      	lsls	r2, r3, #1
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	085b      	lsrs	r3, r3, #1
 800ad58:	441a      	add	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	2b0f      	cmp	r3, #15
 800ad68:	d916      	bls.n	800ad98 <UART_SetConfig+0x404>
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad70:	d212      	bcs.n	800ad98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	f023 030f 	bic.w	r3, r3, #15
 800ad7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	89fb      	ldrh	r3, [r7, #14]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	89fa      	ldrh	r2, [r7, #14]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	e04f      	b.n	800ae38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	77bb      	strb	r3, [r7, #30]
 800ad9c:	e04c      	b.n	800ae38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad9e:	7ffb      	ldrb	r3, [r7, #31]
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d828      	bhi.n	800adf6 <UART_SetConfig+0x462>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <UART_SetConfig+0x418>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800add1 	.word	0x0800add1
 800adb0:	0800add9 	.word	0x0800add9
 800adb4:	0800ade1 	.word	0x0800ade1
 800adb8:	0800adf7 	.word	0x0800adf7
 800adbc:	0800ade7 	.word	0x0800ade7
 800adc0:	0800adf7 	.word	0x0800adf7
 800adc4:	0800adf7 	.word	0x0800adf7
 800adc8:	0800adf7 	.word	0x0800adf7
 800adcc:	0800adef 	.word	0x0800adef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800add0:	f7fc f83c 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 800add4:	61b8      	str	r0, [r7, #24]
        break;
 800add6:	e013      	b.n	800ae00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800add8:	f7fc f84c 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 800addc:	61b8      	str	r0, [r7, #24]
        break;
 800adde:	e00f      	b.n	800ae00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ade0:	4b1d      	ldr	r3, [pc, #116]	; (800ae58 <UART_SetConfig+0x4c4>)
 800ade2:	61bb      	str	r3, [r7, #24]
        break;
 800ade4:	e00c      	b.n	800ae00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ade6:	f7fb ff5f 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 800adea:	61b8      	str	r0, [r7, #24]
        break;
 800adec:	e008      	b.n	800ae00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adf2:	61bb      	str	r3, [r7, #24]
        break;
 800adf4:	e004      	b.n	800ae00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	77bb      	strb	r3, [r7, #30]
        break;
 800adfe:	bf00      	nop
    }

    if (pclk != 0U)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d018      	beq.n	800ae38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	085a      	lsrs	r2, r3, #1
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	441a      	add	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b0f      	cmp	r3, #15
 800ae1e:	d909      	bls.n	800ae34 <UART_SetConfig+0x4a0>
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae26:	d205      	bcs.n	800ae34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60da      	str	r2, [r3, #12]
 800ae32:	e001      	b.n	800ae38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ae44:	7fbb      	ldrb	r3, [r7, #30]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40007c00 	.word	0x40007c00
 800ae54:	40023800 	.word	0x40023800
 800ae58:	00f42400 	.word	0x00f42400

0800ae5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00a      	beq.n	800aeca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00a      	beq.n	800af0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01a      	beq.n	800af72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af5a:	d10a      	bne.n	800af72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]
  }
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afb0:	f7f7 fe2e 	bl	8002c10 <HAL_GetTick>
 800afb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0308 	and.w	r3, r3, #8
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d10e      	bne.n	800afe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f81b 	bl	800b00e <UART_WaitOnFlagUntilTimeout>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e011      	b.n	800b006 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b09c      	sub	sp, #112	; 0x70
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	4613      	mov	r3, r2
 800b01c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b01e:	e0a7      	b.n	800b170 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b026:	f000 80a3 	beq.w	800b170 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b02a:	f7f7 fdf1 	bl	8002c10 <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b036:	429a      	cmp	r2, r3
 800b038:	d302      	bcc.n	800b040 <UART_WaitOnFlagUntilTimeout+0x32>
 800b03a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d13f      	bne.n	800b0c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b054:	667b      	str	r3, [r7, #100]	; 0x64
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b060:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e6      	bne.n	800b040 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3308      	adds	r3, #8
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	663b      	str	r3, [r7, #96]	; 0x60
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b092:	64ba      	str	r2, [r7, #72]	; 0x48
 800b094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e5      	bne.n	800b072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e068      	b.n	800b192 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0304 	and.w	r3, r3, #4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d050      	beq.n	800b170 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0dc:	d148      	bne.n	800b170 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
 800b108:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b10c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e6      	bne.n	800b0e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3308      	adds	r3, #8
 800b120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	613b      	str	r3, [r7, #16]
   return(result);
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f023 0301 	bic.w	r3, r3, #1
 800b130:	66bb      	str	r3, [r7, #104]	; 0x68
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b13a:	623a      	str	r2, [r7, #32]
 800b13c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	69f9      	ldr	r1, [r7, #28]
 800b140:	6a3a      	ldr	r2, [r7, #32]
 800b142:	e841 2300 	strex	r3, r2, [r1]
 800b146:	61bb      	str	r3, [r7, #24]
   return(result);
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e5      	bne.n	800b11a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2220      	movs	r2, #32
 800b152:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2220      	movs	r2, #32
 800b158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e010      	b.n	800b192 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	69da      	ldr	r2, [r3, #28]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	4013      	ands	r3, r2
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	bf0c      	ite	eq
 800b180:	2301      	moveq	r3, #1
 800b182:	2300      	movne	r3, #0
 800b184:	b2db      	uxtb	r3, r3
 800b186:	461a      	mov	r2, r3
 800b188:	79fb      	ldrb	r3, [r7, #7]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f43f af48 	beq.w	800b020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3770      	adds	r7, #112	; 0x70
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d121      	bne.n	800b1f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b27      	ldr	r3, [pc, #156]	; (800b250 <FMC_SDRAM_Init+0xb4>)
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	6851      	ldr	r1, [r2, #4]
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6892      	ldr	r2, [r2, #8]
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	68d2      	ldr	r2, [r2, #12]
 800b1c4:	4311      	orrs	r1, r2
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6912      	ldr	r2, [r2, #16]
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	6952      	ldr	r2, [r2, #20]
 800b1d0:	4311      	orrs	r1, r2
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6992      	ldr	r2, [r2, #24]
 800b1d6:	4311      	orrs	r1, r2
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	69d2      	ldr	r2, [r2, #28]
 800b1dc:	4311      	orrs	r1, r2
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	6a12      	ldr	r2, [r2, #32]
 800b1e2:	4311      	orrs	r1, r2
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	e026      	b.n	800b240 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	69d9      	ldr	r1, [r3, #28]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	4319      	orrs	r1, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	430b      	orrs	r3, r1
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <FMC_SDRAM_Init+0xb4>)
 800b216:	4013      	ands	r3, r2
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	6851      	ldr	r1, [r2, #4]
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	6892      	ldr	r2, [r2, #8]
 800b220:	4311      	orrs	r1, r2
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	68d2      	ldr	r2, [r2, #12]
 800b226:	4311      	orrs	r1, r2
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	6912      	ldr	r2, [r2, #16]
 800b22c:	4311      	orrs	r1, r2
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	6952      	ldr	r2, [r2, #20]
 800b232:	4311      	orrs	r1, r2
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	6992      	ldr	r2, [r2, #24]
 800b238:	430a      	orrs	r2, r1
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	ffff8000 	.word	0xffff8000

0800b254 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d128      	bne.n	800b2b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	1e59      	subs	r1, r3, #1
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	3b01      	subs	r3, #1
 800b27a:	011b      	lsls	r3, r3, #4
 800b27c:	4319      	orrs	r1, r3
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	3b01      	subs	r3, #1
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	4319      	orrs	r1, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	031b      	lsls	r3, r3, #12
 800b290:	4319      	orrs	r1, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	3b01      	subs	r3, #1
 800b298:	041b      	lsls	r3, r3, #16
 800b29a:	4319      	orrs	r1, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	051b      	lsls	r3, r3, #20
 800b2a4:	4319      	orrs	r1, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	061b      	lsls	r3, r3, #24
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	609a      	str	r2, [r3, #8]
 800b2b6:	e02d      	b.n	800b314 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	4b19      	ldr	r3, [pc, #100]	; (800b324 <FMC_SDRAM_Timing_Init+0xd0>)
 800b2be:	4013      	ands	r3, r2
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	68d2      	ldr	r2, [r2, #12]
 800b2c4:	3a01      	subs	r2, #1
 800b2c6:	0311      	lsls	r1, r2, #12
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	6952      	ldr	r2, [r2, #20]
 800b2cc:	3a01      	subs	r2, #1
 800b2ce:	0512      	lsls	r2, r2, #20
 800b2d0:	430a      	orrs	r2, r1
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	1e59      	subs	r1, r3, #1
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	4319      	orrs	r1, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	4319      	orrs	r1, r3
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	041b      	lsls	r3, r3, #16
 800b302:	4319      	orrs	r1, r3
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	3b01      	subs	r3, #1
 800b30a:	061b      	lsls	r3, r3, #24
 800b30c:	430b      	orrs	r3, r1
 800b30e:	431a      	orrs	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	ff0f0fff 	.word	0xff0f0fff

0800b328 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b328:	b084      	sub	sp, #16
 800b32a:	b480      	push	{r7}
 800b32c:	b085      	sub	sp, #20
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	f107 001c 	add.w	r0, r7, #28
 800b336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b33e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b340:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b342:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b346:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b34a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b34e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b352:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	4b07      	ldr	r3, [pc, #28]	; (800b37c <SDMMC_Init+0x54>)
 800b360:	4013      	ands	r3, r2
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	431a      	orrs	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	b004      	add	sp, #16
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	ffff8100 	.word	0xffff8100

0800b380 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b38e:	4618      	mov	r0, r3
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2203      	movs	r2, #3
 800b3a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b3f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b3fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <SDMMC_SendCommand+0x50>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	fffff000 	.word	0xfffff000

0800b428 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	b2db      	uxtb	r3, r3
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b442:	b480      	push	{r7}
 800b444:	b085      	sub	sp, #20
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3314      	adds	r3, #20
 800b450:	461a      	mov	r2, r3
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	4413      	add	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
}  
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b48e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b494:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b49a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0

}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff ff74 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fa1a 	bl	800b92c <SDMMC_GetCmdResp1>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b512:	2311      	movs	r3, #17
 800b514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51a:	2300      	movs	r3, #0
 800b51c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b524:	f107 0308 	add.w	r3, r7, #8
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff ff52 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b530:	f241 3288 	movw	r2, #5000	; 0x1388
 800b534:	2111      	movs	r1, #17
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9f8 	bl	800b92c <SDMMC_GetCmdResp1>
 800b53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53e:	69fb      	ldr	r3, [r7, #28]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b556:	2312      	movs	r3, #18
 800b558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff ff30 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b574:	f241 3288 	movw	r2, #5000	; 0x1388
 800b578:	2112      	movs	r1, #18
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f9d6 	bl	800b92c <SDMMC_GetCmdResp1>
 800b580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b582:	69fb      	ldr	r3, [r7, #28]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3720      	adds	r7, #32
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b59a:	2318      	movs	r3, #24
 800b59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ac:	f107 0308 	add.w	r3, r7, #8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff ff0e 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5bc:	2118      	movs	r1, #24
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f9b4 	bl	800b92c <SDMMC_GetCmdResp1>
 800b5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b5de:	2319      	movs	r3, #25
 800b5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e2:	2340      	movs	r3, #64	; 0x40
 800b5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f0:	f107 0308 	add.w	r3, r7, #8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff feec 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b600:	2119      	movs	r1, #25
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f992 	bl	800b92c <SDMMC_GetCmdResp1>
 800b608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60a:	69fb      	ldr	r3, [r7, #28]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b620:	230c      	movs	r3, #12
 800b622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b624:	2340      	movs	r3, #64	; 0x40
 800b626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b628:	2300      	movs	r3, #0
 800b62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b630:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fecb 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b63e:	4a05      	ldr	r2, [pc, #20]	; (800b654 <SDMMC_CmdStopTransfer+0x40>)
 800b640:	210c      	movs	r1, #12
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f972 	bl	800b92c <SDMMC_GetCmdResp1>
 800b648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64a:	69fb      	ldr	r3, [r7, #28]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	05f5e100 	.word	0x05f5e100

0800b658 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b668:	2307      	movs	r3, #7
 800b66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66c:	2340      	movs	r3, #64	; 0x40
 800b66e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b670:	2300      	movs	r3, #0
 800b672:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b678:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67a:	f107 0310 	add.w	r3, r7, #16
 800b67e:	4619      	mov	r1, r3
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff fea7 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b686:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68a:	2107      	movs	r1, #7
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 f94d 	bl	800b92c <SDMMC_GetCmdResp1>
 800b692:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b696:	4618      	mov	r0, r3
 800b698:	3728      	adds	r7, #40	; 0x28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b088      	sub	sp, #32
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6bc:	f107 0308 	add.w	r3, r7, #8
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fe86 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fb67 	bl	800bd9c <SDMMC_GetCmdError>
 800b6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b088      	sub	sp, #32
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b6e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b6e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ec:	2340      	movs	r3, #64	; 0x40
 800b6ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6fa:	f107 0308 	add.w	r3, r7, #8
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff fe67 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fafa 	bl	800bd00 <SDMMC_GetCmdResp7>
 800b70c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b70e:	69fb      	ldr	r3, [r7, #28]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3720      	adds	r7, #32
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b088      	sub	sp, #32
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b726:	2337      	movs	r3, #55	; 0x37
 800b728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b72a:	2340      	movs	r3, #64	; 0x40
 800b72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fe48 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b744:	f241 3288 	movw	r2, #5000	; 0x1388
 800b748:	2137      	movs	r1, #55	; 0x37
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f8ee 	bl	800b92c <SDMMC_GetCmdResp1>
 800b750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b752:	69fb      	ldr	r3, [r7, #28]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4b0d      	ldr	r3, [pc, #52]	; (800b7a0 <SDMMC_CmdAppOperCommand+0x44>)
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b76e:	2329      	movs	r3, #41	; 0x29
 800b770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b772:	2340      	movs	r3, #64	; 0x40
 800b774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b77e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fe24 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa03 	bl	800bb98 <SDMMC_GetCmdResp3>
 800b792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b794:	69fb      	ldr	r3, [r7, #28]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3720      	adds	r7, #32
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	80100000 	.word	0x80100000

0800b7a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b088      	sub	sp, #32
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7b2:	2306      	movs	r3, #6
 800b7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b6:	2340      	movs	r3, #64	; 0x40
 800b7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c4:	f107 0308 	add.w	r3, r7, #8
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff fe02 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d4:	2106      	movs	r1, #6
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f8a8 	bl	800b92c <SDMMC_GetCmdResp1>
 800b7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7de:	69fb      	ldr	r3, [r7, #28]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b7f4:	2333      	movs	r3, #51	; 0x33
 800b7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7f8:	2340      	movs	r3, #64	; 0x40
 800b7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b806:	f107 0308 	add.w	r3, r7, #8
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff fde1 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b812:	f241 3288 	movw	r2, #5000	; 0x1388
 800b816:	2133      	movs	r1, #51	; 0x33
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f887 	bl	800b92c <SDMMC_GetCmdResp1>
 800b81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b820:	69fb      	ldr	r3, [r7, #28]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b088      	sub	sp, #32
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b836:	2302      	movs	r3, #2
 800b838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b83a:	23c0      	movs	r3, #192	; 0xc0
 800b83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b848:	f107 0308 	add.w	r3, r7, #8
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fdc0 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f957 	bl	800bb08 <SDMMC_GetCmdResp2>
 800b85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b85c:	69fb      	ldr	r3, [r7, #28]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3720      	adds	r7, #32
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b088      	sub	sp, #32
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b874:	2309      	movs	r3, #9
 800b876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b878:	23c0      	movs	r3, #192	; 0xc0
 800b87a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b87c:	2300      	movs	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b884:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b886:	f107 0308 	add.w	r3, r7, #8
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff fda1 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f938 	bl	800bb08 <SDMMC_GetCmdResp2>
 800b898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b89a:	69fb      	ldr	r3, [r7, #28]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8b6:	2340      	movs	r3, #64	; 0x40
 800b8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8c4:	f107 0308 	add.w	r3, r7, #8
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff fd82 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	2103      	movs	r1, #3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f99d 	bl	800bc14 <SDMMC_GetCmdResp6>
 800b8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3720      	adds	r7, #32
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b088      	sub	sp, #32
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b8f4:	230d      	movs	r3, #13
 800b8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8f8:	2340      	movs	r3, #64	; 0x40
 800b8fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b904:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b906:	f107 0308 	add.w	r3, r7, #8
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff fd61 	bl	800b3d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b912:	f241 3288 	movw	r2, #5000	; 0x1388
 800b916:	210d      	movs	r1, #13
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f807 	bl	800b92c <SDMMC_GetCmdResp1>
 800b91e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b920:	69fb      	ldr	r3, [r7, #28]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3720      	adds	r7, #32
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	460b      	mov	r3, r1
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b93a:	4b70      	ldr	r3, [pc, #448]	; (800bafc <SDMMC_GetCmdResp1+0x1d0>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a70      	ldr	r2, [pc, #448]	; (800bb00 <SDMMC_GetCmdResp1+0x1d4>)
 800b940:	fba2 2303 	umull	r2, r3, r2, r3
 800b944:	0a5a      	lsrs	r2, r3, #9
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	fb02 f303 	mul.w	r3, r2, r3
 800b94c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	1e5a      	subs	r2, r3, #1
 800b952:	61fa      	str	r2, [r7, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b95c:	e0c9      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0ef      	beq.n	800b94e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1ea      	bne.n	800b94e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2204      	movs	r2, #4
 800b988:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b98a:	2304      	movs	r3, #4
 800b98c:	e0b1      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e0a6      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	22c5      	movs	r2, #197	; 0xc5
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff fd3c 	bl	800b428 <SDMMC_GetCommandResponse>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	7afb      	ldrb	r3, [r7, #11]
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d001      	beq.n	800b9be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e099      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b9be:	2100      	movs	r1, #0
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7ff fd3e 	bl	800b442 <SDMMC_GetResponse>
 800b9c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4b4e      	ldr	r3, [pc, #312]	; (800bb04 <SDMMC_GetCmdResp1+0x1d8>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e08d      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da02      	bge.n	800b9e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9e0:	e087      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9ec:	2340      	movs	r3, #64	; 0x40
 800b9ee:	e080      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9fa:	2380      	movs	r3, #128	; 0x80
 800b9fc:	e079      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba0c:	e071      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba1c:	e069      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba2c:	e061      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba3c:	e059      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba4c:	e051      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba5c:	e049      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba6c:	e041      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7c:	e039      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ba8c:	e031      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba9c:	e029      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800baa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800baac:	e021      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800babc:	e019      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bacc:	e011      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800badc:	e009      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f003 0308 	and.w	r3, r3, #8
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bae8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800baec:	e001      	b.n	800baf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800baee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3720      	adds	r7, #32
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20000000 	.word	0x20000000
 800bb00:	10624dd3 	.word	0x10624dd3
 800bb04:	fdffe008 	.word	0xfdffe008

0800bb08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb10:	4b1f      	ldr	r3, [pc, #124]	; (800bb90 <SDMMC_GetCmdResp2+0x88>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1f      	ldr	r2, [pc, #124]	; (800bb94 <SDMMC_GetCmdResp2+0x8c>)
 800bb16:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1a:	0a5b      	lsrs	r3, r3, #9
 800bb1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb20:	fb02 f303 	mul.w	r3, r2, r3
 800bb24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1e5a      	subs	r2, r3, #1
 800bb2a:	60fa      	str	r2, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb34:	e026      	b.n	800bb84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0ef      	beq.n	800bb26 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1ea      	bne.n	800bb26 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2204      	movs	r2, #4
 800bb60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb62:	2304      	movs	r3, #4
 800bb64:	e00e      	b.n	800bb84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e003      	b.n	800bb84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	22c5      	movs	r2, #197	; 0xc5
 800bb80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20000000 	.word	0x20000000
 800bb94:	10624dd3 	.word	0x10624dd3

0800bb98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bba0:	4b1a      	ldr	r3, [pc, #104]	; (800bc0c <SDMMC_GetCmdResp3+0x74>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a1a      	ldr	r2, [pc, #104]	; (800bc10 <SDMMC_GetCmdResp3+0x78>)
 800bba6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbaa:	0a5b      	lsrs	r3, r3, #9
 800bbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb0:	fb02 f303 	mul.w	r3, r2, r3
 800bbb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	1e5a      	subs	r2, r3, #1
 800bbba:	60fa      	str	r2, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbc4:	e01b      	b.n	800bbfe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0ef      	beq.n	800bbb6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1ea      	bne.n	800bbb6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbf2:	2304      	movs	r3, #4
 800bbf4:	e003      	b.n	800bbfe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	22c5      	movs	r2, #197	; 0xc5
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20000000 	.word	0x20000000
 800bc10:	10624dd3 	.word	0x10624dd3

0800bc14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc22:	4b35      	ldr	r3, [pc, #212]	; (800bcf8 <SDMMC_GetCmdResp6+0xe4>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a35      	ldr	r2, [pc, #212]	; (800bcfc <SDMMC_GetCmdResp6+0xe8>)
 800bc28:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2c:	0a5b      	lsrs	r3, r3, #9
 800bc2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc32:	fb02 f303 	mul.w	r3, r2, r3
 800bc36:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	1e5a      	subs	r2, r3, #1
 800bc3c:	61fa      	str	r2, [r7, #28]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc46:	e052      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0ef      	beq.n	800bc38 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1ea      	bne.n	800bc38 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc66:	f003 0304 	and.w	r3, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2204      	movs	r2, #4
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc74:	2304      	movs	r3, #4
 800bc76:	e03a      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d004      	beq.n	800bc8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2201      	movs	r2, #1
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e02f      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff fbca 	bl	800b428 <SDMMC_GetCommandResponse>
 800bc94:	4603      	mov	r3, r0
 800bc96:	461a      	mov	r2, r3
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d001      	beq.n	800bca2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e025      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	22c5      	movs	r2, #197	; 0xc5
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bca8:	2100      	movs	r1, #0
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7ff fbc9 	bl	800b442 <SDMMC_GetResponse>
 800bcb0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	0c1b      	lsrs	r3, r3, #16
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e011      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bcd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcd8:	e009      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce8:	e001      	b.n	800bcee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000000 	.word	0x20000000
 800bcfc:	10624dd3 	.word	0x10624dd3

0800bd00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd08:	4b22      	ldr	r3, [pc, #136]	; (800bd94 <SDMMC_GetCmdResp7+0x94>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a22      	ldr	r2, [pc, #136]	; (800bd98 <SDMMC_GetCmdResp7+0x98>)
 800bd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd12:	0a5b      	lsrs	r3, r3, #9
 800bd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd18:	fb02 f303 	mul.w	r3, r2, r3
 800bd1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	1e5a      	subs	r2, r3, #1
 800bd22:	60fa      	str	r2, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd2c:	e02c      	b.n	800bd88 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0ef      	beq.n	800bd1e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1ea      	bne.n	800bd1e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4c:	f003 0304 	and.w	r3, r3, #4
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d004      	beq.n	800bd5e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2204      	movs	r2, #4
 800bd58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd5a:	2304      	movs	r3, #4
 800bd5c:	e014      	b.n	800bd88 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e009      	b.n	800bd88 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2240      	movs	r2, #64	; 0x40
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd86:	2300      	movs	r3, #0
  
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	20000000 	.word	0x20000000
 800bd98:	10624dd3 	.word	0x10624dd3

0800bd9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bda4:	4b11      	ldr	r3, [pc, #68]	; (800bdec <SDMMC_GetCmdError+0x50>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a11      	ldr	r2, [pc, #68]	; (800bdf0 <SDMMC_GetCmdError+0x54>)
 800bdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdae:	0a5b      	lsrs	r3, r3, #9
 800bdb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdb4:	fb02 f303 	mul.w	r3, r2, r3
 800bdb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1e5a      	subs	r2, r3, #1
 800bdbe:	60fa      	str	r2, [r7, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdc8:	e009      	b.n	800bdde <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0f1      	beq.n	800bdba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	22c5      	movs	r2, #197	; 0xc5
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	20000000 	.word	0x20000000
 800bdf0:	10624dd3 	.word	0x10624dd3

0800bdf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f043 0201 	orr.w	r2, r3, #1
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f023 0201 	bic.w	r2, r3, #1
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3301      	adds	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4a13      	ldr	r2, [pc, #76]	; (800be9c <USB_FlushTxFifo+0x64>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d901      	bls.n	800be58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e01b      	b.n	800be90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	daf2      	bge.n	800be46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	019b      	lsls	r3, r3, #6
 800be68:	f043 0220 	orr.w	r2, r3, #32
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	3301      	adds	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	4a08      	ldr	r2, [pc, #32]	; (800be9c <USB_FlushTxFifo+0x64>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d901      	bls.n	800be82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be7e:	2303      	movs	r3, #3
 800be80:	e006      	b.n	800be90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d0f0      	beq.n	800be70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	00030d40 	.word	0x00030d40

0800bea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a11      	ldr	r2, [pc, #68]	; (800befc <USB_FlushRxFifo+0x5c>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d901      	bls.n	800bebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e018      	b.n	800bef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	daf2      	bge.n	800beac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2210      	movs	r2, #16
 800bece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	4a08      	ldr	r2, [pc, #32]	; (800befc <USB_FlushRxFifo+0x5c>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d901      	bls.n	800bee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e006      	b.n	800bef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f003 0310 	and.w	r3, r3, #16
 800beea:	2b10      	cmp	r3, #16
 800beec:	d0f0      	beq.n	800bed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	00030d40 	.word	0x00030d40

0800bf00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b08b      	sub	sp, #44	; 0x2c
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf16:	88fb      	ldrh	r3, [r7, #6]
 800bf18:	089b      	lsrs	r3, r3, #2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	f003 0303 	and.w	r3, r3, #3
 800bf24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf26:	2300      	movs	r3, #0
 800bf28:	623b      	str	r3, [r7, #32]
 800bf2a:	e014      	b.n	800bf56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	3301      	adds	r3, #1
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	3301      	adds	r3, #1
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	3301      	adds	r3, #1
 800bf54:	623b      	str	r3, [r7, #32]
 800bf56:	6a3a      	ldr	r2, [r7, #32]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d3e6      	bcc.n	800bf2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf5e:	8bfb      	ldrh	r3, [r7, #30]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d01e      	beq.n	800bfa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f107 0310 	add.w	r3, r7, #16
 800bf74:	6812      	ldr	r2, [r2, #0]
 800bf76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	fa22 f303 	lsr.w	r3, r2, r3
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	701a      	strb	r2, [r3, #0]
      i++;
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	3301      	adds	r3, #1
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf96:	8bfb      	ldrh	r3, [r7, #30]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf9c:	8bfb      	ldrh	r3, [r7, #30]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1ea      	bne.n	800bf78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	372c      	adds	r7, #44	; 0x2c
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	015a      	lsls	r2, r3, #5
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4413      	add	r3, r2
 800bffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4013      	ands	r3, r2
 800c008:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c00a:	68bb      	ldr	r3, [r7, #8]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	f003 0301 	and.w	r3, r3, #1
}
 800c028:	4618      	mov	r0, r3
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c052:	f023 0303 	bic.w	r3, r3, #3
 800c056:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c06c:	4313      	orrs	r3, r2
 800c06e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d107      	bne.n	800c086 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c07c:	461a      	mov	r2, r3
 800c07e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c082:	6053      	str	r3, [r2, #4]
 800c084:	e009      	b.n	800c09a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c086:	78fb      	ldrb	r3, [r7, #3]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d106      	bne.n	800c09a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c092:	461a      	mov	r2, r3
 800c094:	f241 7370 	movw	r3, #6000	; 0x1770
 800c098:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	b29b      	uxth	r3, r3
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b089      	sub	sp, #36	; 0x24
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c0da:	78fb      	ldrb	r3, [r7, #3]
 800c0dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	0c9b      	lsrs	r3, r3, #18
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	0fdb      	lsrs	r3, r3, #31
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	f003 0320 	and.w	r3, r3, #32
 800c116:	2b20      	cmp	r3, #32
 800c118:	d104      	bne.n	800c124 <USB_HC_Halt+0x5a>
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	e0c8      	b.n	800c2b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <USB_HC_Halt+0x66>
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d163      	bne.n	800c1f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	4413      	add	r3, r2
 800c138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	0151      	lsls	r1, r2, #5
 800c142:	69fa      	ldr	r2, [r7, #28]
 800c144:	440a      	add	r2, r1
 800c146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c14a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c14e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f003 0320 	and.w	r3, r3, #32
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f040 80ab 	bne.w	800c2b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d133      	bne.n	800c1d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c188:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69ba      	ldr	r2, [r7, #24]
 800c19a:	0151      	lsls	r1, r2, #5
 800c19c:	69fa      	ldr	r2, [r7, #28]
 800c19e:	440a      	add	r2, r1
 800c1a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1b6:	d81d      	bhi.n	800c1f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1ce:	d0ec      	beq.n	800c1aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1d0:	e070      	b.n	800c2b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	0151      	lsls	r1, r2, #5
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	440a      	add	r2, r1
 800c1e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1f2:	e05f      	b.n	800c2b4 <USB_HC_Halt+0x1ea>
            break;
 800c1f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1f6:	e05d      	b.n	800c2b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	0151      	lsls	r1, r2, #5
 800c20a:	69fa      	ldr	r2, [r7, #28]
 800c20c:	440a      	add	r2, r1
 800c20e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c216:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d133      	bne.n	800c290 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	69fa      	ldr	r2, [r7, #28]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c246:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	0151      	lsls	r1, r2, #5
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	440a      	add	r2, r1
 800c25e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c266:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c274:	d81d      	bhi.n	800c2b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	015a      	lsls	r2, r3, #5
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	4413      	add	r3, r2
 800c27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c28c:	d0ec      	beq.n	800c268 <USB_HC_Halt+0x19e>
 800c28e:	e011      	b.n	800c2b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	4413      	add	r3, r2
 800c298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	0151      	lsls	r1, r2, #5
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	440a      	add	r2, r1
 800c2a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	e000      	b.n	800c2b4 <USB_HC_Halt+0x1ea>
          break;
 800c2b2:	bf00      	nop
    }
  }

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3724      	adds	r7, #36	; 0x24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b088      	sub	sp, #32
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fd9d 	bl	800be16 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2dc:	2110      	movs	r1, #16
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fdaa 	bl	800be38 <USB_FlushTxFifo>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fdd6 	bl	800bea0 <USB_FlushRxFifo>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c2fe:	2300      	movs	r3, #0
 800c300:	61bb      	str	r3, [r7, #24]
 800c302:	e01f      	b.n	800c344 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	015a      	lsls	r2, r3, #5
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c31a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c322:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c32a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
 800c334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c338:	461a      	mov	r2, r3
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	3301      	adds	r3, #1
 800c342:	61bb      	str	r3, [r7, #24]
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	2b0f      	cmp	r3, #15
 800c348:	d9dc      	bls.n	800c304 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c34a:	2300      	movs	r3, #0
 800c34c:	61bb      	str	r3, [r7, #24]
 800c34e:	e034      	b.n	800c3ba <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	015a      	lsls	r2, r3, #5
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	4413      	add	r3, r2
 800c358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c366:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c36e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c376:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	015a      	lsls	r2, r3, #5
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	4413      	add	r3, r2
 800c380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c384:	461a      	mov	r2, r3
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c396:	d80c      	bhi.n	800c3b2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	015a      	lsls	r2, r3, #5
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ae:	d0ec      	beq.n	800c38a <USB_StopHost+0xc8>
 800c3b0:	e000      	b.n	800c3b4 <USB_StopHost+0xf2>
        break;
 800c3b2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	61bb      	str	r3, [r7, #24]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	2b0f      	cmp	r3, #15
 800c3be:	d9c7      	bls.n	800c350 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3cc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3d4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff fd0c 	bl	800bdf4 <USB_EnableGlobalInt>

  return ret;
 800c3dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3720      	adds	r7, #32
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c3ec:	4904      	ldr	r1, [pc, #16]	; (800c400 <MX_FATFS_Init+0x18>)
 800c3ee:	4805      	ldr	r0, [pc, #20]	; (800c404 <MX_FATFS_Init+0x1c>)
 800c3f0:	f000 fb72 	bl	800cad8 <FATFS_LinkDriver>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	4b03      	ldr	r3, [pc, #12]	; (800c408 <MX_FATFS_Init+0x20>)
 800c3fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c3fc:	bf00      	nop
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20000a54 	.word	0x20000a54
 800c404:	0800e904 	.word	0x0800e904
 800c408:	20000a50 	.word	0x20000a50

0800c40c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c416:	f000 f87b 	bl	800c510 <BSP_SD_IsDetected>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d001      	beq.n	800c424 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c420:	2302      	movs	r3, #2
 800c422:	e012      	b.n	800c44a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c424:	480b      	ldr	r0, [pc, #44]	; (800c454 <BSP_SD_Init+0x48>)
 800c426:	f7fc f827 	bl	8008478 <HAL_SD_Init>
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c438:	4806      	ldr	r0, [pc, #24]	; (800c454 <BSP_SD_Init+0x48>)
 800c43a:	f7fc fc77 	bl	8008d2c <HAL_SD_ConfigWideBusOperation>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c448:	79fb      	ldrb	r3, [r7, #7]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20000614 	.word	0x20000614

0800c458 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	68f9      	ldr	r1, [r7, #12]
 800c46e:	4806      	ldr	r0, [pc, #24]	; (800c488 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c470:	f7fc f8ba 	bl	80085e8 <HAL_SD_ReadBlocks_DMA>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20000614 	.word	0x20000614

0800c48c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	68f9      	ldr	r1, [r7, #12]
 800c4a2:	4806      	ldr	r0, [pc, #24]	; (800c4bc <BSP_SD_WriteBlocks_DMA+0x30>)
 800c4a4:	f7fc f982 	bl	80087ac <HAL_SD_WriteBlocks_DMA>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000614 	.word	0x20000614

0800c4c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c4c4:	4805      	ldr	r0, [pc, #20]	; (800c4dc <BSP_SD_GetCardState+0x1c>)
 800c4c6:	f7fc fccb 	bl	8008e60 <HAL_SD_GetCardState>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b04      	cmp	r3, #4
 800c4ce:	bf14      	ite	ne
 800c4d0:	2301      	movne	r3, #1
 800c4d2:	2300      	moveq	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	20000614 	.word	0x20000614

0800c4e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c4e8:	6879      	ldr	r1, [r7, #4]
 800c4ea:	4803      	ldr	r0, [pc, #12]	; (800c4f8 <BSP_SD_GetCardInfo+0x18>)
 800c4ec:	f7fc fbf2 	bl	8008cd4 <HAL_SD_GetCardInfo>
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	20000614 	.word	0x20000614

0800c4fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c504:	f000 f9b2 	bl	800c86c <BSP_SD_ReadCpltCallback>
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c516:	2301      	movs	r3, #1
 800c518:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c51a:	f000 f80b 	bl	800c534 <BSP_PlatformIsDetected>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c524:	2300      	movs	r3, #0
 800c526:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	b2db      	uxtb	r3, r3
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c53a:	2301      	movs	r3, #1
 800c53c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c53e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c542:	4806      	ldr	r0, [pc, #24]	; (800c55c <BSP_PlatformIsDetected+0x28>)
 800c544:	f7f7 ffc6 	bl	80044d4 <HAL_GPIO_ReadPin>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c54e:	2300      	movs	r3, #0
 800c550:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c552:	79fb      	ldrb	r3, [r7, #7]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	40020800 	.word	0x40020800

0800c560 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c568:	f000 fae3 	bl	800cb32 <osKernelSysTick>
 800c56c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c56e:	e006      	b.n	800c57e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c570:	f7ff ffa6 	bl	800c4c0 <BSP_SD_GetCardState>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e009      	b.n	800c592 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c57e:	f000 fad8 	bl	800cb32 <osKernelSysTick>
 800c582:	4602      	mov	r2, r0
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d8f0      	bhi.n	800c570 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c5a6:	4b0b      	ldr	r3, [pc, #44]	; (800c5d4 <SD_CheckStatus+0x38>)
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c5ac:	f7ff ff88 	bl	800c4c0 <BSP_SD_GetCardState>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d107      	bne.n	800c5c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c5b6:	4b07      	ldr	r3, [pc, #28]	; (800c5d4 <SD_CheckStatus+0x38>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	f023 0301 	bic.w	r3, r3, #1
 800c5c0:	b2da      	uxtb	r2, r3
 800c5c2:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <SD_CheckStatus+0x38>)
 800c5c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c5c6:	4b03      	ldr	r3, [pc, #12]	; (800c5d4 <SD_CheckStatus+0x38>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	b2db      	uxtb	r3, r3
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	20000009 	.word	0x20000009

0800c5d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c5d8:	b590      	push	{r4, r7, lr}
 800c5da:	b087      	sub	sp, #28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c5e2:	4b20      	ldr	r3, [pc, #128]	; (800c664 <SD_initialize+0x8c>)
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c5e8:	f000 fa97 	bl	800cb1a <osKernelRunning>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d030      	beq.n	800c654 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c5f2:	f7ff ff0b 	bl	800c40c <BSP_SD_Init>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d107      	bne.n	800c60c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c5fc:	79fb      	ldrb	r3, [r7, #7]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff ffcc 	bl	800c59c <SD_CheckStatus>
 800c604:	4603      	mov	r3, r0
 800c606:	461a      	mov	r2, r3
 800c608:	4b16      	ldr	r3, [pc, #88]	; (800c664 <SD_initialize+0x8c>)
 800c60a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c60c:	4b15      	ldr	r3, [pc, #84]	; (800c664 <SD_initialize+0x8c>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b01      	cmp	r3, #1
 800c614:	d01e      	beq.n	800c654 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <SD_initialize+0x90>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10e      	bne.n	800c63c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c61e:	4b13      	ldr	r3, [pc, #76]	; (800c66c <SD_initialize+0x94>)
 800c620:	f107 0408 	add.w	r4, r7, #8
 800c624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c62a:	f107 0308 	add.w	r3, r7, #8
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fa8e 	bl	800cb52 <osMessageCreate>
 800c636:	4603      	mov	r3, r0
 800c638:	4a0b      	ldr	r2, [pc, #44]	; (800c668 <SD_initialize+0x90>)
 800c63a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c63c:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <SD_initialize+0x90>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d107      	bne.n	800c654 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c644:	4b07      	ldr	r3, [pc, #28]	; (800c664 <SD_initialize+0x8c>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f043 0301 	orr.w	r3, r3, #1
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	4b04      	ldr	r3, [pc, #16]	; (800c664 <SD_initialize+0x8c>)
 800c652:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c654:	4b03      	ldr	r3, [pc, #12]	; (800c664 <SD_initialize+0x8c>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	b2db      	uxtb	r3, r3
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd90      	pop	{r4, r7, pc}
 800c662:	bf00      	nop
 800c664:	20000009 	.word	0x20000009
 800c668:	20000a58 	.word	0x20000a58
 800c66c:	0800e8dc 	.word	0x0800e8dc

0800c670 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7ff ff8d 	bl	800c59c <SD_CheckStatus>
 800c682:	4603      	mov	r3, r0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	; 0x28
 800c690:	af00      	add	r7, sp, #0
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c6a2:	f247 5030 	movw	r0, #30000	; 0x7530
 800c6a6:	f7ff ff5b 	bl	800c560 <SD_CheckStatusWithTimeout>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	da02      	bge.n	800c6b6 <SD_read+0x2a>
  {
    return res;
 800c6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b4:	e032      	b.n	800c71c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7ff fecc 	bl	800c458 <BSP_SD_ReadBlocks_DMA>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c6c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d124      	bne.n	800c718 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c6ce:	4b15      	ldr	r3, [pc, #84]	; (800c724 <SD_read+0x98>)
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	f107 0314 	add.w	r3, r7, #20
 800c6d6:	f247 5230 	movw	r2, #30000	; 0x7530
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 faa2 	bl	800cc24 <osMessageGet>

    if (event.status == osEventMessage)
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2b10      	cmp	r3, #16
 800c6e4:	d118      	bne.n	800c718 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d115      	bne.n	800c718 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c6ec:	f000 fa21 	bl	800cb32 <osKernelSysTick>
 800c6f0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c6f2:	e008      	b.n	800c706 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c6f4:	f7ff fee4 	bl	800c4c0 <BSP_SD_GetCardState>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d103      	bne.n	800c706 <SD_read+0x7a>
              {
                res = RES_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c704:	e008      	b.n	800c718 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c706:	f000 fa14 	bl	800cb32 <osKernelSysTick>
 800c70a:	4602      	mov	r2, r0
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	f247 522f 	movw	r2, #29999	; 0x752f
 800c714:	4293      	cmp	r3, r2
 800c716:	d9ed      	bls.n	800c6f4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3728      	adds	r7, #40	; 0x28
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000a58 	.word	0x20000a58

0800c728 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08a      	sub	sp, #40	; 0x28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	607a      	str	r2, [r7, #4]
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	4603      	mov	r3, r0
 800c736:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c73e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c742:	f7ff ff0d 	bl	800c560 <SD_CheckStatusWithTimeout>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	da02      	bge.n	800c752 <SD_write+0x2a>
  {
    return res;
 800c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c750:	e02e      	b.n	800c7b0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f7ff fe98 	bl	800c48c <BSP_SD_WriteBlocks_DMA>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d124      	bne.n	800c7ac <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c762:	4b15      	ldr	r3, [pc, #84]	; (800c7b8 <SD_write+0x90>)
 800c764:	6819      	ldr	r1, [r3, #0]
 800c766:	f107 0314 	add.w	r3, r7, #20
 800c76a:	f247 5230 	movw	r2, #30000	; 0x7530
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 fa58 	bl	800cc24 <osMessageGet>

    if (event.status == osEventMessage)
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b10      	cmp	r3, #16
 800c778:	d118      	bne.n	800c7ac <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d115      	bne.n	800c7ac <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c780:	f000 f9d7 	bl	800cb32 <osKernelSysTick>
 800c784:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c786:	e008      	b.n	800c79a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c788:	f7ff fe9a 	bl	800c4c0 <BSP_SD_GetCardState>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <SD_write+0x72>
          {
            res = RES_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c798:	e008      	b.n	800c7ac <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c79a:	f000 f9ca 	bl	800cb32 <osKernelSysTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d9ed      	bls.n	800c788 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3728      	adds	r7, #40	; 0x28
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	20000a58 	.word	0x20000a58

0800c7bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08c      	sub	sp, #48	; 0x30
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	603a      	str	r2, [r7, #0]
 800c7c6:	71fb      	strb	r3, [r7, #7]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c7d2:	4b25      	ldr	r3, [pc, #148]	; (800c868 <SD_ioctl+0xac>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <SD_ioctl+0x28>
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e03c      	b.n	800c85e <SD_ioctl+0xa2>

  switch (cmd)
 800c7e4:	79bb      	ldrb	r3, [r7, #6]
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d834      	bhi.n	800c854 <SD_ioctl+0x98>
 800c7ea:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <SD_ioctl+0x34>)
 800c7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f0:	0800c801 	.word	0x0800c801
 800c7f4:	0800c809 	.word	0x0800c809
 800c7f8:	0800c821 	.word	0x0800c821
 800c7fc:	0800c83b 	.word	0x0800c83b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c800:	2300      	movs	r3, #0
 800c802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c806:	e028      	b.n	800c85a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c808:	f107 030c 	add.w	r3, r7, #12
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fe67 	bl	800c4e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c81e:	e01c      	b.n	800c85a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c820:	f107 030c 	add.w	r3, r7, #12
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff fe5b 	bl	800c4e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c838:	e00f      	b.n	800c85a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c83a:	f107 030c 	add.w	r3, r7, #12
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff fe4e 	bl	800c4e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	0a5a      	lsrs	r2, r3, #9
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c852:	e002      	b.n	800c85a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c854:	2304      	movs	r3, #4
 800c856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3730      	adds	r7, #48	; 0x30
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20000009 	.word	0x20000009

0800c86c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c870:	4b04      	ldr	r3, [pc, #16]	; (800c884 <BSP_SD_ReadCpltCallback+0x18>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2200      	movs	r2, #0
 800c876:	2101      	movs	r1, #1
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 f993 	bl	800cba4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800c87e:	bf00      	nop
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	20000a58 	.word	0x20000a58

0800c888 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f804 	bl	800c8ac <USBH_HandleSof>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b0b      	cmp	r3, #11
 800c8bc:	d10a      	bne.n	800c8d4 <USBH_HandleSof+0x28>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c900:	2200      	movs	r2, #0
 800c902:	4619      	mov	r1, r3
 800c904:	f000 f94e 	bl	800cba4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c908:	bf00      	nop
}
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c920:	bf00      	nop
}
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c960:	2200      	movs	r2, #0
 800c962:	4619      	mov	r1, r3
 800c964:	f000 f91e 	bl	800cba4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 ff14 	bl	800e7c0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	791b      	ldrb	r3, [r3, #4]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f830 	bl	800ca04 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	795b      	ldrb	r3, [r3, #5]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f82a 	bl	800ca04 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	f000 f8ec 	bl	800cba4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f000 f8d5 	bl	800cba4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	2b0f      	cmp	r3, #15
 800ca14:	d80d      	bhi.n	800ca32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca16:	78fb      	ldrb	r3, [r7, #3]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	33e0      	adds	r3, #224	; 0xe0
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	78fb      	ldrb	r3, [r7, #3]
 800ca24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	33e0      	adds	r3, #224	; 0xe0
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca56:	4b1f      	ldr	r3, [pc, #124]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca58:	7a5b      	ldrb	r3, [r3, #9]
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d131      	bne.n	800cac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca60:	4b1c      	ldr	r3, [pc, #112]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca62:	7a5b      	ldrb	r3, [r3, #9]
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	461a      	mov	r2, r3
 800ca68:	4b1a      	ldr	r3, [pc, #104]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca6e:	4b19      	ldr	r3, [pc, #100]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca70:	7a5b      	ldrb	r3, [r3, #9]
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca7e:	4b15      	ldr	r3, [pc, #84]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca80:	7a5b      	ldrb	r3, [r3, #9]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b13      	ldr	r3, [pc, #76]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca88:	4413      	add	r3, r2
 800ca8a:	79fa      	ldrb	r2, [r7, #7]
 800ca8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca8e:	4b11      	ldr	r3, [pc, #68]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca90:	7a5b      	ldrb	r3, [r3, #9]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	b2d1      	uxtb	r1, r2
 800ca98:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <FATFS_LinkDriverEx+0x94>)
 800ca9a:	7251      	strb	r1, [r2, #9]
 800ca9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca9e:	7dbb      	ldrb	r3, [r7, #22]
 800caa0:	3330      	adds	r3, #48	; 0x30
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	3301      	adds	r3, #1
 800caac:	223a      	movs	r2, #58	; 0x3a
 800caae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3302      	adds	r3, #2
 800cab4:	222f      	movs	r2, #47	; 0x2f
 800cab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	3303      	adds	r3, #3
 800cabc:	2200      	movs	r2, #0
 800cabe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	371c      	adds	r7, #28
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	20000a5c 	.word	0x20000a5c

0800cad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cae2:	2200      	movs	r2, #0
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff ffaa 	bl	800ca40 <FATFS_LinkDriverEx>
 800caec:	4603      	mov	r3, r0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cafc:	f3ef 8305 	mrs	r3, IPSR
 800cb00:	607b      	str	r3, [r7, #4]
  return(result);
 800cb02:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	bf14      	ite	ne
 800cb08:	2301      	movne	r3, #1
 800cb0a:	2300      	moveq	r3, #0
 800cb0c:	b2db      	uxtb	r3, r3
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cb1e:	f001 fa49 	bl	800dfb4 <xTaskGetSchedulerState>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d101      	bne.n	800cb2c <osKernelRunning+0x12>
    return 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e000      	b.n	800cb2e <osKernelRunning+0x14>
  else
    return 1;
 800cb2c:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cb36:	f7ff ffde 	bl	800caf6 <inHandlerMode>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d003      	beq.n	800cb48 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cb40:	f000 ffb8 	bl	800dab4 <xTaskGetTickCountFromISR>
 800cb44:	4603      	mov	r3, r0
 800cb46:	e002      	b.n	800cb4e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cb48:	f000 ffa4 	bl	800da94 <xTaskGetTickCount>
 800cb4c:	4603      	mov	r3, r0
  }
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cb52:	b590      	push	{r4, r7, lr}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af02      	add	r7, sp, #8
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d011      	beq.n	800cb88 <osMessageCreate+0x36>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00d      	beq.n	800cb88 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6818      	ldr	r0, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6859      	ldr	r1, [r3, #4]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	2400      	movs	r4, #0
 800cb7e:	9400      	str	r4, [sp, #0]
 800cb80:	f000 f9d6 	bl	800cf30 <xQueueGenericCreateStatic>
 800cb84:	4603      	mov	r3, r0
 800cb86:	e008      	b.n	800cb9a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6818      	ldr	r0, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	4619      	mov	r1, r3
 800cb94:	f000 fa4e 	bl	800d034 <xQueueGenericCreate>
 800cb98:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	370c      	adds	r7, #12
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd90      	pop	{r4, r7, pc}
	...

0800cba4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <osMessagePut+0x1e>
    ticks = 1;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cbc2:	f7ff ff98 	bl	800caf6 <inHandlerMode>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d018      	beq.n	800cbfe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cbcc:	f107 0210 	add.w	r2, r7, #16
 800cbd0:	f107 0108 	add.w	r1, r7, #8
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f000 fb94 	bl	800d304 <xQueueGenericSendFromISR>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d001      	beq.n	800cbe6 <osMessagePut+0x42>
      return osErrorOS;
 800cbe2:	23ff      	movs	r3, #255	; 0xff
 800cbe4:	e018      	b.n	800cc18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d014      	beq.n	800cc16 <osMessagePut+0x72>
 800cbec:	4b0c      	ldr	r3, [pc, #48]	; (800cc20 <osMessagePut+0x7c>)
 800cbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	e00b      	b.n	800cc16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cbfe:	f107 0108 	add.w	r1, r7, #8
 800cc02:	2300      	movs	r3, #0
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 fa76 	bl	800d0f8 <xQueueGenericSend>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d001      	beq.n	800cc16 <osMessagePut+0x72>
      return osErrorOS;
 800cc12:	23ff      	movs	r3, #255	; 0xff
 800cc14:	e000      	b.n	800cc18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	e000ed04 	.word	0xe000ed04

0800cc24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b08b      	sub	sp, #44	; 0x2c
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cc3e:	2380      	movs	r3, #128	; 0x80
 800cc40:	617b      	str	r3, [r7, #20]
    return event;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	461c      	mov	r4, r3
 800cc46:	f107 0314 	add.w	r3, r7, #20
 800cc4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc52:	e054      	b.n	800ccfe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cc54:	2300      	movs	r3, #0
 800cc56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc62:	d103      	bne.n	800cc6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cc64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
 800cc6a:	e009      	b.n	800cc80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d006      	beq.n	800cc80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <osMessageGet+0x5c>
      ticks = 1;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cc80:	f7ff ff39 	bl	800caf6 <inHandlerMode>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d01c      	beq.n	800ccc4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cc8a:	f107 0220 	add.w	r2, r7, #32
 800cc8e:	f107 0314 	add.w	r3, r7, #20
 800cc92:	3304      	adds	r3, #4
 800cc94:	4619      	mov	r1, r3
 800cc96:	68b8      	ldr	r0, [r7, #8]
 800cc98:	f000 fcba 	bl	800d610 <xQueueReceiveFromISR>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d102      	bne.n	800cca8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cca2:	2310      	movs	r3, #16
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e001      	b.n	800ccac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01d      	beq.n	800ccee <osMessageGet+0xca>
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <osMessageGet+0xe4>)
 800ccb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	e014      	b.n	800ccee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ccc4:	f107 0314 	add.w	r3, r7, #20
 800ccc8:	3304      	adds	r3, #4
 800ccca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cccc:	4619      	mov	r1, r3
 800ccce:	68b8      	ldr	r0, [r7, #8]
 800ccd0:	f000 fbb8 	bl	800d444 <xQueueReceive>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d102      	bne.n	800cce0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ccda:	2310      	movs	r3, #16
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e006      	b.n	800ccee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <osMessageGet+0xc6>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e000      	b.n	800ccec <osMessageGet+0xc8>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	461c      	mov	r4, r3
 800ccf2:	f107 0314 	add.w	r3, r7, #20
 800ccf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	372c      	adds	r7, #44	; 0x2c
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd90      	pop	{r4, r7, pc}
 800cd06:	bf00      	nop
 800cd08:	e000ed04 	.word	0xe000ed04

0800cd0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f103 0208 	add.w	r2, r3, #8
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f103 0208 	add.w	r2, r3, #8
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f103 0208 	add.w	r2, r3, #8
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	601a      	str	r2, [r3, #0]
}
 800cd88:	bf00      	nop
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdaa:	d103      	bne.n	800cdb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e00c      	b.n	800cdce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e002      	b.n	800cdc2 <vListInsert+0x2e>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d2f6      	bcs.n	800cdbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	601a      	str	r2, [r3, #0]
}
 800cdfa:	bf00      	nop
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce06:	b480      	push	{r7}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	6892      	ldr	r2, [r2, #8]
 800ce1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6852      	ldr	r2, [r2, #4]
 800ce26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d103      	bne.n	800ce3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	1e5a      	subs	r2, r3, #1
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
	...

0800ce5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10c      	bne.n	800ce8a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ce8a:	f001 f9b5 	bl	800e1f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce9a:	fb01 f303 	mul.w	r3, r1, r3
 800ce9e:	441a      	add	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceba:	3b01      	subs	r3, #1
 800cebc:	68f9      	ldr	r1, [r7, #12]
 800cebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cec0:	fb01 f303 	mul.w	r3, r1, r3
 800cec4:	441a      	add	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	22ff      	movs	r2, #255	; 0xff
 800cece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	22ff      	movs	r2, #255	; 0xff
 800ced6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d114      	bne.n	800cf0a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01a      	beq.n	800cf1e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3310      	adds	r3, #16
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 ff55 	bl	800dd9c <xTaskRemoveFromEventList>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cef8:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <xQueueGenericReset+0xd0>)
 800cefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	e009      	b.n	800cf1e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3310      	adds	r3, #16
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fefc 	bl	800cd0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff fef7 	bl	800cd0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf1e:	f001 f99f 	bl	800e260 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf22:	2301      	movs	r3, #1
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08e      	sub	sp, #56	; 0x38
 800cf34:	af02      	add	r7, sp, #8
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10c      	bne.n	800cf5e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	b672      	cpsid	i
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	b662      	cpsie	i
 800cf58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf5a:	bf00      	nop
 800cf5c:	e7fe      	b.n	800cf5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10c      	bne.n	800cf7e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	b672      	cpsid	i
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	b662      	cpsie	i
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf7a:	bf00      	nop
 800cf7c:	e7fe      	b.n	800cf7c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <xQueueGenericCreateStatic+0x5a>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <xQueueGenericCreateStatic+0x5e>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <xQueueGenericCreateStatic+0x60>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10c      	bne.n	800cfae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	b672      	cpsid	i
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	b662      	cpsie	i
 800cfa8:	623b      	str	r3, [r7, #32]
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <xQueueGenericCreateStatic+0x8a>
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <xQueueGenericCreateStatic+0x8e>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <xQueueGenericCreateStatic+0x90>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10c      	bne.n	800cfde <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	b672      	cpsid	i
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	b662      	cpsie	i
 800cfd8:	61fb      	str	r3, [r7, #28]
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfde:	2348      	movs	r3, #72	; 0x48
 800cfe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b48      	cmp	r3, #72	; 0x48
 800cfe6:	d00c      	beq.n	800d002 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	b672      	cpsid	i
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	b662      	cpsie	i
 800cffc:	61bb      	str	r3, [r7, #24]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d002:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00d      	beq.n	800d02a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d016:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4613      	mov	r3, r2
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	68b9      	ldr	r1, [r7, #8]
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f000 f847 	bl	800d0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3730      	adds	r7, #48	; 0x30
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d034:	b580      	push	{r7, lr}
 800d036:	b08a      	sub	sp, #40	; 0x28
 800d038:	af02      	add	r7, sp, #8
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	4613      	mov	r3, r2
 800d040:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10c      	bne.n	800d062 <xQueueGenericCreate+0x2e>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	b672      	cpsid	i
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	b662      	cpsie	i
 800d05c:	613b      	str	r3, [r7, #16]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d102      	bne.n	800d06e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	e004      	b.n	800d078 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	fb02 f303 	mul.w	r3, r2, r3
 800d076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3348      	adds	r3, #72	; 0x48
 800d07c:	4618      	mov	r0, r3
 800d07e:	f001 f9bb 	bl	800e3f8 <pvPortMalloc>
 800d082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d011      	beq.n	800d0ae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3348      	adds	r3, #72	; 0x48
 800d092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d09c:	79fa      	ldrb	r2, [r7, #7]
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 f805 	bl	800d0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0ae:	69bb      	ldr	r3, [r7, #24]
	}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3720      	adds	r7, #32
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	e002      	b.n	800d0da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	69b8      	ldr	r0, [r7, #24]
 800d0ea:	f7ff feb7 	bl	800ce5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08e      	sub	sp, #56	; 0x38
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d106:	2300      	movs	r3, #0
 800d108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10c      	bne.n	800d12e <xQueueGenericSend+0x36>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d103      	bne.n	800d13c <xQueueGenericSend+0x44>
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <xQueueGenericSend+0x48>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e000      	b.n	800d142 <xQueueGenericSend+0x4a>
 800d140:	2300      	movs	r3, #0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10c      	bne.n	800d160 <xQueueGenericSend+0x68>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	b672      	cpsid	i
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	b662      	cpsie	i
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d103      	bne.n	800d16e <xQueueGenericSend+0x76>
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <xQueueGenericSend+0x7a>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <xQueueGenericSend+0x7c>
 800d172:	2300      	movs	r3, #0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10c      	bne.n	800d192 <xQueueGenericSend+0x9a>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	b672      	cpsid	i
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	b662      	cpsie	i
 800d18c:	623b      	str	r3, [r7, #32]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d192:	f000 ff0f 	bl	800dfb4 <xTaskGetSchedulerState>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d102      	bne.n	800d1a2 <xQueueGenericSend+0xaa>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <xQueueGenericSend+0xae>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e000      	b.n	800d1a8 <xQueueGenericSend+0xb0>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10c      	bne.n	800d1c6 <xQueueGenericSend+0xce>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	b672      	cpsid	i
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	b662      	cpsie	i
 800d1c0:	61fb      	str	r3, [r7, #28]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1c6:	f001 f817 	bl	800e1f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d302      	bcc.n	800d1dc <xQueueGenericSend+0xe4>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d129      	bne.n	800d230 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1dc:	683a      	ldr	r2, [r7, #0]
 800d1de:	68b9      	ldr	r1, [r7, #8]
 800d1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e2:	f000 fa9b 	bl	800d71c <prvCopyDataToQueue>
 800d1e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d010      	beq.n	800d212 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	3324      	adds	r3, #36	; 0x24
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 fdd1 	bl	800dd9c <xTaskRemoveFromEventList>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d013      	beq.n	800d228 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d200:	4b3f      	ldr	r3, [pc, #252]	; (800d300 <xQueueGenericSend+0x208>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	e00a      	b.n	800d228 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d007      	beq.n	800d228 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d218:	4b39      	ldr	r3, [pc, #228]	; (800d300 <xQueueGenericSend+0x208>)
 800d21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d228:	f001 f81a 	bl	800e260 <vPortExitCritical>
				return pdPASS;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e063      	b.n	800d2f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d103      	bne.n	800d23e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d236:	f001 f813 	bl	800e260 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e05c      	b.n	800d2f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d244:	f107 0314 	add.w	r3, r7, #20
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 fe0b 	bl	800de64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d24e:	2301      	movs	r3, #1
 800d250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d252:	f001 f805 	bl	800e260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d256:	f000 fb71 	bl	800d93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d25a:	f000 ffcd 	bl	800e1f8 <vPortEnterCritical>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d264:	b25b      	sxtb	r3, r3
 800d266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d26a:	d103      	bne.n	800d274 <xQueueGenericSend+0x17c>
 800d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d27a:	b25b      	sxtb	r3, r3
 800d27c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d280:	d103      	bne.n	800d28a <xQueueGenericSend+0x192>
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	2200      	movs	r2, #0
 800d286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d28a:	f000 ffe9 	bl	800e260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d28e:	1d3a      	adds	r2, r7, #4
 800d290:	f107 0314 	add.w	r3, r7, #20
 800d294:	4611      	mov	r1, r2
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fdfa 	bl	800de90 <xTaskCheckForTimeOut>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d124      	bne.n	800d2ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a4:	f000 fb32 	bl	800d90c <prvIsQueueFull>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d018      	beq.n	800d2e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	3310      	adds	r3, #16
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fd4a 	bl	800dd50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2be:	f000 fabd 	bl	800d83c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2c2:	f000 fb49 	bl	800d958 <xTaskResumeAll>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f47f af7c 	bne.w	800d1c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <xQueueGenericSend+0x208>)
 800d2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	e772      	b.n	800d1c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e2:	f000 faab 	bl	800d83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2e6:	f000 fb37 	bl	800d958 <xTaskResumeAll>
 800d2ea:	e76c      	b.n	800d1c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ee:	f000 faa5 	bl	800d83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2f2:	f000 fb31 	bl	800d958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3738      	adds	r7, #56	; 0x38
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	e000ed04 	.word	0xe000ed04

0800d304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08e      	sub	sp, #56	; 0x38
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10c      	bne.n	800d336 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	b672      	cpsid	i
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	b662      	cpsie	i
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d103      	bne.n	800d344 <xQueueGenericSendFromISR+0x40>
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <xQueueGenericSendFromISR+0x44>
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <xQueueGenericSendFromISR+0x46>
 800d348:	2300      	movs	r3, #0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10c      	bne.n	800d368 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	b672      	cpsid	i
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	b662      	cpsie	i
 800d362:	623b      	str	r3, [r7, #32]
}
 800d364:	bf00      	nop
 800d366:	e7fe      	b.n	800d366 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d103      	bne.n	800d376 <xQueueGenericSendFromISR+0x72>
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d372:	2b01      	cmp	r3, #1
 800d374:	d101      	bne.n	800d37a <xQueueGenericSendFromISR+0x76>
 800d376:	2301      	movs	r3, #1
 800d378:	e000      	b.n	800d37c <xQueueGenericSendFromISR+0x78>
 800d37a:	2300      	movs	r3, #0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10c      	bne.n	800d39a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	b672      	cpsid	i
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	b662      	cpsie	i
 800d394:	61fb      	str	r3, [r7, #28]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d39a:	f000 ffe9 	bl	800e370 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d39e:	f3ef 8211 	mrs	r2, BASEPRI
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	b672      	cpsid	i
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	b662      	cpsie	i
 800d3b6:	61ba      	str	r2, [r7, #24]
 800d3b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <xQueueGenericSendFromISR+0xcc>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d12c      	bne.n	800d42a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	68b9      	ldr	r1, [r7, #8]
 800d3de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e0:	f000 f99c 	bl	800d71c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ec:	d112      	bne.n	800d414 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d016      	beq.n	800d424 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	3324      	adds	r3, #36	; 0x24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 fcce 	bl	800dd9c <xTaskRemoveFromEventList>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00e      	beq.n	800d424 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	601a      	str	r2, [r3, #0]
 800d412:	e007      	b.n	800d424 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d418:	3301      	adds	r3, #1
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	b25a      	sxtb	r2, r3
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d424:	2301      	movs	r3, #1
 800d426:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d428:	e001      	b.n	800d42e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3738      	adds	r7, #56	; 0x38
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08c      	sub	sp, #48	; 0x30
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d450:	2300      	movs	r3, #0
 800d452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10c      	bne.n	800d478 <xQueueReceive+0x34>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	b672      	cpsid	i
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	b662      	cpsie	i
 800d472:	623b      	str	r3, [r7, #32]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d103      	bne.n	800d486 <xQueueReceive+0x42>
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <xQueueReceive+0x46>
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <xQueueReceive+0x48>
 800d48a:	2300      	movs	r3, #0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10c      	bne.n	800d4aa <xQueueReceive+0x66>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	b672      	cpsid	i
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	b662      	cpsie	i
 800d4a4:	61fb      	str	r3, [r7, #28]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4aa:	f000 fd83 	bl	800dfb4 <xTaskGetSchedulerState>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <xQueueReceive+0x76>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <xQueueReceive+0x7a>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueReceive+0x7c>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10c      	bne.n	800d4de <xQueueReceive+0x9a>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	b672      	cpsid	i
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	b662      	cpsie	i
 800d4d8:	61bb      	str	r3, [r7, #24]
}
 800d4da:	bf00      	nop
 800d4dc:	e7fe      	b.n	800d4dc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4de:	f000 fe8b 	bl	800e1f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01f      	beq.n	800d52e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f2:	f000 f97d 	bl	800d7f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	1e5a      	subs	r2, r3, #1
 800d4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00f      	beq.n	800d526 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d508:	3310      	adds	r3, #16
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fc46 	bl	800dd9c <xTaskRemoveFromEventList>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d007      	beq.n	800d526 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d516:	4b3d      	ldr	r3, [pc, #244]	; (800d60c <xQueueReceive+0x1c8>)
 800d518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d526:	f000 fe9b 	bl	800e260 <vPortExitCritical>
				return pdPASS;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e069      	b.n	800d602 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d103      	bne.n	800d53c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d534:	f000 fe94 	bl	800e260 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d538:	2300      	movs	r3, #0
 800d53a:	e062      	b.n	800d602 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d542:	f107 0310 	add.w	r3, r7, #16
 800d546:	4618      	mov	r0, r3
 800d548:	f000 fc8c 	bl	800de64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d54c:	2301      	movs	r3, #1
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d550:	f000 fe86 	bl	800e260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d554:	f000 f9f2 	bl	800d93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d558:	f000 fe4e 	bl	800e1f8 <vPortEnterCritical>
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d562:	b25b      	sxtb	r3, r3
 800d564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d568:	d103      	bne.n	800d572 <xQueueReceive+0x12e>
 800d56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d578:	b25b      	sxtb	r3, r3
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d57e:	d103      	bne.n	800d588 <xQueueReceive+0x144>
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d588:	f000 fe6a 	bl	800e260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d58c:	1d3a      	adds	r2, r7, #4
 800d58e:	f107 0310 	add.w	r3, r7, #16
 800d592:	4611      	mov	r1, r2
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fc7b 	bl	800de90 <xTaskCheckForTimeOut>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d123      	bne.n	800d5e8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5a2:	f000 f99d 	bl	800d8e0 <prvIsQueueEmpty>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d017      	beq.n	800d5dc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	3324      	adds	r3, #36	; 0x24
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fbcb 	bl	800dd50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5bc:	f000 f93e 	bl	800d83c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5c0:	f000 f9ca 	bl	800d958 <xTaskResumeAll>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d189      	bne.n	800d4de <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d5ca:	4b10      	ldr	r3, [pc, #64]	; (800d60c <xQueueReceive+0x1c8>)
 800d5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	e780      	b.n	800d4de <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5de:	f000 f92d 	bl	800d83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5e2:	f000 f9b9 	bl	800d958 <xTaskResumeAll>
 800d5e6:	e77a      	b.n	800d4de <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ea:	f000 f927 	bl	800d83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5ee:	f000 f9b3 	bl	800d958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5f4:	f000 f974 	bl	800d8e0 <prvIsQueueEmpty>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f43f af6f 	beq.w	800d4de <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d600:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d602:	4618      	mov	r0, r3
 800d604:	3730      	adds	r7, #48	; 0x30
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	e000ed04 	.word	0xe000ed04

0800d610 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08e      	sub	sp, #56	; 0x38
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10c      	bne.n	800d640 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62a:	b672      	cpsid	i
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	b662      	cpsie	i
 800d63a:	623b      	str	r3, [r7, #32]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d103      	bne.n	800d64e <xQueueReceiveFromISR+0x3e>
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d101      	bne.n	800d652 <xQueueReceiveFromISR+0x42>
 800d64e:	2301      	movs	r3, #1
 800d650:	e000      	b.n	800d654 <xQueueReceiveFromISR+0x44>
 800d652:	2300      	movs	r3, #0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10c      	bne.n	800d672 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	b672      	cpsid	i
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	b662      	cpsie	i
 800d66c:	61fb      	str	r3, [r7, #28]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d672:	f000 fe7d 	bl	800e370 <vPortValidateInterruptPriority>
	__asm volatile
 800d676:	f3ef 8211 	mrs	r2, BASEPRI
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	b672      	cpsid	i
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	b662      	cpsie	i
 800d68e:	61ba      	str	r2, [r7, #24]
 800d690:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d692:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d694:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d02f      	beq.n	800d702 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6ac:	68b9      	ldr	r1, [r7, #8]
 800d6ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6b0:	f000 f89e 	bl	800d7f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	1e5a      	subs	r2, r3, #1
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d6bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6c4:	d112      	bne.n	800d6ec <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d016      	beq.n	800d6fc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d0:	3310      	adds	r3, #16
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fb62 	bl	800dd9c <xTaskRemoveFromEventList>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00e      	beq.n	800d6fc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00b      	beq.n	800d6fc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	601a      	str	r2, [r3, #0]
 800d6ea:	e007      	b.n	800d6fc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	b25a      	sxtb	r2, r3
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d700:	e001      	b.n	800d706 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d702:	2300      	movs	r3, #0
 800d704:	637b      	str	r3, [r7, #52]	; 0x34
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	f383 8811 	msr	BASEPRI, r3
}
 800d710:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d714:	4618      	mov	r0, r3
 800d716:	3738      	adds	r7, #56	; 0x38
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10d      	bne.n	800d756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d14d      	bne.n	800d7de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	4618      	mov	r0, r3
 800d748:	f000 fc52 	bl	800dff0 <xTaskPriorityDisinherit>
 800d74c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	609a      	str	r2, [r3, #8]
 800d754:	e043      	b.n	800d7de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d119      	bne.n	800d790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6858      	ldr	r0, [r3, #4]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d764:	461a      	mov	r2, r3
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	f001 f89e 	bl	800e8a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	441a      	add	r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	429a      	cmp	r2, r3
 800d784:	d32b      	bcc.n	800d7de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	605a      	str	r2, [r3, #4]
 800d78e:	e026      	b.n	800d7de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68d8      	ldr	r0, [r3, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d798:	461a      	mov	r2, r3
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	f001 f884 	bl	800e8a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a8:	425b      	negs	r3, r3
 800d7aa:	441a      	add	r2, r3
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	68da      	ldr	r2, [r3, #12]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d207      	bcs.n	800d7cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	689a      	ldr	r2, [r3, #8]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c4:	425b      	negs	r3, r3
 800d7c6:	441a      	add	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d105      	bne.n	800d7de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7e6:	697b      	ldr	r3, [r7, #20]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d018      	beq.n	800d834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80a:	441a      	add	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d303      	bcc.n	800d824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	68d9      	ldr	r1, [r3, #12]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82c:	461a      	mov	r2, r3
 800d82e:	6838      	ldr	r0, [r7, #0]
 800d830:	f001 f83a 	bl	800e8a8 <memcpy>
	}
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d844:	f000 fcd8 	bl	800e1f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d84e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d850:	e011      	b.n	800d876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d856:	2b00      	cmp	r3, #0
 800d858:	d012      	beq.n	800d880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3324      	adds	r3, #36	; 0x24
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 fa9c 	bl	800dd9c <xTaskRemoveFromEventList>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d86a:	f000 fb77 	bl	800df5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	3b01      	subs	r3, #1
 800d872:	b2db      	uxtb	r3, r3
 800d874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	dce9      	bgt.n	800d852 <prvUnlockQueue+0x16>
 800d87e:	e000      	b.n	800d882 <prvUnlockQueue+0x46>
					break;
 800d880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	22ff      	movs	r2, #255	; 0xff
 800d886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d88a:	f000 fce9 	bl	800e260 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d88e:	f000 fcb3 	bl	800e1f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d89a:	e011      	b.n	800d8c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d012      	beq.n	800d8ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3310      	adds	r3, #16
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 fa77 	bl	800dd9c <xTaskRemoveFromEventList>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8b4:	f000 fb52 	bl	800df5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8b8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dce9      	bgt.n	800d89c <prvUnlockQueue+0x60>
 800d8c8:	e000      	b.n	800d8cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	22ff      	movs	r2, #255	; 0xff
 800d8d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d8d4:	f000 fcc4 	bl	800e260 <vPortExitCritical>
}
 800d8d8:	bf00      	nop
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8e8:	f000 fc86 	bl	800e1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	e001      	b.n	800d8fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8fe:	f000 fcaf 	bl	800e260 <vPortExitCritical>

	return xReturn;
 800d902:	68fb      	ldr	r3, [r7, #12]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d914:	f000 fc70 	bl	800e1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d920:	429a      	cmp	r2, r3
 800d922:	d102      	bne.n	800d92a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d924:	2301      	movs	r3, #1
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e001      	b.n	800d92e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d92e:	f000 fc97 	bl	800e260 <vPortExitCritical>

	return xReturn;
 800d932:	68fb      	ldr	r3, [r7, #12]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d940:	4b04      	ldr	r3, [pc, #16]	; (800d954 <vTaskSuspendAll+0x18>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	4a03      	ldr	r2, [pc, #12]	; (800d954 <vTaskSuspendAll+0x18>)
 800d948:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d94a:	bf00      	nop
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	20000b48 	.word	0x20000b48

0800d958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d962:	2300      	movs	r3, #0
 800d964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d966:	4b42      	ldr	r3, [pc, #264]	; (800da70 <xTaskResumeAll+0x118>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10c      	bne.n	800d988 <xTaskResumeAll+0x30>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	b672      	cpsid	i
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	b662      	cpsie	i
 800d982:	603b      	str	r3, [r7, #0]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d988:	f000 fc36 	bl	800e1f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d98c:	4b38      	ldr	r3, [pc, #224]	; (800da70 <xTaskResumeAll+0x118>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3b01      	subs	r3, #1
 800d992:	4a37      	ldr	r2, [pc, #220]	; (800da70 <xTaskResumeAll+0x118>)
 800d994:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d996:	4b36      	ldr	r3, [pc, #216]	; (800da70 <xTaskResumeAll+0x118>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d161      	bne.n	800da62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d99e:	4b35      	ldr	r3, [pc, #212]	; (800da74 <xTaskResumeAll+0x11c>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d05d      	beq.n	800da62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9a6:	e02e      	b.n	800da06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9a8:	4b33      	ldr	r3, [pc, #204]	; (800da78 <xTaskResumeAll+0x120>)
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	3318      	adds	r3, #24
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fa26 	bl	800ce06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff fa21 	bl	800ce06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	409a      	lsls	r2, r3
 800d9cc:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <xTaskResumeAll+0x124>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	4a2a      	ldr	r2, [pc, #168]	; (800da7c <xTaskResumeAll+0x124>)
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9da:	4613      	mov	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4a27      	ldr	r2, [pc, #156]	; (800da80 <xTaskResumeAll+0x128>)
 800d9e4:	441a      	add	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7ff f9ad 	bl	800cd4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f6:	4b23      	ldr	r3, [pc, #140]	; (800da84 <xTaskResumeAll+0x12c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d302      	bcc.n	800da06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800da00:	4b21      	ldr	r3, [pc, #132]	; (800da88 <xTaskResumeAll+0x130>)
 800da02:	2201      	movs	r2, #1
 800da04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da06:	4b1c      	ldr	r3, [pc, #112]	; (800da78 <xTaskResumeAll+0x120>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d1cc      	bne.n	800d9a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da14:	f000 faae 	bl	800df74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800da18:	4b1c      	ldr	r3, [pc, #112]	; (800da8c <xTaskResumeAll+0x134>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d010      	beq.n	800da46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da24:	f000 f858 	bl	800dad8 <xTaskIncrementTick>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800da2e:	4b16      	ldr	r3, [pc, #88]	; (800da88 <xTaskResumeAll+0x130>)
 800da30:	2201      	movs	r2, #1
 800da32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	3b01      	subs	r3, #1
 800da38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1f1      	bne.n	800da24 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800da40:	4b12      	ldr	r3, [pc, #72]	; (800da8c <xTaskResumeAll+0x134>)
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da46:	4b10      	ldr	r3, [pc, #64]	; (800da88 <xTaskResumeAll+0x130>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d009      	beq.n	800da62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da4e:	2301      	movs	r3, #1
 800da50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da52:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <xTaskResumeAll+0x138>)
 800da54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da62:	f000 fbfd 	bl	800e260 <vPortExitCritical>

	return xAlreadyYielded;
 800da66:	68bb      	ldr	r3, [r7, #8]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20000b48 	.word	0x20000b48
 800da74:	20000b28 	.word	0x20000b28
 800da78:	20000b00 	.word	0x20000b00
 800da7c:	20000b30 	.word	0x20000b30
 800da80:	20000a6c 	.word	0x20000a6c
 800da84:	20000a68 	.word	0x20000a68
 800da88:	20000b3c 	.word	0x20000b3c
 800da8c:	20000b38 	.word	0x20000b38
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <xTaskGetTickCount+0x1c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800daa0:	687b      	ldr	r3, [r7, #4]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	20000b2c 	.word	0x20000b2c

0800dab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daba:	f000 fc59 	bl	800e370 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dac2:	4b04      	ldr	r3, [pc, #16]	; (800dad4 <xTaskGetTickCountFromISR+0x20>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dac8:	683b      	ldr	r3, [r7, #0]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	20000b2c 	.word	0x20000b2c

0800dad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b086      	sub	sp, #24
 800dadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dae2:	4b4f      	ldr	r3, [pc, #316]	; (800dc20 <xTaskIncrementTick+0x148>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 808a 	bne.w	800dc00 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800daec:	4b4d      	ldr	r3, [pc, #308]	; (800dc24 <xTaskIncrementTick+0x14c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	3301      	adds	r3, #1
 800daf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800daf4:	4a4b      	ldr	r2, [pc, #300]	; (800dc24 <xTaskIncrementTick+0x14c>)
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d122      	bne.n	800db46 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800db00:	4b49      	ldr	r3, [pc, #292]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <xTaskIncrementTick+0x4c>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	603b      	str	r3, [r7, #0]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <xTaskIncrementTick+0x4a>
 800db24:	4b40      	ldr	r3, [pc, #256]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	60fb      	str	r3, [r7, #12]
 800db2a:	4b40      	ldr	r3, [pc, #256]	; (800dc2c <xTaskIncrementTick+0x154>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a3e      	ldr	r2, [pc, #248]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	4a3e      	ldr	r2, [pc, #248]	; (800dc2c <xTaskIncrementTick+0x154>)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	4b3d      	ldr	r3, [pc, #244]	; (800dc30 <xTaskIncrementTick+0x158>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3301      	adds	r3, #1
 800db3e:	4a3c      	ldr	r2, [pc, #240]	; (800dc30 <xTaskIncrementTick+0x158>)
 800db40:	6013      	str	r3, [r2, #0]
 800db42:	f000 fa17 	bl	800df74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db46:	4b3b      	ldr	r3, [pc, #236]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d348      	bcc.n	800dbe2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db50:	4b35      	ldr	r3, [pc, #212]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5a:	4b36      	ldr	r3, [pc, #216]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db60:	601a      	str	r2, [r3, #0]
					break;
 800db62:	e03e      	b.n	800dbe2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db64:	4b30      	ldr	r3, [pc, #192]	; (800dc28 <xTaskIncrementTick+0x150>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d203      	bcs.n	800db84 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db7c:	4a2d      	ldr	r2, [pc, #180]	; (800dc34 <xTaskIncrementTick+0x15c>)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db82:	e02e      	b.n	800dbe2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	3304      	adds	r3, #4
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff f93c 	bl	800ce06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db92:	2b00      	cmp	r3, #0
 800db94:	d004      	beq.n	800dba0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	3318      	adds	r3, #24
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff f933 	bl	800ce06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	2201      	movs	r2, #1
 800dba6:	409a      	lsls	r2, r3
 800dba8:	4b23      	ldr	r3, [pc, #140]	; (800dc38 <xTaskIncrementTick+0x160>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4313      	orrs	r3, r2
 800dbae:	4a22      	ldr	r2, [pc, #136]	; (800dc38 <xTaskIncrementTick+0x160>)
 800dbb0:	6013      	str	r3, [r2, #0]
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	4a1f      	ldr	r2, [pc, #124]	; (800dc3c <xTaskIncrementTick+0x164>)
 800dbc0:	441a      	add	r2, r3
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7ff f8bf 	bl	800cd4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd2:	4b1b      	ldr	r3, [pc, #108]	; (800dc40 <xTaskIncrementTick+0x168>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d3b9      	bcc.n	800db50 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbe0:	e7b6      	b.n	800db50 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbe2:	4b17      	ldr	r3, [pc, #92]	; (800dc40 <xTaskIncrementTick+0x168>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe8:	4914      	ldr	r1, [pc, #80]	; (800dc3c <xTaskIncrementTick+0x164>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	440b      	add	r3, r1
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d907      	bls.n	800dc0a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	617b      	str	r3, [r7, #20]
 800dbfe:	e004      	b.n	800dc0a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dc00:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <xTaskIncrementTick+0x16c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3301      	adds	r3, #1
 800dc06:	4a0f      	ldr	r2, [pc, #60]	; (800dc44 <xTaskIncrementTick+0x16c>)
 800dc08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc0a:	4b0f      	ldr	r3, [pc, #60]	; (800dc48 <xTaskIncrementTick+0x170>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800dc12:	2301      	movs	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc16:	697b      	ldr	r3, [r7, #20]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	20000b48 	.word	0x20000b48
 800dc24:	20000b2c 	.word	0x20000b2c
 800dc28:	20000af8 	.word	0x20000af8
 800dc2c:	20000afc 	.word	0x20000afc
 800dc30:	20000b40 	.word	0x20000b40
 800dc34:	20000b44 	.word	0x20000b44
 800dc38:	20000b30 	.word	0x20000b30
 800dc3c:	20000a6c 	.word	0x20000a6c
 800dc40:	20000a68 	.word	0x20000a68
 800dc44:	20000b38 	.word	0x20000b38
 800dc48:	20000b3c 	.word	0x20000b3c

0800dc4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc52:	4b3a      	ldr	r3, [pc, #232]	; (800dd3c <vTaskSwitchContext+0xf0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc5a:	4b39      	ldr	r3, [pc, #228]	; (800dd40 <vTaskSwitchContext+0xf4>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc60:	e068      	b.n	800dd34 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800dc62:	4b37      	ldr	r3, [pc, #220]	; (800dd40 <vTaskSwitchContext+0xf4>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dc68:	4b36      	ldr	r3, [pc, #216]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6e:	61fb      	str	r3, [r7, #28]
 800dc70:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dc74:	61bb      	str	r3, [r7, #24]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	69ba      	ldr	r2, [r7, #24]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d111      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	3304      	adds	r3, #4
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d10b      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69ba      	ldr	r2, [r7, #24]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d105      	bne.n	800dca4 <vTaskSwitchContext+0x58>
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d008      	beq.n	800dcb6 <vTaskSwitchContext+0x6a>
 800dca4:	4b27      	ldr	r3, [pc, #156]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4b26      	ldr	r3, [pc, #152]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3334      	adds	r3, #52	; 0x34
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7f2 fc2b 	bl	800050c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb6:	4b24      	ldr	r3, [pc, #144]	; (800dd48 <vTaskSwitchContext+0xfc>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	fab3 f383 	clz	r3, r3
 800dcc2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dcc4:	7afb      	ldrb	r3, [r7, #11]
 800dcc6:	f1c3 031f 	rsb	r3, r3, #31
 800dcca:	617b      	str	r3, [r7, #20]
 800dccc:	491f      	ldr	r1, [pc, #124]	; (800dd4c <vTaskSwitchContext+0x100>)
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4413      	add	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	440b      	add	r3, r1
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10c      	bne.n	800dcfa <vTaskSwitchContext+0xae>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce4:	b672      	cpsid	i
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	b662      	cpsie	i
 800dcf4:	607b      	str	r3, [r7, #4]
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <vTaskSwitchContext+0xac>
 800dcfa:	697a      	ldr	r2, [r7, #20]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4a11      	ldr	r2, [pc, #68]	; (800dd4c <vTaskSwitchContext+0x100>)
 800dd06:	4413      	add	r3, r2
 800dd08:	613b      	str	r3, [r7, #16]
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	605a      	str	r2, [r3, #4]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	685a      	ldr	r2, [r3, #4]
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d104      	bne.n	800dd2a <vTaskSwitchContext+0xde>
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	605a      	str	r2, [r3, #4]
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	4a04      	ldr	r2, [pc, #16]	; (800dd44 <vTaskSwitchContext+0xf8>)
 800dd32:	6013      	str	r3, [r2, #0]
}
 800dd34:	bf00      	nop
 800dd36:	3720      	adds	r7, #32
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20000b48 	.word	0x20000b48
 800dd40:	20000b3c 	.word	0x20000b3c
 800dd44:	20000a68 	.word	0x20000a68
 800dd48:	20000b30 	.word	0x20000b30
 800dd4c:	20000a6c 	.word	0x20000a6c

0800dd50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10c      	bne.n	800dd7a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	b672      	cpsid	i
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	b662      	cpsie	i
 800dd74:	60fb      	str	r3, [r7, #12]
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd7a:	4b07      	ldr	r3, [pc, #28]	; (800dd98 <vTaskPlaceOnEventList+0x48>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3318      	adds	r3, #24
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff f806 	bl	800cd94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd88:	2101      	movs	r1, #1
 800dd8a:	6838      	ldr	r0, [r7, #0]
 800dd8c:	f000 f9ba 	bl	800e104 <prvAddCurrentTaskToDelayedList>
}
 800dd90:	bf00      	nop
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20000a68 	.word	0x20000a68

0800dd9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10c      	bne.n	800ddcc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	b672      	cpsid	i
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	b662      	cpsie	i
 800ddc6:	60fb      	str	r3, [r7, #12]
}
 800ddc8:	bf00      	nop
 800ddca:	e7fe      	b.n	800ddca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3318      	adds	r3, #24
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff f818 	bl	800ce06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddd6:	4b1d      	ldr	r3, [pc, #116]	; (800de4c <xTaskRemoveFromEventList+0xb0>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d11c      	bne.n	800de18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	3304      	adds	r3, #4
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7ff f80f 	bl	800ce06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	2201      	movs	r2, #1
 800ddee:	409a      	lsls	r2, r3
 800ddf0:	4b17      	ldr	r3, [pc, #92]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	4a16      	ldr	r2, [pc, #88]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddf8:	6013      	str	r3, [r2, #0]
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4a13      	ldr	r2, [pc, #76]	; (800de54 <xTaskRemoveFromEventList+0xb8>)
 800de08:	441a      	add	r2, r3
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fe ff9b 	bl	800cd4c <vListInsertEnd>
 800de16:	e005      	b.n	800de24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	3318      	adds	r3, #24
 800de1c:	4619      	mov	r1, r3
 800de1e:	480e      	ldr	r0, [pc, #56]	; (800de58 <xTaskRemoveFromEventList+0xbc>)
 800de20:	f7fe ff94 	bl	800cd4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de28:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <xTaskRemoveFromEventList+0xc0>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2e:	429a      	cmp	r2, r3
 800de30:	d905      	bls.n	800de3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de32:	2301      	movs	r3, #1
 800de34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de36:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <xTaskRemoveFromEventList+0xc4>)
 800de38:	2201      	movs	r2, #1
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	e001      	b.n	800de42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de42:	697b      	ldr	r3, [r7, #20]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20000b48 	.word	0x20000b48
 800de50:	20000b30 	.word	0x20000b30
 800de54:	20000a6c 	.word	0x20000a6c
 800de58:	20000b00 	.word	0x20000b00
 800de5c:	20000a68 	.word	0x20000a68
 800de60:	20000b3c 	.word	0x20000b3c

0800de64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de6c:	4b06      	ldr	r3, [pc, #24]	; (800de88 <vTaskInternalSetTimeOutState+0x24>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de74:	4b05      	ldr	r3, [pc, #20]	; (800de8c <vTaskInternalSetTimeOutState+0x28>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	605a      	str	r2, [r3, #4]
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	20000b40 	.word	0x20000b40
 800de8c:	20000b2c 	.word	0x20000b2c

0800de90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10c      	bne.n	800deba <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea4:	b672      	cpsid	i
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	b662      	cpsie	i
 800deb4:	613b      	str	r3, [r7, #16]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10c      	bne.n	800deda <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	b672      	cpsid	i
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	b662      	cpsie	i
 800ded4:	60fb      	str	r3, [r7, #12]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800deda:	f000 f98d 	bl	800e1f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dede:	4b1d      	ldr	r3, [pc, #116]	; (800df54 <xTaskCheckForTimeOut+0xc4>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def6:	d102      	bne.n	800defe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800def8:	2300      	movs	r3, #0
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	e023      	b.n	800df46 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	4b15      	ldr	r3, [pc, #84]	; (800df58 <xTaskCheckForTimeOut+0xc8>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	429a      	cmp	r2, r3
 800df08:	d007      	beq.n	800df1a <xTaskCheckForTimeOut+0x8a>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	69ba      	ldr	r2, [r7, #24]
 800df10:	429a      	cmp	r2, r3
 800df12:	d302      	bcc.n	800df1a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df14:	2301      	movs	r3, #1
 800df16:	61fb      	str	r3, [r7, #28]
 800df18:	e015      	b.n	800df46 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	429a      	cmp	r2, r3
 800df22:	d20b      	bcs.n	800df3c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	1ad2      	subs	r2, r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff ff97 	bl	800de64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	e004      	b.n	800df46 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	2200      	movs	r2, #0
 800df40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df42:	2301      	movs	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df46:	f000 f98b 	bl	800e260 <vPortExitCritical>

	return xReturn;
 800df4a:	69fb      	ldr	r3, [r7, #28]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3720      	adds	r7, #32
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	20000b2c 	.word	0x20000b2c
 800df58:	20000b40 	.word	0x20000b40

0800df5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df60:	4b03      	ldr	r3, [pc, #12]	; (800df70 <vTaskMissedYield+0x14>)
 800df62:	2201      	movs	r2, #1
 800df64:	601a      	str	r2, [r3, #0]
}
 800df66:	bf00      	nop
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	20000b3c 	.word	0x20000b3c

0800df74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df7a:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <prvResetNextTaskUnblockTime+0x38>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d104      	bne.n	800df8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df84:	4b0a      	ldr	r3, [pc, #40]	; (800dfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800df86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df8c:	e008      	b.n	800dfa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df8e:	4b07      	ldr	r3, [pc, #28]	; (800dfac <prvResetNextTaskUnblockTime+0x38>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	4a04      	ldr	r2, [pc, #16]	; (800dfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800df9e:	6013      	str	r3, [r2, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20000af8 	.word	0x20000af8
 800dfb0:	20000b44 	.word	0x20000b44

0800dfb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <xTaskGetSchedulerState+0x34>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	e008      	b.n	800dfda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc8:	4b08      	ldr	r3, [pc, #32]	; (800dfec <xTaskGetSchedulerState+0x38>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	607b      	str	r3, [r7, #4]
 800dfd4:	e001      	b.n	800dfda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfda:	687b      	ldr	r3, [r7, #4]
	}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	20000b34 	.word	0x20000b34
 800dfec:	20000b48 	.word	0x20000b48

0800dff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d072      	beq.n	800e0ec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e006:	4b3c      	ldr	r3, [pc, #240]	; (800e0f8 <xTaskPriorityDisinherit+0x108>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	693a      	ldr	r2, [r7, #16]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d00c      	beq.n	800e02a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e014:	b672      	cpsid	i
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	b662      	cpsie	i
 800e024:	60fb      	str	r3, [r7, #12]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10c      	bne.n	800e04c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	b672      	cpsid	i
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	b662      	cpsie	i
 800e046:	60bb      	str	r3, [r7, #8]
}
 800e048:	bf00      	nop
 800e04a:	e7fe      	b.n	800e04a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e050:	1e5a      	subs	r2, r3, #1
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05e:	429a      	cmp	r2, r3
 800e060:	d044      	beq.n	800e0ec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e066:	2b00      	cmp	r3, #0
 800e068:	d140      	bne.n	800e0ec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fec9 	bl	800ce06 <uxListRemove>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d115      	bne.n	800e0a6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	491f      	ldr	r1, [pc, #124]	; (800e0fc <xTaskPriorityDisinherit+0x10c>)
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	440b      	add	r3, r1
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xTaskPriorityDisinherit+0xb6>
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	2201      	movs	r2, #1
 800e096:	fa02 f303 	lsl.w	r3, r2, r3
 800e09a:	43da      	mvns	r2, r3
 800e09c:	4b18      	ldr	r3, [pc, #96]	; (800e100 <xTaskPriorityDisinherit+0x110>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	4a17      	ldr	r2, [pc, #92]	; (800e100 <xTaskPriorityDisinherit+0x110>)
 800e0a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	f1c3 0207 	rsb	r2, r3, #7
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0be:	2201      	movs	r2, #1
 800e0c0:	409a      	lsls	r2, r3
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <xTaskPriorityDisinherit+0x110>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	4a0d      	ldr	r2, [pc, #52]	; (800e100 <xTaskPriorityDisinherit+0x110>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4a08      	ldr	r2, [pc, #32]	; (800e0fc <xTaskPriorityDisinherit+0x10c>)
 800e0da:	441a      	add	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe fe32 	bl	800cd4c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0ec:	697b      	ldr	r3, [r7, #20]
	}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000a68 	.word	0x20000a68
 800e0fc:	20000a6c 	.word	0x20000a6c
 800e100:	20000b30 	.word	0x20000b30

0800e104 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e10e:	4b29      	ldr	r3, [pc, #164]	; (800e1b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e114:	4b28      	ldr	r3, [pc, #160]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3304      	adds	r3, #4
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe fe73 	bl	800ce06 <uxListRemove>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10b      	bne.n	800e13e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e126:	4b24      	ldr	r3, [pc, #144]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	2201      	movs	r2, #1
 800e12e:	fa02 f303 	lsl.w	r3, r2, r3
 800e132:	43da      	mvns	r2, r3
 800e134:	4b21      	ldr	r3, [pc, #132]	; (800e1bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4013      	ands	r3, r2
 800e13a:	4a20      	ldr	r2, [pc, #128]	; (800e1bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e13c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e144:	d10a      	bne.n	800e15c <prvAddCurrentTaskToDelayedList+0x58>
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d007      	beq.n	800e15c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e14c:	4b1a      	ldr	r3, [pc, #104]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3304      	adds	r3, #4
 800e152:	4619      	mov	r1, r3
 800e154:	481a      	ldr	r0, [pc, #104]	; (800e1c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e156:	f7fe fdf9 	bl	800cd4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e15a:	e026      	b.n	800e1aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4413      	add	r3, r2
 800e162:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e164:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	429a      	cmp	r2, r3
 800e172:	d209      	bcs.n	800e188 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e174:	4b13      	ldr	r3, [pc, #76]	; (800e1c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	4b0f      	ldr	r3, [pc, #60]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3304      	adds	r3, #4
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7fe fe07 	bl	800cd94 <vListInsert>
}
 800e186:	e010      	b.n	800e1aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e188:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3304      	adds	r3, #4
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7fe fdfd 	bl	800cd94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e19a:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d202      	bcs.n	800e1aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e1a4:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	6013      	str	r3, [r2, #0]
}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20000b2c 	.word	0x20000b2c
 800e1b8:	20000a68 	.word	0x20000a68
 800e1bc:	20000b30 	.word	0x20000b30
 800e1c0:	20000b14 	.word	0x20000b14
 800e1c4:	20000afc 	.word	0x20000afc
 800e1c8:	20000af8 	.word	0x20000af8
 800e1cc:	20000b44 	.word	0x20000b44

0800e1d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1d0:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <pxCurrentTCBConst2>)
 800e1d2:	6819      	ldr	r1, [r3, #0]
 800e1d4:	6808      	ldr	r0, [r1, #0]
 800e1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1da:	f380 8809 	msr	PSP, r0
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8811 	msr	BASEPRI, r0
 800e1ea:	4770      	bx	lr
 800e1ec:	f3af 8000 	nop.w

0800e1f0 <pxCurrentTCBConst2>:
 800e1f0:	20000a68 	.word	0x20000a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop

0800e1f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e202:	b672      	cpsid	i
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	b662      	cpsie	i
 800e212:	607b      	str	r3, [r7, #4]
}
 800e214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e216:	4b10      	ldr	r3, [pc, #64]	; (800e258 <vPortEnterCritical+0x60>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	3301      	adds	r3, #1
 800e21c:	4a0e      	ldr	r2, [pc, #56]	; (800e258 <vPortEnterCritical+0x60>)
 800e21e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e220:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <vPortEnterCritical+0x60>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d111      	bne.n	800e24c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e228:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <vPortEnterCritical+0x64>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00c      	beq.n	800e24c <vPortEnterCritical+0x54>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	603b      	str	r3, [r7, #0]
}
 800e248:	bf00      	nop
 800e24a:	e7fe      	b.n	800e24a <vPortEnterCritical+0x52>
	}
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	2000000c 	.word	0x2000000c
 800e25c:	e000ed04 	.word	0xe000ed04

0800e260 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e266:	4b13      	ldr	r3, [pc, #76]	; (800e2b4 <vPortExitCritical+0x54>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10c      	bne.n	800e288 <vPortExitCritical+0x28>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	b672      	cpsid	i
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	b662      	cpsie	i
 800e282:	607b      	str	r3, [r7, #4]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <vPortExitCritical+0x54>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	4a09      	ldr	r2, [pc, #36]	; (800e2b4 <vPortExitCritical+0x54>)
 800e290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e292:	4b08      	ldr	r3, [pc, #32]	; (800e2b4 <vPortExitCritical+0x54>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <vPortExitCritical+0x46>
 800e29a:	2300      	movs	r3, #0
 800e29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	f383 8811 	msr	BASEPRI, r3
}
 800e2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2a6:	bf00      	nop
 800e2a8:	370c      	adds	r7, #12
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	2000000c 	.word	0x2000000c
	...

0800e2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2c0:	f3ef 8009 	mrs	r0, PSP
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	4b15      	ldr	r3, [pc, #84]	; (800e320 <pxCurrentTCBConst>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	f01e 0f10 	tst.w	lr, #16
 800e2d0:	bf08      	it	eq
 800e2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2da:	6010      	str	r0, [r2, #0]
 800e2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2e4:	b672      	cpsid	i
 800e2e6:	f380 8811 	msr	BASEPRI, r0
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	b662      	cpsie	i
 800e2f4:	f7ff fcaa 	bl	800dc4c <vTaskSwitchContext>
 800e2f8:	f04f 0000 	mov.w	r0, #0
 800e2fc:	f380 8811 	msr	BASEPRI, r0
 800e300:	bc09      	pop	{r0, r3}
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	6808      	ldr	r0, [r1, #0]
 800e306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	f01e 0f10 	tst.w	lr, #16
 800e30e:	bf08      	it	eq
 800e310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e314:	f380 8809 	msr	PSP, r0
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop

0800e320 <pxCurrentTCBConst>:
 800e320:	20000a68 	.word	0x20000a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop

0800e328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	b672      	cpsid	i
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	b662      	cpsie	i
 800e342:	607b      	str	r3, [r7, #4]
}
 800e344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e346:	f7ff fbc7 	bl	800dad8 <xTaskIncrementTick>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d003      	beq.n	800e358 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e350:	4b06      	ldr	r3, [pc, #24]	; (800e36c <SysTick_Handler+0x44>)
 800e352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	2300      	movs	r3, #0
 800e35a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f383 8811 	msr	BASEPRI, r3
}
 800e362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e364:	bf00      	nop
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	e000ed04 	.word	0xe000ed04

0800e370 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e376:	f3ef 8305 	mrs	r3, IPSR
 800e37a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b0f      	cmp	r3, #15
 800e380:	d916      	bls.n	800e3b0 <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e382:	4a19      	ldr	r2, [pc, #100]	; (800e3e8 <vPortValidateInterruptPriority+0x78>)
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	4413      	add	r3, r2
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e38c:	4b17      	ldr	r3, [pc, #92]	; (800e3ec <vPortValidateInterruptPriority+0x7c>)
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	7afa      	ldrb	r2, [r7, #11]
 800e392:	429a      	cmp	r2, r3
 800e394:	d20c      	bcs.n	800e3b0 <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	b672      	cpsid	i
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	b662      	cpsie	i
 800e3aa:	607b      	str	r3, [r7, #4]
}
 800e3ac:	bf00      	nop
 800e3ae:	e7fe      	b.n	800e3ae <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	; (800e3f0 <vPortValidateInterruptPriority+0x80>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3b8:	4b0e      	ldr	r3, [pc, #56]	; (800e3f4 <vPortValidateInterruptPriority+0x84>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d90c      	bls.n	800e3da <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	b672      	cpsid	i
 800e3c6:	f383 8811 	msr	BASEPRI, r3
 800e3ca:	f3bf 8f6f 	isb	sy
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	b662      	cpsie	i
 800e3d4:	603b      	str	r3, [r7, #0]
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <vPortValidateInterruptPriority+0x68>
	}
 800e3da:	bf00      	nop
 800e3dc:	3714      	adds	r7, #20
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	e000e3f0 	.word	0xe000e3f0
 800e3ec:	20000b4c 	.word	0x20000b4c
 800e3f0:	e000ed0c 	.word	0xe000ed0c
 800e3f4:	20000b50 	.word	0x20000b50

0800e3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e404:	f7ff fa9a 	bl	800d93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e408:	4b5e      	ldr	r3, [pc, #376]	; (800e584 <pvPortMalloc+0x18c>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e410:	f000 f8c2 	bl	800e598 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e414:	4b5c      	ldr	r3, [pc, #368]	; (800e588 <pvPortMalloc+0x190>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4013      	ands	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 8092 	bne.w	800e546 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01f      	beq.n	800e468 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e428:	2208      	movs	r2, #8
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4413      	add	r3, r2
 800e42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b00      	cmp	r3, #0
 800e438:	d016      	beq.n	800e468 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f023 0307 	bic.w	r3, r3, #7
 800e440:	3308      	adds	r3, #8
 800e442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00c      	beq.n	800e468 <pvPortMalloc+0x70>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	b672      	cpsid	i
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	b662      	cpsie	i
 800e462:	617b      	str	r3, [r7, #20]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d06b      	beq.n	800e546 <pvPortMalloc+0x14e>
 800e46e:	4b47      	ldr	r3, [pc, #284]	; (800e58c <pvPortMalloc+0x194>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	429a      	cmp	r2, r3
 800e476:	d866      	bhi.n	800e546 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e478:	4b45      	ldr	r3, [pc, #276]	; (800e590 <pvPortMalloc+0x198>)
 800e47a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e47c:	4b44      	ldr	r3, [pc, #272]	; (800e590 <pvPortMalloc+0x198>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e482:	e004      	b.n	800e48e <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	429a      	cmp	r2, r3
 800e496:	d903      	bls.n	800e4a0 <pvPortMalloc+0xa8>
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1f1      	bne.n	800e484 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4a0:	4b38      	ldr	r3, [pc, #224]	; (800e584 <pvPortMalloc+0x18c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d04d      	beq.n	800e546 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2208      	movs	r2, #8
 800e4b0:	4413      	add	r3, r2
 800e4b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	1ad2      	subs	r2, r2, r3
 800e4c4:	2308      	movs	r3, #8
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d921      	bls.n	800e510 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	f003 0307 	and.w	r3, r3, #7
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <pvPortMalloc+0x100>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	b672      	cpsid	i
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	b662      	cpsie	i
 800e4f2:	613b      	str	r3, [r7, #16]
}
 800e4f4:	bf00      	nop
 800e4f6:	e7fe      	b.n	800e4f6 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e50a:	69b8      	ldr	r0, [r7, #24]
 800e50c:	f000 f8a6 	bl	800e65c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e510:	4b1e      	ldr	r3, [pc, #120]	; (800e58c <pvPortMalloc+0x194>)
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	4a1c      	ldr	r2, [pc, #112]	; (800e58c <pvPortMalloc+0x194>)
 800e51c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e51e:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <pvPortMalloc+0x194>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	4b1c      	ldr	r3, [pc, #112]	; (800e594 <pvPortMalloc+0x19c>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	429a      	cmp	r2, r3
 800e528:	d203      	bcs.n	800e532 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <pvPortMalloc+0x194>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a19      	ldr	r2, [pc, #100]	; (800e594 <pvPortMalloc+0x19c>)
 800e530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	4b14      	ldr	r3, [pc, #80]	; (800e588 <pvPortMalloc+0x190>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	431a      	orrs	r2, r3
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	2200      	movs	r2, #0
 800e544:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e546:	f7ff fa07 	bl	800d958 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d101      	bne.n	800e554 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e550:	f7f1 ffe7 	bl	8000522 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	f003 0307 	and.w	r3, r3, #7
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00c      	beq.n	800e578 <pvPortMalloc+0x180>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e562:	b672      	cpsid	i
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	b662      	cpsie	i
 800e572:	60fb      	str	r3, [r7, #12]
}
 800e574:	bf00      	nop
 800e576:	e7fe      	b.n	800e576 <pvPortMalloc+0x17e>
	return pvReturn;
 800e578:	69fb      	ldr	r3, [r7, #28]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3728      	adds	r7, #40	; 0x28
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20008b5c 	.word	0x20008b5c
 800e588:	20008b68 	.word	0x20008b68
 800e58c:	20008b60 	.word	0x20008b60
 800e590:	20008b54 	.word	0x20008b54
 800e594:	20008b64 	.word	0x20008b64

0800e598 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5a4:	4b27      	ldr	r3, [pc, #156]	; (800e644 <prvHeapInit+0xac>)
 800e5a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00c      	beq.n	800e5cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3307      	adds	r3, #7
 800e5b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f023 0307 	bic.w	r3, r3, #7
 800e5be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	4a1f      	ldr	r2, [pc, #124]	; (800e644 <prvHeapInit+0xac>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5d0:	4a1d      	ldr	r2, [pc, #116]	; (800e648 <prvHeapInit+0xb0>)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5d6:	4b1c      	ldr	r3, [pc, #112]	; (800e648 <prvHeapInit+0xb0>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5e4:	2208      	movs	r2, #8
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	1a9b      	subs	r3, r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f023 0307 	bic.w	r3, r3, #7
 800e5f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4a15      	ldr	r2, [pc, #84]	; (800e64c <prvHeapInit+0xb4>)
 800e5f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e5fa:	4b14      	ldr	r3, [pc, #80]	; (800e64c <prvHeapInit+0xb4>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2200      	movs	r2, #0
 800e600:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e602:	4b12      	ldr	r3, [pc, #72]	; (800e64c <prvHeapInit+0xb4>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	1ad2      	subs	r2, r2, r3
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e618:	4b0c      	ldr	r3, [pc, #48]	; (800e64c <prvHeapInit+0xb4>)
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	4a0a      	ldr	r2, [pc, #40]	; (800e650 <prvHeapInit+0xb8>)
 800e626:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4a09      	ldr	r2, [pc, #36]	; (800e654 <prvHeapInit+0xbc>)
 800e62e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e630:	4b09      	ldr	r3, [pc, #36]	; (800e658 <prvHeapInit+0xc0>)
 800e632:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e636:	601a      	str	r2, [r3, #0]
}
 800e638:	bf00      	nop
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	20000b54 	.word	0x20000b54
 800e648:	20008b54 	.word	0x20008b54
 800e64c:	20008b5c 	.word	0x20008b5c
 800e650:	20008b64 	.word	0x20008b64
 800e654:	20008b60 	.word	0x20008b60
 800e658:	20008b68 	.word	0x20008b68

0800e65c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e664:	4b28      	ldr	r3, [pc, #160]	; (800e708 <prvInsertBlockIntoFreeList+0xac>)
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	e002      	b.n	800e670 <prvInsertBlockIntoFreeList+0x14>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	429a      	cmp	r2, r3
 800e678:	d8f7      	bhi.n	800e66a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	4413      	add	r3, r2
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d108      	bne.n	800e69e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	441a      	add	r2, r3
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	68ba      	ldr	r2, [r7, #8]
 800e6a8:	441a      	add	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d118      	bne.n	800e6e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	4b15      	ldr	r3, [pc, #84]	; (800e70c <prvInsertBlockIntoFreeList+0xb0>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d00d      	beq.n	800e6da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	441a      	add	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	e008      	b.n	800e6ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6da:	4b0c      	ldr	r3, [pc, #48]	; (800e70c <prvInsertBlockIntoFreeList+0xb0>)
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	e003      	b.n	800e6ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d002      	beq.n	800e6fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6fa:	bf00      	nop
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	20008b54 	.word	0x20008b54
 800e70c:	20008b5c 	.word	0x20008b5c

0800e710 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fe f8b2 	bl	800c888 <USBH_LL_IncTimer>
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe f8f6 	bl	800c92c <USBH_LL_Connect>
}
 800e740:	bf00      	nop
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f90b 	bl	800c972 <USBH_LL_Disconnect>
}
 800e75c:	bf00      	nop
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
 800e770:	4613      	mov	r3, r2
 800e772:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe f92b 	bl	800c9d6 <USBH_LL_NotifyURBChange>
#endif
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe f8a0 	bl	800c8dc <USBH_LL_PortEnabled>
}
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fe f8ac 	bl	800c910 <USBH_LL_PortDisabled>
}
 800e7b8:	bf00      	nop
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f5 ffd2 	bl	8004780 <HAL_HCD_Stop>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7e0:	7bfb      	ldrb	r3, [r7, #15]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 f808 	bl	800e7f8 <USBH_Get_USB_Status>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4603      	mov	r3, r0
 800e800:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	2b03      	cmp	r3, #3
 800e80a:	d817      	bhi.n	800e83c <USBH_Get_USB_Status+0x44>
 800e80c:	a201      	add	r2, pc, #4	; (adr r2, 800e814 <USBH_Get_USB_Status+0x1c>)
 800e80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e812:	bf00      	nop
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e82b 	.word	0x0800e82b
 800e81c:	0800e831 	.word	0x0800e831
 800e820:	0800e837 	.word	0x0800e837
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e824:	2300      	movs	r3, #0
 800e826:	73fb      	strb	r3, [r7, #15]
    break;
 800e828:	e00b      	b.n	800e842 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e82a:	2302      	movs	r3, #2
 800e82c:	73fb      	strb	r3, [r7, #15]
    break;
 800e82e:	e008      	b.n	800e842 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e830:	2301      	movs	r3, #1
 800e832:	73fb      	strb	r3, [r7, #15]
    break;
 800e834:	e005      	b.n	800e842 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e836:	2302      	movs	r3, #2
 800e838:	73fb      	strb	r3, [r7, #15]
    break;
 800e83a:	e002      	b.n	800e842 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e83c:	2302      	movs	r3, #2
 800e83e:	73fb      	strb	r3, [r7, #15]
    break;
 800e840:	bf00      	nop
  }
  return usb_status;
 800e842:	7bfb      	ldrb	r3, [r7, #15]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3714      	adds	r7, #20
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <memset>:
 800e850:	4402      	add	r2, r0
 800e852:	4603      	mov	r3, r0
 800e854:	4293      	cmp	r3, r2
 800e856:	d100      	bne.n	800e85a <memset+0xa>
 800e858:	4770      	bx	lr
 800e85a:	f803 1b01 	strb.w	r1, [r3], #1
 800e85e:	e7f9      	b.n	800e854 <memset+0x4>

0800e860 <__libc_init_array>:
 800e860:	b570      	push	{r4, r5, r6, lr}
 800e862:	4d0d      	ldr	r5, [pc, #52]	; (800e898 <__libc_init_array+0x38>)
 800e864:	4c0d      	ldr	r4, [pc, #52]	; (800e89c <__libc_init_array+0x3c>)
 800e866:	1b64      	subs	r4, r4, r5
 800e868:	10a4      	asrs	r4, r4, #2
 800e86a:	2600      	movs	r6, #0
 800e86c:	42a6      	cmp	r6, r4
 800e86e:	d109      	bne.n	800e884 <__libc_init_array+0x24>
 800e870:	4d0b      	ldr	r5, [pc, #44]	; (800e8a0 <__libc_init_array+0x40>)
 800e872:	4c0c      	ldr	r4, [pc, #48]	; (800e8a4 <__libc_init_array+0x44>)
 800e874:	f000 f826 	bl	800e8c4 <_init>
 800e878:	1b64      	subs	r4, r4, r5
 800e87a:	10a4      	asrs	r4, r4, #2
 800e87c:	2600      	movs	r6, #0
 800e87e:	42a6      	cmp	r6, r4
 800e880:	d105      	bne.n	800e88e <__libc_init_array+0x2e>
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	f855 3b04 	ldr.w	r3, [r5], #4
 800e888:	4798      	blx	r3
 800e88a:	3601      	adds	r6, #1
 800e88c:	e7ee      	b.n	800e86c <__libc_init_array+0xc>
 800e88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e892:	4798      	blx	r3
 800e894:	3601      	adds	r6, #1
 800e896:	e7f2      	b.n	800e87e <__libc_init_array+0x1e>
 800e898:	0800e920 	.word	0x0800e920
 800e89c:	0800e920 	.word	0x0800e920
 800e8a0:	0800e920 	.word	0x0800e920
 800e8a4:	0800e924 	.word	0x0800e924

0800e8a8 <memcpy>:
 800e8a8:	440a      	add	r2, r1
 800e8aa:	4291      	cmp	r1, r2
 800e8ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e8b0:	d100      	bne.n	800e8b4 <memcpy+0xc>
 800e8b2:	4770      	bx	lr
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8be:	4291      	cmp	r1, r2
 800e8c0:	d1f9      	bne.n	800e8b6 <memcpy+0xe>
 800e8c2:	bd10      	pop	{r4, pc}

0800e8c4 <_init>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	bf00      	nop
 800e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ca:	bc08      	pop	{r3}
 800e8cc:	469e      	mov	lr, r3
 800e8ce:	4770      	bx	lr

0800e8d0 <_fini>:
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d2:	bf00      	nop
 800e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d6:	bc08      	pop	{r3}
 800e8d8:	469e      	mov	lr, r3
 800e8da:	4770      	bx	lr
